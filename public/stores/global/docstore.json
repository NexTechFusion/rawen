[[["3ae6274d-43fd-4542-8c73-ced52e914f94",{"pageContent":"test","metadata":{"source_type":"File","file_name":"test.txt","file_path":"?","file_date":"2023-10-19T06:34:57.852Z","file_page_lines":{"from":1,"to":1}}}],["0e49b3df-0936-43a5-a856-1fe4d1f65754",{"pageContent":"id: 1\nmessage_main_attachment_id: NULL\nname: Restaurant Expenses\nsequence: 1\ndescription: NULL\ndescription_purchase: NULL\ndescription_sale: NULL\ndetailed_type: service\ntype: service\ncateg_id: 3\nlist_price: 14.00\nvolume: 0.00\nweight: 0.00\nsale_ok: True\npurchase_ok: True\nuom_id: 1\nuom_po_id: 1\ncompany_id: NULL\nactive: True\ncolor: NULL\ndefault_code: NULL\ncan_image_1024_be_zoomed: False\nhas_configurable_attributes: False\npriority: 0\ncreate_uid: 1\ncreate_date: 2023-10-13 06:04:09.367332\nwrite_uid: 1\nwrite_date: 2023-10-13 06:04:09.367332\nsale_delay: 0\ntracking: none\ndescription_picking: NULL\ndescription_pickingout: NULL\ndescription_pickingin: NULL\nproduce_delay: 0\npurchase_method: receive\npurchase_line_warn: no-message\npurchase_line_warn_msg: NULL","metadata":{"source_type":"File","file_name":"product-db.csv","file_path":"C:\\Users\\nokol\\Desktop\\training-data\\product-db.csv","file_date":"2023-10-19T06:35:15.023Z","file_page_lines":{"from":1,"to":37}}}],["8b8db798-6bb6-4ca5-881c-d7b4efd31e96",{"pageContent":"id: 2\nmessage_main_attachment_id: NULL\nname: Hotel Accommodation\nsequence: 1\ndescription: NULL\ndescription_purchase: NULL\ndescription_sale: NULL\ndetailed_type: service\ntype: service\ncateg_id: 3\nlist_price: 400.00\nvolume: 0.00\nweight: 0.00\nsale_ok: True\npurchase_ok: True\nuom_id: 3\nuom_po_id: 3\ncompany_id: NULL\nactive: True\ncolor: NULL\ndefault_code: NULL\ncan_image_1024_be_zoomed: False\nhas_configurable_attributes: False\npriority: 0\ncreate_uid: 1\ncreate_date: 2023-10-13 06:04:09.367332\nwrite_uid: 1\nwrite_date: 2023-10-13 06:04:09.367332\nsale_delay: 0\ntracking: none\ndescription_picking: NULL\ndescription_pickingout: NULL\ndescription_pickingin: NULL\nproduce_delay: 0\npurchase_method: receive\npurchase_line_warn: no-message\npurchase_line_warn_msg: NULL","metadata":{"source_type":"File","file_name":"product-db.csv","file_path":"C:\\Users\\nokol\\Desktop\\training-data\\product-db.csv","file_date":"2023-10-19T06:35:15.023Z","file_page_lines":{"from":1,"to":37}}}],["44661b8f-7f88-4938-841c-673971dc8d9e",{"pageContent":"id: 3\nmessage_main_attachment_id: NULL\nname: Virtual Interior Design\nsequence: 1\ndescription: NULL\ndescription_purchase: NULL\ndescription_sale: NULL\ndetailed_type: service\ntype: service\ncateg_id: 5\nlist_price: 30.75\nvolume: 0.00\nweight: 0.00\nsale_ok: True\npurchase_ok: True\nuom_id: 4\nuom_po_id: 4\ncompany_id: NULL\nactive: True\ncolor: NULL\ndefault_code: NULL\ncan_image_1024_be_zoomed: False\nhas_configurable_attributes: False\npriority: 0\ncreate_uid: 1\ncreate_date: 2023-10-13 06:04:09.367332\nwrite_uid: 1\nwrite_date: 2023-10-13 06:04:09.367332\nsale_delay: 0\ntracking: none\ndescription_picking: NULL\ndescription_pickingout: NULL\ndescription_pickingin: NULL\nproduce_delay: 0\npurchase_method: receive\npurchase_line_warn: no-message\npurchase_line_warn_msg: NULL","metadata":{"source_type":"File","file_name":"product-db.csv","file_path":"C:\\Users\\nokol\\Desktop\\training-data\\product-db.csv","file_date":"2023-10-19T06:35:15.023Z","file_page_lines":{"from":1,"to":37}}}],["927f2490-d8a1-4dd9-8c87-e09ae554bacc",{"pageContent":"id: 4\nmessage_main_attachment_id: NULL\nname: Virtual Home Staging\nsequence: 1\ndescription: NULL\ndescription_purchase: NULL\ndescription_sale: NULL\ndetailed_type: service\ntype: service\ncateg_id: 5\nlist_price: 38.25\nvolume: 0.00\nweight: 0.00\nsale_ok: True\npurchase_ok: True\nuom_id: 4\nuom_po_id: 4\ncompany_id: NULL\nactive: True\ncolor: NULL\ndefault_code: NULL\ncan_image_1024_be_zoomed: False\nhas_configurable_attributes: False\npriority: 0\ncreate_uid: 1\ncreate_date: 2023-10-13 06:04:09.367332\nwrite_uid: 1\nwrite_date: 2023-10-13 06:04:09.367332\nsale_delay: 0\ntracking: none\ndescription_picking: NULL\ndescription_pickingout: NULL\ndescription_pickingin: NULL\nproduce_delay: 0\npurchase_method: receive\npurchase_line_warn: no-message\npurchase_line_warn_msg: NULL","metadata":{"source_type":"File","file_name":"product-db.csv","file_path":"C:\\Users\\nokol\\Desktop\\training-data\\product-db.csv","file_date":"2023-10-19T06:35:15.023Z","file_page_lines":{"from":1,"to":37}}}],["04bb5994-ed80-4c75-9232-92b5a1fdcbf1",{"pageContent":"id: 7\nmessage_main_attachment_id: NULL\nname: Office Design Software\nsequence: 1\ndescription: NULL\ndescription_purchase: NULL\ndescription_sale: NULL\ndetailed_type: product\ntype: product\ncateg_id: 7\nlist_price: 280.00\nvolume: 0.00\nweight: 0.01\nsale_ok: True\npurchase_ok: True\nuom_id: 1\nuom_po_id: 1\ncompany_id: NULL\nactive: True\ncolor: NULL\ndefault_code: FURN_9999\ncan_image_1024_be_zoomed: False\nhas_configurable_attributes: False\npriority: 0\ncreate_uid: 1\ncreate_date: 2023-10-13 06:04:09.367332\nwrite_uid: 1\nwrite_date: 2023-10-13 06:04:34.560389\nsale_delay: 0\ntracking: none\ndescription_picking: NULL\ndescription_pickingout: NULL\ndescription_pickingin: NULL\nproduce_delay: 0\npurchase_method: receive\npurchase_line_warn: no-message\npurchase_line_warn_msg: NULL","metadata":{"source_type":"File","file_name":"product-db.csv","file_path":"C:\\Users\\nokol\\Desktop\\training-data\\product-db.csv","file_date":"2023-10-19T06:35:15.023Z","file_page_lines":{"from":1,"to":37}}}],["cc550f28-3e5e-4d20-9017-347d1f6981b7",{"pageContent":"id: 9\nmessage_main_attachment_id: NULL\nname: Customizable Desk\nsequence: 1\ndescription: NULL\ndescription_purchase: NULL\ndescription_sale: 160x80cm, with large legs.\ndetailed_type: product\ntype: product\ncateg_id: 8\nlist_price: 750.00\nvolume: 0.00\nweight: 0.00\nsale_ok: True\npurchase_ok: True\nuom_id: 1\nuom_po_id: 1\ncompany_id: NULL\nactive: True\ncolor: NULL\ndefault_code: NULL\ncan_image_1024_be_zoomed: False\nhas_configurable_attributes: True\npriority: 0\ncreate_uid: 1\ncreate_date: 2023-10-13 06:04:09.367332\nwrite_uid: 1\nwrite_date: 2023-10-13 06:04:34.560389\nsale_delay: 0\ntracking: none\ndescription_picking: NULL\ndescription_pickingout: NULL\ndescription_pickingin: NULL\nproduce_delay: 0\npurchase_method: receive\npurchase_line_warn: no-message\npurchase_line_warn_msg: NULL","metadata":{"source_type":"File","file_name":"product-db.csv","file_path":"C:\\Users\\nokol\\Desktop\\training-data\\product-db.csv","file_date":"2023-10-19T06:35:15.023Z","file_page_lines":{"from":1,"to":37}}}],["91e4f6b7-10fe-4854-8b79-823b090afab3",{"pageContent":"id: 11\nmessage_main_attachment_id: NULL\nname: Large Cabinet\nsequence: 1\ndescription: NULL\ndescription_purchase: NULL\ndescription_sale: NULL\ndetailed_type: product\ntype: product\ncateg_id: 8\nlist_price: 320.00\nvolume: 0.00\nweight: 0.33\nsale_ok: True\npurchase_ok: True\nuom_id: 1\nuom_po_id: 1\ncompany_id: NULL\nactive: True\ncolor: NULL\ndefault_code: E-COM07\ncan_image_1024_be_zoomed: False\nhas_configurable_attributes: False\npriority: 0\ncreate_uid: 1\ncreate_date: 2023-10-13 06:04:09.367332\nwrite_uid: 1\nwrite_date: 2023-10-13 06:04:34.560389\nsale_delay: 0\ntracking: none\ndescription_picking: NULL\ndescription_pickingout: NULL\ndescription_pickingin: NULL\nproduce_delay: 0\npurchase_method: receive\npurchase_line_warn: no-message\npurchase_line_warn_msg: NULL","metadata":{"source_type":"File","file_name":"product-db.csv","file_path":"C:\\Users\\nokol\\Desktop\\training-data\\product-db.csv","file_date":"2023-10-19T06:35:15.023Z","file_page_lines":{"from":1,"to":37}}}],["9c5de7d8-3908-4723-9ff5-5125e5392d32",{"pageContent":"id: 12\nmessage_main_attachment_id: NULL\nname: Storage Box\nsequence: 1\ndescription: NULL\ndescription_purchase: NULL\ndescription_sale: NULL\ndetailed_type: product\ntype: product\ncateg_id: 8\nlist_price: 15.80\nvolume: 0.00\nweight: 0.01\nsale_ok: True\npurchase_ok: True\nuom_id: 1\nuom_po_id: 1\ncompany_id: NULL\nactive: True\ncolor: NULL\ndefault_code: E-COM08\ncan_image_1024_be_zoomed: False\nhas_configurable_attributes: False\npriority: 0\ncreate_uid: 1\ncreate_date: 2023-10-13 06:04:09.367332\nwrite_uid: 1\nwrite_date: 2023-10-13 06:04:34.560389\nsale_delay: 0\ntracking: none\ndescription_picking: NULL\ndescription_pickingout: NULL\ndescription_pickingin: NULL\nproduce_delay: 0\npurchase_method: receive\npurchase_line_warn: no-message\npurchase_line_warn_msg: NULL","metadata":{"source_type":"File","file_name":"product-db.csv","file_path":"C:\\Users\\nokol\\Desktop\\training-data\\product-db.csv","file_date":"2023-10-19T06:35:15.023Z","file_page_lines":{"from":1,"to":37}}}],["c1283a37-7558-487f-a36b-a1f516411540",{"pageContent":"id: 13\nmessage_main_attachment_id: NULL\nname: Large Desk\nsequence: 1\ndescription: NULL\ndescription_purchase: NULL\ndescription_sale: NULL\ndetailed_type: product\ntype: product\ncateg_id: 8\nlist_price: 1799.00\nvolume: 0.00\nweight: 9.54\nsale_ok: True\npurchase_ok: True\nuom_id: 1\nuom_po_id: 1\ncompany_id: NULL\nactive: True\ncolor: NULL\ndefault_code: E-COM09\ncan_image_1024_be_zoomed: False\nhas_configurable_attributes: False\npriority: 0\ncreate_uid: 1\ncreate_date: 2023-10-13 06:04:09.367332\nwrite_uid: 1\nwrite_date: 2023-10-13 06:04:34.560389\nsale_delay: 0\ntracking: none\ndescription_picking: NULL\ndescription_pickingout: NULL\ndescription_pickingin: NULL\nproduce_delay: 0\npurchase_method: receive\npurchase_line_warn: no-message\npurchase_line_warn_msg: NULL","metadata":{"source_type":"File","file_name":"product-db.csv","file_path":"C:\\Users\\nokol\\Desktop\\training-data\\product-db.csv","file_date":"2023-10-19T06:35:15.023Z","file_page_lines":{"from":1,"to":37}}}],["a814375f-c7c4-4320-af6b-8d96650cae2b",{"pageContent":"id: 5\nmessage_main_attachment_id: NULL\nname: Office Chair\nsequence: 1\ndescription: NULL\ndescription_purchase: NULL\ndescription_sale: NULL\ndetailed_type: product\ntype: product\ncateg_id: 8\nlist_price: 70.00\nvolume: 0.00\nweight: 0.01\nsale_ok: True\npurchase_ok: True\nuom_id: 1\nuom_po_id: 1\ncompany_id: NULL\nactive: True\ncolor: NULL\ndefault_code: FURN_7777\ncan_image_1024_be_zoomed: False\nhas_configurable_attributes: False\npriority: 0\ncreate_uid: 1\ncreate_date: 2023-10-13 06:04:09.367332\nwrite_uid: 1\nwrite_date: 2023-10-17 10:11:24.404237\nsale_delay: 0\ntracking: none\ndescription_picking: NULL\ndescription_pickingout: NULL\ndescription_pickingin: NULL\nproduce_delay: 0\npurchase_method: receive\npurchase_line_warn: no-message\npurchase_line_warn_msg: NULL","metadata":{"source_type":"File","file_name":"product-db.csv","file_path":"C:\\Users\\nokol\\Desktop\\training-data\\product-db.csv","file_date":"2023-10-19T06:35:15.023Z","file_page_lines":{"from":1,"to":37}}}],["a3cff873-9f9f-482d-ade2-08cfe54b6dc8",{"pageContent":"id: 6\nmessage_main_attachment_id: NULL\nname: Office Lamp\nsequence: 1\ndescription: NULL\ndescription_purchase: NULL\ndescription_sale: NULL\ndetailed_type: product\ntype: product\ncateg_id: 8\nlist_price: 40.00\nvolume: 0.00\nweight: 0.01\nsale_ok: True\npurchase_ok: True\nuom_id: 1\nuom_po_id: 1\ncompany_id: NULL\nactive: True\ncolor: NULL\ndefault_code: FURN_8888\ncan_image_1024_be_zoomed: False\nhas_configurable_attributes: False\npriority: 0\ncreate_uid: 1\ncreate_date: 2023-10-13 06:04:09.367332\nwrite_uid: 1\nwrite_date: 2023-10-17 10:11:24.404237\nsale_delay: 0\ntracking: none\ndescription_picking: NULL\ndescription_pickingout: NULL\ndescription_pickingin: NULL\nproduce_delay: 0\npurchase_method: receive\npurchase_line_warn: no-message\npurchase_line_warn_msg: NULL","metadata":{"source_type":"File","file_name":"product-db.csv","file_path":"C:\\Users\\nokol\\Desktop\\training-data\\product-db.csv","file_date":"2023-10-19T06:35:15.023Z","file_page_lines":{"from":1,"to":37}}}],["f25d2c8c-b30e-440a-84d2-13a085d2580e",{"pageContent":"id: 10\nmessage_main_attachment_id: NULL\nname: Corner Desk Right Sit\nsequence: 1\ndescription: NULL\ndescription_purchase: NULL\ndescription_sale: NULL\ndetailed_type: product\ntype: product\ncateg_id: 8\nlist_price: 147.00\nvolume: 0.00\nweight: 0.01\nsale_ok: True\npurchase_ok: True\nuom_id: 1\nuom_po_id: 1\ncompany_id: NULL\nactive: True\ncolor: NULL\ndefault_code: E-COM06\ncan_image_1024_be_zoomed: False\nhas_configurable_attributes: False\npriority: 0\ncreate_uid: 1\ncreate_date: 2023-10-13 06:04:09.367332\nwrite_uid: 1\nwrite_date: 2023-10-17 10:11:24.404237\nsale_delay: 0\ntracking: none\ndescription_picking: NULL\ndescription_pickingout: NULL\ndescription_pickingin: NULL\nproduce_delay: 0\npurchase_method: receive\npurchase_line_warn: no-message\npurchase_line_warn_msg: NULL","metadata":{"source_type":"File","file_name":"product-db.csv","file_path":"C:\\Users\\nokol\\Desktop\\training-data\\product-db.csv","file_date":"2023-10-19T06:35:15.023Z","file_page_lines":{"from":1,"to":37}}}],["59e5d4e7-9b60-443b-bde5-c0dd967608cd",{"pageContent":"id: 14\nmessage_main_attachment_id: NULL\nname: Pedal Bin\nsequence: 1\ndescription: NULL\ndescription_purchase: NULL\ndescription_sale: NULL\ndetailed_type: product\ntype: product\ncateg_id: 8\nlist_price: 47.00\nvolume: 0.00\nweight: 0.01\nsale_ok: True\npurchase_ok: True\nuom_id: 1\nuom_po_id: 1\ncompany_id: NULL\nactive: True\ncolor: NULL\ndefault_code: E-COM10\ncan_image_1024_be_zoomed: False\nhas_configurable_attributes: False\npriority: 0\ncreate_uid: 1\ncreate_date: 2023-10-13 06:04:09.367332\nwrite_uid: 1\nwrite_date: 2023-10-17 10:11:24.404237\nsale_delay: 0\ntracking: none\ndescription_picking: NULL\ndescription_pickingout: NULL\ndescription_pickingin: NULL\nproduce_delay: 0\npurchase_method: receive\npurchase_line_warn: no-message\npurchase_line_warn_msg: NULL","metadata":{"source_type":"File","file_name":"product-db.csv","file_path":"C:\\Users\\nokol\\Desktop\\training-data\\product-db.csv","file_date":"2023-10-19T06:35:15.023Z","file_page_lines":{"from":1,"to":37}}}],["ffe12691-95c5-4925-96fc-5f292af8f495",{"pageContent":"id: 17\nmessage_main_attachment_id: NULL\nname: Office Chair Black\nsequence: 1\ndescription: NULL\ndescription_purchase: NULL\ndescription_sale: NULL\ndetailed_type: product\ntype: product\ncateg_id: 8\nlist_price: 120.50\nvolume: 0.00\nweight: 0.01\nsale_ok: True\npurchase_ok: True\nuom_id: 1\nuom_po_id: 1\ncompany_id: NULL\nactive: True\ncolor: NULL\ndefault_code: FURN_0269\ncan_image_1024_be_zoomed: False\nhas_configurable_attributes: False\npriority: 0\ncreate_uid: 1\ncreate_date: 2023-10-13 06:04:09.367332\nwrite_uid: 1\nwrite_date: 2023-10-17 10:11:24.404237\nsale_delay: 0\ntracking: none\ndescription_picking: NULL\ndescription_pickingout: NULL\ndescription_pickingin: NULL\nproduce_delay: 0\npurchase_method: receive\npurchase_line_warn: no-message\npurchase_line_warn_msg: NULL","metadata":{"source_type":"File","file_name":"product-db.csv","file_path":"C:\\Users\\nokol\\Desktop\\training-data\\product-db.csv","file_date":"2023-10-19T06:35:15.023Z","file_page_lines":{"from":1,"to":37}}}],["be1ffd0c-e791-4210-b2bc-6ae706ade684",{"pageContent":"id: 22\nmessage_main_attachment_id: NULL\nname: Individual Workplace\nsequence: 1\ndescription: NULL\ndescription_purchase: NULL\ndescription_sale: NULL\ndetailed_type: product\ntype: product\ncateg_id: 8\nlist_price: 885.00\nvolume: 0.00\nweight: 0.01\nsale_ok: True\npurchase_ok: True\nuom_id: 1\nuom_po_id: 1\ncompany_id: NULL\nactive: True\ncolor: NULL\ndefault_code: FURN_0789\ncan_image_1024_be_zoomed: False\nhas_configurable_attributes: False\npriority: 0\ncreate_uid: 1\ncreate_date: 2023-10-13 06:04:09.367332\nwrite_uid: 1\nwrite_date: 2023-10-13 06:04:34.560389\nsale_delay: 0\ntracking: none\ndescription_picking: NULL\ndescription_pickingout: NULL\ndescription_pickingin: NULL\nproduce_delay: 0\npurchase_method: receive\npurchase_line_warn: no-message\npurchase_line_warn_msg: NULL","metadata":{"source_type":"File","file_name":"product-db.csv","file_path":"C:\\Users\\nokol\\Desktop\\training-data\\product-db.csv","file_date":"2023-10-19T06:35:15.023Z","file_page_lines":{"from":1,"to":37}}}],["1defebfc-ee8a-4291-ae5e-b6ad112ee6b8",{"pageContent":"id: 25\nmessage_main_attachment_id: NULL\nname: Four Person Desk\nsequence: 1\ndescription: NULL\ndescription_purchase: NULL\ndescription_sale: Four person modern office workstation\ndetailed_type: product\ntype: product\ncateg_id: 8\nlist_price: 2350.00\nvolume: 0.00\nweight: 0.01\nsale_ok: True\npurchase_ok: True\nuom_id: 1\nuom_po_id: 1\ncompany_id: NULL\nactive: True\ncolor: NULL\ndefault_code: FURN_8220\ncan_image_1024_be_zoomed: False\nhas_configurable_attributes: False\npriority: 0\ncreate_uid: 1\ncreate_date: 2023-10-13 06:04:09.367332\nwrite_uid: 1\nwrite_date: 2023-10-13 06:04:34.560389\nsale_delay: 0\ntracking: none\ndescription_picking: NULL\ndescription_pickingout: NULL\ndescription_pickingin: NULL\nproduce_delay: 0\npurchase_method: receive\npurchase_line_warn: no-message\npurchase_line_warn_msg: NULL","metadata":{"source_type":"File","file_name":"product-db.csv","file_path":"C:\\Users\\nokol\\Desktop\\training-data\\product-db.csv","file_date":"2023-10-19T06:35:15.023Z","file_page_lines":{"from":1,"to":37}}}],["054fa730-92b0-4159-a616-827ed4fcde9a",{"pageContent":"id: 26\nmessage_main_attachment_id: NULL\nname: Large Meeting Table\nsequence: 1\ndescription: NULL\ndescription_purchase: NULL\ndescription_sale: Conference room table\ndetailed_type: product\ntype: product\ncateg_id: 8\nlist_price: 4000.00\nvolume: 0.00\nweight: 0.01\nsale_ok: True\npurchase_ok: True\nuom_id: 1\nuom_po_id: 1\ncompany_id: NULL\nactive: True\ncolor: NULL\ndefault_code: FURN_6741\ncan_image_1024_be_zoomed: False\nhas_configurable_attributes: False\npriority: 0\ncreate_uid: 1\ncreate_date: 2023-10-13 06:04:09.367332\nwrite_uid: 1\nwrite_date: 2023-10-13 06:04:34.560389\nsale_delay: 0\ntracking: none\ndescription_picking: NULL\ndescription_pickingout: NULL\ndescription_pickingin: NULL\nproduce_delay: 0\npurchase_method: receive\npurchase_line_warn: no-message\npurchase_line_warn_msg: NULL","metadata":{"source_type":"File","file_name":"product-db.csv","file_path":"C:\\Users\\nokol\\Desktop\\training-data\\product-db.csv","file_date":"2023-10-19T06:35:15.023Z","file_page_lines":{"from":1,"to":37}}}],["62bd4e4f-277f-4f11-9061-7e694adc7358",{"pageContent":"id: 27\nmessage_main_attachment_id: NULL\nname: Three-Seat Sofa\nsequence: 1\ndescription: NULL\ndescription_purchase: NULL\ndescription_sale: Three Seater Sofa with Lounger in Steel Grey Colour\ndetailed_type: product\ntype: product\ncateg_id: 8\nlist_price: 1500.00\nvolume: 0.00\nweight: 0.01\nsale_ok: True\npurchase_ok: True\nuom_id: 1\nuom_po_id: 1\ncompany_id: NULL\nactive: True\ncolor: NULL\ndefault_code: FURN_8999\ncan_image_1024_be_zoomed: False\nhas_configurable_attributes: False\npriority: 0\ncreate_uid: 1\ncreate_date: 2023-10-13 06:04:09.367332\nwrite_uid: 1\nwrite_date: 2023-10-13 06:04:34.560389\nsale_delay: 0\ntracking: none\ndescription_picking: NULL\ndescription_pickingout: NULL\ndescription_pickingin: NULL\nproduce_delay: 0\npurchase_method: receive\npurchase_line_warn: no-message\npurchase_line_warn_msg: NULL","metadata":{"source_type":"File","file_name":"product-db.csv","file_path":"C:\\Users\\nokol\\Desktop\\training-data\\product-db.csv","file_date":"2023-10-19T06:35:15.023Z","file_page_lines":{"from":1,"to":37}}}],["5606b98f-8b72-4404-bced-ccf69f45b2b9",{"pageContent":"id: 16\nmessage_main_attachment_id: NULL\nname: Conference Chair\nsequence: 1\ndescription: NULL\ndescription_purchase: NULL\ndescription_sale: NULL\ndetailed_type: product\ntype: product\ncateg_id: 8\nlist_price: 33.00\nvolume: 0.00\nweight: 0.00\nsale_ok: True\npurchase_ok: True\nuom_id: 1\nuom_po_id: 1\ncompany_id: NULL\nactive: True\ncolor: NULL\ndefault_code: NULL\ncan_image_1024_be_zoomed: False\nhas_configurable_attributes: True\npriority: 0\ncreate_uid: 1\ncreate_date: 2023-10-13 06:04:09.367332\nwrite_uid: 1\nwrite_date: 2023-10-13 06:04:34.560389\nsale_delay: 0\ntracking: none\ndescription_picking: NULL\ndescription_pickingout: NULL\ndescription_pickingin: NULL\nproduce_delay: 0\npurchase_method: receive\npurchase_line_warn: no-message\npurchase_line_warn_msg: NULL","metadata":{"source_type":"File","file_name":"product-db.csv","file_path":"C:\\Users\\nokol\\Desktop\\training-data\\product-db.csv","file_date":"2023-10-19T06:35:15.023Z","file_page_lines":{"from":1,"to":37}}}],["b45716b1-d1cd-4bc7-b2e1-1f3af422b673",{"pageContent":"id: 28\nmessage_main_attachment_id: NULL\nname: Cable Management Box\nsequence: 1\ndescription: NULL\ndescription_purchase: NULL\ndescription_sale: NULL\ndetailed_type: product\ntype: product\ncateg_id: 8\nlist_price: 100.00\nvolume: 0.00\nweight: 1.00\nsale_ok: True\npurchase_ok: True\nuom_id: 1\nuom_po_id: 1\ncompany_id: NULL\nactive: True\ncolor: NULL\ndefault_code: FURN_5555\ncan_image_1024_be_zoomed: False\nhas_configurable_attributes: False\npriority: 0\ncreate_uid: 1\ncreate_date: 2023-10-13 06:04:34.560389\nwrite_uid: 1\nwrite_date: 2023-10-13 06:04:34.560389\nsale_delay: 0\ntracking: lot\ndescription_picking: NULL\ndescription_pickingout: NULL\ndescription_pickingin: NULL\nproduce_delay: 0\npurchase_method: receive\npurchase_line_warn: no-message\npurchase_line_warn_msg: NULL","metadata":{"source_type":"File","file_name":"product-db.csv","file_path":"C:\\Users\\nokol\\Desktop\\training-data\\product-db.csv","file_date":"2023-10-19T06:35:15.023Z","file_page_lines":{"from":1,"to":37}}}],["792f19ec-6955-435c-a3b5-5948c2a963f4",{"pageContent":"id: 33\nmessage_main_attachment_id: NULL\nname: Screw\nsequence: 1\ndescription: <p>Stainless steel screw</p>\ndescription_purchase: NULL\ndescription_sale: NULL\ndetailed_type: consu\ntype: consu\ncateg_id: 9\nlist_price: 0.20\nvolume: 0.00\nweight: 0.01\nsale_ok: True\npurchase_ok: True\nuom_id: 1\nuom_po_id: 1\ncompany_id: NULL\nactive: True\ncolor: NULL\ndefault_code: CONS_25630\ncan_image_1024_be_zoomed: False\nhas_configurable_attributes: False\npriority: 0\ncreate_uid: 1\ncreate_date: 2023-10-13 06:06:55.062938\nwrite_uid: 1\nwrite_date: 2023-10-13 06:06:55.062938\nsale_delay: 0\ntracking: none\ndescription_picking: NULL\ndescription_pickingout: NULL\ndescription_pickingin: NULL\nproduce_delay: 0\npurchase_method: receive\npurchase_line_warn: no-message\npurchase_line_warn_msg: NULL","metadata":{"source_type":"File","file_name":"product-db.csv","file_path":"C:\\Users\\nokol\\Desktop\\training-data\\product-db.csv","file_date":"2023-10-19T06:35:15.023Z","file_page_lines":{"from":1,"to":37}}}],["b6d20455-9eed-438c-bb13-693f75eac632",{"pageContent":"id: 34\nmessage_main_attachment_id: NULL\nname: Ply Layer\nsequence: 1\ndescription: <p>Layers that are stick together to assemble wood panels.</p>\ndescription_purchase: NULL\ndescription_sale: NULL\ndetailed_type: product\ntype: product\ncateg_id: 8\nlist_price: 10.00\nvolume: 0.00\nweight: 0.01\nsale_ok: True\npurchase_ok: True\nuom_id: 1\nuom_po_id: 1\ncompany_id: NULL\nactive: True\ncolor: NULL\ndefault_code: FURN_7111\ncan_image_1024_be_zoomed: False\nhas_configurable_attributes: False\npriority: 0\ncreate_uid: 1\ncreate_date: 2023-10-13 06:06:55.062938\nwrite_uid: 1\nwrite_date: 2023-10-13 06:06:55.062938\nsale_delay: 0\ntracking: none\ndescription_picking: NULL\ndescription_pickingout: NULL\ndescription_pickingin: NULL\nproduce_delay: 0\npurchase_method: receive\npurchase_line_warn: no-message\npurchase_line_warn_msg: NULL","metadata":{"source_type":"File","file_name":"product-db.csv","file_path":"C:\\Users\\nokol\\Desktop\\training-data\\product-db.csv","file_date":"2023-10-19T06:35:15.023Z","file_page_lines":{"from":1,"to":37}}}],["23729ec8-0436-41d4-8895-b435d5444752",{"pageContent":"id: 35\nmessage_main_attachment_id: NULL\nname: Wear Layer\nsequence: 1\ndescription: <p>Top layer of a wood panel.</p>\ndescription_purchase: NULL\ndescription_sale: NULL\ndetailed_type: product\ntype: product\ncateg_id: 8\nlist_price: 10.00\nvolume: 0.00\nweight: 0.01\nsale_ok: True\npurchase_ok: True\nuom_id: 1\nuom_po_id: 1\ncompany_id: NULL\nactive: True\ncolor: NULL\ndefault_code: FURN_8111\ncan_image_1024_be_zoomed: False\nhas_configurable_attributes: False\npriority: 0\ncreate_uid: 1\ncreate_date: 2023-10-13 06:06:55.062938\nwrite_uid: 1\nwrite_date: 2023-10-13 06:06:55.062938\nsale_delay: 0\ntracking: none\ndescription_picking: NULL\ndescription_pickingout: NULL\ndescription_pickingin: NULL\nproduce_delay: 0\npurchase_method: receive\npurchase_line_warn: no-message\npurchase_line_warn_msg: NULL","metadata":{"source_type":"File","file_name":"product-db.csv","file_path":"C:\\Users\\nokol\\Desktop\\training-data\\product-db.csv","file_date":"2023-10-19T06:35:15.023Z","file_page_lines":{"from":1,"to":37}}}],["06738397-23c6-427f-ae43-94810e84f138",{"pageContent":"id: 36\nmessage_main_attachment_id: NULL\nname: Ply Veneer\nsequence: 1\ndescription: NULL\ndescription_purchase: NULL\ndescription_sale: NULL\ndetailed_type: product\ntype: product\ncateg_id: 8\nlist_price: 10.00\nvolume: 0.00\nweight: 0.01\nsale_ok: True\npurchase_ok: True\nuom_id: 1\nuom_po_id: 1\ncompany_id: NULL\nactive: True\ncolor: NULL\ndefault_code: FURN_9111\ncan_image_1024_be_zoomed: False\nhas_configurable_attributes: False\npriority: 0\ncreate_uid: 1\ncreate_date: 2023-10-13 06:06:55.062938\nwrite_uid: 1\nwrite_date: 2023-10-13 06:06:55.062938\nsale_delay: 0\ntracking: none\ndescription_picking: NULL\ndescription_pickingout: NULL\ndescription_pickingin: NULL\nproduce_delay: 0\npurchase_method: receive\npurchase_line_warn: no-message\npurchase_line_warn_msg: NULL","metadata":{"source_type":"File","file_name":"product-db.csv","file_path":"C:\\Users\\nokol\\Desktop\\training-data\\product-db.csv","file_date":"2023-10-19T06:35:15.023Z","file_page_lines":{"from":1,"to":37}}}],["3377affc-4c3b-4fe8-b469-c8537aa94487",{"pageContent":"id: 37\nmessage_main_attachment_id: NULL\nname: Wood Panel\nsequence: 1\ndescription: NULL\ndescription_purchase: NULL\ndescription_sale: NULL\ndetailed_type: product\ntype: product\ncateg_id: 8\nlist_price: 100.00\nvolume: 0.00\nweight: 0.01\nsale_ok: True\npurchase_ok: True\nuom_id: 1\nuom_po_id: 1\ncompany_id: NULL\nactive: True\ncolor: NULL\ndefault_code: FURN_7023\ncan_image_1024_be_zoomed: False\nhas_configurable_attributes: False\npriority: 0\ncreate_uid: 1\ncreate_date: 2023-10-13 06:06:55.062938\nwrite_uid: 1\nwrite_date: 2023-10-13 06:06:55.062938\nsale_delay: 0\ntracking: none\ndescription_picking: NULL\ndescription_pickingout: NULL\ndescription_pickingin: NULL\nproduce_delay: 0\npurchase_method: receive\npurchase_line_warn: no-message\npurchase_line_warn_msg: NULL","metadata":{"source_type":"File","file_name":"product-db.csv","file_path":"C:\\Users\\nokol\\Desktop\\training-data\\product-db.csv","file_date":"2023-10-19T06:35:15.023Z","file_page_lines":{"from":1,"to":37}}}],["ca2d2401-0696-4dc6-b47e-51835ce5765d",{"pageContent":"id: 38\nmessage_main_attachment_id: NULL\nname: Plastic Laminate\nsequence: 1\ndescription: NULL\ndescription_purchase: NULL\ndescription_sale: NULL\ndetailed_type: product\ntype: product\ncateg_id: 8\nlist_price: 1000.00\nvolume: 0.00\nweight: 0.01\nsale_ok: True\npurchase_ok: True\nuom_id: 1\nuom_po_id: 1\ncompany_id: NULL\nactive: True\ncolor: NULL\ndefault_code: FURN_8621\ncan_image_1024_be_zoomed: False\nhas_configurable_attributes: False\npriority: 0\ncreate_uid: 1\ncreate_date: 2023-10-13 06:06:55.062938\nwrite_uid: 1\nwrite_date: 2023-10-13 06:06:55.062938\nsale_delay: 0\ntracking: none\ndescription_picking: NULL\ndescription_pickingout: NULL\ndescription_pickingin: NULL\nproduce_delay: 0\npurchase_method: receive\npurchase_line_warn: no-message\npurchase_line_warn_msg: NULL","metadata":{"source_type":"File","file_name":"product-db.csv","file_path":"C:\\Users\\nokol\\Desktop\\training-data\\product-db.csv","file_date":"2023-10-19T06:35:15.023Z","file_page_lines":{"from":1,"to":37}}}],["63b66bc6-8a5a-4181-8d2a-75078006ff09",{"pageContent":"id: 29\nmessage_main_attachment_id: NULL\nname: Table\nsequence: 1\ndescription: <p>Solid wood table.</p>\ndescription_purchase: NULL\ndescription_sale: NULL\ndetailed_type: product\ntype: product\ncateg_id: 8\nlist_price: 520.00\nvolume: 0.00\nweight: 0.01\nsale_ok: True\npurchase_ok: True\nuom_id: 1\nuom_po_id: 1\ncompany_id: NULL\nactive: True\ncolor: NULL\ndefault_code: FURN_9666\ncan_image_1024_be_zoomed: False\nhas_configurable_attributes: False\npriority: 0\ncreate_uid: 1\ncreate_date: 2023-10-13 06:06:55.062938\nwrite_uid: 1\nwrite_date: 2023-10-13 06:06:55.062938\nsale_delay: 0\ntracking: serial\ndescription_picking: NULL\ndescription_pickingout: NULL\ndescription_pickingin: NULL\nproduce_delay: 0\npurchase_method: receive\npurchase_line_warn: no-message\npurchase_line_warn_msg: NULL","metadata":{"source_type":"File","file_name":"product-db.csv","file_path":"C:\\Users\\nokol\\Desktop\\training-data\\product-db.csv","file_date":"2023-10-19T06:35:15.023Z","file_page_lines":{"from":1,"to":37}}}],["d07051a0-5c4d-4860-a11d-9e22c86843f4",{"pageContent":"id: 30\nmessage_main_attachment_id: NULL\nname: Table Top\nsequence: 1\ndescription: <p>Solid wood is a durable natural material.</p>\ndescription_purchase: NULL\ndescription_sale: NULL\ndetailed_type: product\ntype: product\ncateg_id: 8\nlist_price: 380.00\nvolume: 0.00\nweight: 0.01\nsale_ok: True\npurchase_ok: True\nuom_id: 1\nuom_po_id: 1\ncompany_id: NULL\nactive: True\ncolor: NULL\ndefault_code: FURN_8522\ncan_image_1024_be_zoomed: False\nhas_configurable_attributes: False\npriority: 0\ncreate_uid: 1\ncreate_date: 2023-10-13 06:06:55.062938\nwrite_uid: 1\nwrite_date: 2023-10-13 06:06:55.062938\nsale_delay: 0\ntracking: serial\ndescription_picking: NULL\ndescription_pickingout: NULL\ndescription_pickingin: NULL\nproduce_delay: 0\npurchase_method: receive\npurchase_line_warn: no-message\npurchase_line_warn_msg: NULL","metadata":{"source_type":"File","file_name":"product-db.csv","file_path":"C:\\Users\\nokol\\Desktop\\training-data\\product-db.csv","file_date":"2023-10-19T06:35:15.023Z","file_page_lines":{"from":1,"to":37}}}],["851a5748-d8e8-4c5b-bae8-6923ff50448a",{"pageContent":"id: 31\nmessage_main_attachment_id: NULL\nname: Table Leg\nsequence: 1\ndescription: <p>18 x 2 Square Leg</p>\ndescription_purchase: NULL\ndescription_sale: NULL\ndetailed_type: product\ntype: product\ncateg_id: 8\nlist_price: 50.00\nvolume: 0.00\nweight: 0.01\nsale_ok: True\npurchase_ok: True\nuom_id: 1\nuom_po_id: 1\ncompany_id: NULL\nactive: True\ncolor: NULL\ndefault_code: FURN_2333\ncan_image_1024_be_zoomed: False\nhas_configurable_attributes: False\npriority: 0\ncreate_uid: 1\ncreate_date: 2023-10-13 06:06:55.062938\nwrite_uid: 1\nwrite_date: 2023-10-13 06:06:55.062938\nsale_delay: 0\ntracking: lot\ndescription_picking: NULL\ndescription_pickingout: NULL\ndescription_pickingin: NULL\nproduce_delay: 0\npurchase_method: receive\npurchase_line_warn: no-message\npurchase_line_warn_msg: NULL","metadata":{"source_type":"File","file_name":"product-db.csv","file_path":"C:\\Users\\nokol\\Desktop\\training-data\\product-db.csv","file_date":"2023-10-19T06:35:15.023Z","file_page_lines":{"from":1,"to":37}}}],["ac0ab146-51b1-4ad7-8513-4f92c505b04b",{"pageContent":"id: 39\nmessage_main_attachment_id: NULL\nname: Table Kit\nsequence: 1\ndescription: <p>Table kit</p>\ndescription_purchase: NULL\ndescription_sale: NULL\ndetailed_type: consu\ntype: consu\ncateg_id: 8\nlist_price: 147.00\nvolume: 0.00\nweight: 0.01\nsale_ok: True\npurchase_ok: True\nuom_id: 1\nuom_po_id: 1\ncompany_id: NULL\nactive: True\ncolor: NULL\ndefault_code: FURN_78236\ncan_image_1024_be_zoomed: False\nhas_configurable_attributes: False\npriority: 0\ncreate_uid: 1\ncreate_date: 2023-10-13 06:06:55.062938\nwrite_uid: 1\nwrite_date: 2023-10-13 06:06:55.062938\nsale_delay: 0\ntracking: none\ndescription_picking: NULL\ndescription_pickingout: NULL\ndescription_pickingin: NULL\nproduce_delay: 0\npurchase_method: receive\npurchase_line_warn: no-message\npurchase_line_warn_msg: NULL","metadata":{"source_type":"File","file_name":"product-db.csv","file_path":"C:\\Users\\nokol\\Desktop\\training-data\\product-db.csv","file_date":"2023-10-19T06:35:15.023Z","file_page_lines":{"from":1,"to":37}}}],["1a8b6bc9-b2f5-4096-b9d9-e3f49c8086bf",{"pageContent":"id: 24\nmessage_main_attachment_id: NULL\nname: Drawer\nsequence: 1\ndescription: <p>Drawer with two routing possiblities.</p>\ndescription_purchase: NULL\ndescription_sale: NULL\ndetailed_type: product\ntype: product\ncateg_id: 8\nlist_price: 110.50\nvolume: 0.00\nweight: 0.01\nsale_ok: True\npurchase_ok: True\nuom_id: 1\nuom_po_id: 1\ncompany_id: NULL\nactive: True\ncolor: NULL\ndefault_code: FURN_8855\ncan_image_1024_be_zoomed: False\nhas_configurable_attributes: False\npriority: 0\ncreate_uid: 1\ncreate_date: 2023-10-13 06:04:09.367332\nwrite_uid: 1\nwrite_date: 2023-10-13 06:06:55.062938\nsale_delay: 0\ntracking: lot\ndescription_picking: NULL\ndescription_pickingout: NULL\ndescription_pickingin: NULL\nproduce_delay: 0\npurchase_method: receive\npurchase_line_warn: no-message\npurchase_line_warn_msg: NULL","metadata":{"source_type":"File","file_name":"product-db.csv","file_path":"C:\\Users\\nokol\\Desktop\\training-data\\product-db.csv","file_date":"2023-10-19T06:35:15.023Z","file_page_lines":{"from":1,"to":37}}}],["5af07809-3d7a-44c2-9d7d-499f668fb56a",{"pageContent":"id: 32\nmessage_main_attachment_id: NULL\nname: Bolt\nsequence: 1\ndescription: <p>Stainless steel screw full (dia5mm, Length10mm)</p>\ndescription_purchase: NULL\ndescription_sale: NULL\ndetailed_type: consu\ntype: consu\ncateg_id: 9\nlist_price: 1\nvolume: 0.00\nweight: 0.01\nsale_ok: True\npurchase_ok: True\nuom_id: 1\nuom_po_id: 1\ncompany_id: NULL\nactive: True\ncolor: NULL\ndefault_code: CONS_89957\ncan_image_1024_be_zoomed: False\nhas_configurable_attributes: False\npriority: 0\ncreate_uid: 1\ncreate_date: 2023-10-13 06:06:55.062938\nwrite_uid: 1\nwrite_date: 2023-10-13 06:06:55.062938\nsale_delay: 0\ntracking: none\ndescription_picking: NULL\ndescription_pickingout: NULL\ndescription_pickingin: NULL\nproduce_delay: 0\npurchase_method: receive\npurchase_line_warn: no-message\npurchase_line_warn_msg: NULL","metadata":{"source_type":"File","file_name":"product-db.csv","file_path":"C:\\Users\\nokol\\Desktop\\training-data\\product-db.csv","file_date":"2023-10-19T06:35:15.023Z","file_page_lines":{"from":1,"to":37}}}],["4af17710-24ad-4376-9554-3f77ab159a76",{"pageContent":"id: 21\nmessage_main_attachment_id: NULL\nname: Desk Stand with Screen\nsequence: 1\ndescription: NULL\ndescription_purchase: NULL\ndescription_sale: NULL\ndetailed_type: product\ntype: product\ncateg_id: 8\nlist_price: 2100.00\nvolume: 0.00\nweight: 0.01\nsale_ok: True\npurchase_ok: True\nuom_id: 1\nuom_po_id: 1\ncompany_id: NULL\nactive: True\ncolor: NULL\ndefault_code: FURN_7888\ncan_image_1024_be_zoomed: False\nhas_configurable_attributes: False\npriority: 0\ncreate_uid: 1\ncreate_date: 2023-10-13 06:04:09.367332\nwrite_uid: 1\nwrite_date: 2023-10-13 06:04:34.560389\nsale_delay: 0\ntracking: none\ndescription_picking: NULL\ndescription_pickingout: NULL\ndescription_pickingin: NULL\nproduce_delay: 0\npurchase_method: receive\npurchase_line_warn: no-message\npurchase_line_warn_msg: NULL","metadata":{"source_type":"File","file_name":"product-db.csv","file_path":"C:\\Users\\nokol\\Desktop\\training-data\\product-db.csv","file_date":"2023-10-19T06:35:15.023Z","file_page_lines":{"from":1,"to":37}}}],["53dc1fa8-93ad-46c3-922a-4043724e776c",{"pageContent":"id: 8\nmessage_main_attachment_id: NULL\nname: Desk Combination\nsequence: 1\ndescription: NULL\ndescription_purchase: NULL\ndescription_sale: Desk combination, black-brown: chair + desk + drawer.\ndetailed_type: product\ntype: product\ncateg_id: 8\nlist_price: 450.00\nvolume: 0.00\nweight: 0.01\nsale_ok: True\npurchase_ok: True\nuom_id: 1\nuom_po_id: 1\ncompany_id: NULL\nactive: True\ncolor: NULL\ndefault_code: FURN_7800\ncan_image_1024_be_zoomed: False\nhas_configurable_attributes: False\npriority: 0\ncreate_uid: 1\ncreate_date: 2023-10-13 06:04:09.367332\nwrite_uid: 1\nwrite_date: 2023-10-13 06:06:55.062938\nsale_delay: 0\ntracking: none\ndescription_picking: NULL\ndescription_pickingout: NULL\ndescription_pickingin: NULL\nproduce_delay: 0\npurchase_method: receive\npurchase_line_warn: no-message\npurchase_line_warn_msg: NULL","metadata":{"source_type":"File","file_name":"product-db.csv","file_path":"C:\\Users\\nokol\\Desktop\\training-data\\product-db.csv","file_date":"2023-10-19T06:35:15.023Z","file_page_lines":{"from":1,"to":37}}}],["fed72930-88fb-449d-ac32-e9b8f4c922e1",{"pageContent":"id: 15\nmessage_main_attachment_id: NULL\nname: Cabinet with Doors\nsequence: 1\ndescription: <p><br></p>\ndescription_purchase: NULL\ndescription_sale: NULL\ndetailed_type: product\ntype: product\ncateg_id: 8\nlist_price: 150.00\nvolume: 0.00\nweight: 0.01\nsale_ok: True\npurchase_ok: True\nuom_id: 1\nuom_po_id: 1\ncompany_id: NULL\nactive: True\ncolor: NULL\ndefault_code: E-COM11\ncan_image_1024_be_zoomed: False\nhas_configurable_attributes: False\npriority: 0\ncreate_uid: 1\ncreate_date: 2023-10-13 06:04:09.367332\nwrite_uid: 2\nwrite_date: 2023-10-17 09:32:19.505635\nsale_delay: 0\ntracking: none\ndescription_picking: NULL\ndescription_pickingout: NULL\ndescription_pickingin: NULL\nproduce_delay: 0\npurchase_method: receive\npurchase_line_warn: no-message\npurchase_line_warn_msg: NULL","metadata":{"source_type":"File","file_name":"product-db.csv","file_path":"C:\\Users\\nokol\\Desktop\\training-data\\product-db.csv","file_date":"2023-10-19T06:35:15.023Z","file_page_lines":{"from":1,"to":37}}}],["ca045e3d-0f23-409a-9e4c-48a457a47c33",{"pageContent":"id: 40\nmessage_main_attachment_id: NULL\nname: Drawer Black\nsequence: 1\ndescription: <p>Drawer on casters for great usability.</p>\ndescription_purchase: NULL\ndescription_sale: NULL\ndetailed_type: product\ntype: product\ncateg_id: 8\nlist_price: 24.00\nvolume: 0.00\nweight: 0.01\nsale_ok: True\npurchase_ok: True\nuom_id: 1\nuom_po_id: 1\ncompany_id: NULL\nactive: True\ncolor: NULL\ndefault_code: FURN_2100\ncan_image_1024_be_zoomed: False\nhas_configurable_attributes: False\npriority: 0\ncreate_uid: 1\ncreate_date: 2023-10-13 06:06:55.062938\nwrite_uid: 1\nwrite_date: 2023-10-13 06:06:55.062938\nsale_delay: 0\ntracking: lot\ndescription_picking: NULL\ndescription_pickingout: NULL\ndescription_pickingin: NULL\nproduce_delay: 0\npurchase_method: receive\npurchase_line_warn: no-message\npurchase_line_warn_msg: NULL","metadata":{"source_type":"File","file_name":"product-db.csv","file_path":"C:\\Users\\nokol\\Desktop\\training-data\\product-db.csv","file_date":"2023-10-19T06:35:15.023Z","file_page_lines":{"from":1,"to":37}}}],["798ee349-2c52-4279-8c8c-79029acca0ed",{"pageContent":"id: 41\nmessage_main_attachment_id: NULL\nname: Drawer Case Black\nsequence: 1\ndescription: NULL\ndescription_purchase: NULL\ndescription_sale: NULL\ndetailed_type: product\ntype: product\ncateg_id: 8\nlist_price: 20.00\nvolume: 0.00\nweight: 0.01\nsale_ok: True\npurchase_ok: True\nuom_id: 1\nuom_po_id: 1\ncompany_id: NULL\nactive: True\ncolor: NULL\ndefault_code: FURN_5623\ncan_image_1024_be_zoomed: False\nhas_configurable_attributes: False\npriority: 0\ncreate_uid: 1\ncreate_date: 2023-10-13 06:06:55.062938\nwrite_uid: 1\nwrite_date: 2023-10-13 06:06:55.062938\nsale_delay: 0\ntracking: lot\ndescription_picking: NULL\ndescription_pickingout: NULL\ndescription_pickingin: NULL\nproduce_delay: 0\npurchase_method: receive\npurchase_line_warn: no-message\npurchase_line_warn_msg: NULL","metadata":{"source_type":"File","file_name":"product-db.csv","file_path":"C:\\Users\\nokol\\Desktop\\training-data\\product-db.csv","file_date":"2023-10-19T06:35:15.023Z","file_page_lines":{"from":1,"to":37}}}],["2a2155b7-926a-45cf-85c8-b7d30368b558",{"pageContent":"id: 18\nmessage_main_attachment_id: NULL\nname: Corner Desk Left Sit\nsequence: 1\ndescription: NULL\ndescription_purchase: NULL\ndescription_sale: NULL\ndetailed_type: product\ntype: product\ncateg_id: 8\nlist_price: 85.00\nvolume: 0.00\nweight: 0.01\nsale_ok: True\npurchase_ok: True\nuom_id: 1\nuom_po_id: 1\ncompany_id: NULL\nactive: True\ncolor: NULL\ndefault_code: FURN_1118\ncan_image_1024_be_zoomed: False\nhas_configurable_attributes: False\npriority: 0\ncreate_uid: 1\ncreate_date: 2023-10-13 06:04:09.367332\nwrite_uid: 1\nwrite_date: 2023-10-17 10:11:24.404237\nsale_delay: 0\ntracking: none\ndescription_picking: NULL\ndescription_pickingout: NULL\ndescription_pickingin: NULL\nproduce_delay: 0\npurchase_method: receive\npurchase_line_warn: no-message\npurchase_line_warn_msg: NULL","metadata":{"source_type":"File","file_name":"product-db.csv","file_path":"C:\\Users\\nokol\\Desktop\\training-data\\product-db.csv","file_date":"2023-10-19T06:35:15.023Z","file_page_lines":{"from":1,"to":37}}}],["046dfeee-2625-4d83-a2ee-9010c1b5d95a",{"pageContent":"id: 19\nmessage_main_attachment_id: NULL\nname: Drawer Black\nsequence: 1\ndescription: NULL\ndescription_purchase: NULL\ndescription_sale: NULL\ndetailed_type: product\ntype: product\ncateg_id: 8\nlist_price: 25.00\nvolume: 0.00\nweight: 0.01\nsale_ok: True\npurchase_ok: True\nuom_id: 1\nuom_po_id: 1\ncompany_id: NULL\nactive: True\ncolor: NULL\ndefault_code: FURN_8900\ncan_image_1024_be_zoomed: False\nhas_configurable_attributes: False\npriority: 0\ncreate_uid: 1\ncreate_date: 2023-10-13 06:04:09.367332\nwrite_uid: 1\nwrite_date: 2023-10-17 10:11:24.404237\nsale_delay: 0\ntracking: none\ndescription_picking: NULL\ndescription_pickingout: NULL\ndescription_pickingin: NULL\nproduce_delay: 0\npurchase_method: receive\npurchase_line_warn: no-message\npurchase_line_warn_msg: NULL","metadata":{"source_type":"File","file_name":"product-db.csv","file_path":"C:\\Users\\nokol\\Desktop\\training-data\\product-db.csv","file_date":"2023-10-19T06:35:15.023Z","file_page_lines":{"from":1,"to":37}}}],["b5070662-f6b5-4502-83f6-91584af34a69",{"pageContent":"id: 20\nmessage_main_attachment_id: NULL\nname: Flipover\nsequence: 1\ndescription: NULL\ndescription_purchase: NULL\ndescription_sale: NULL\ndetailed_type: product\ntype: product\ncateg_id: 8\nlist_price: 1950.00\nvolume: 0.00\nweight: 0.01\nsale_ok: True\npurchase_ok: True\nuom_id: 1\nuom_po_id: 1\ncompany_id: NULL\nactive: True\ncolor: NULL\ndefault_code: FURN_9001\ncan_image_1024_be_zoomed: False\nhas_configurable_attributes: False\npriority: 0\ncreate_uid: 1\ncreate_date: 2023-10-13 06:04:09.367332\nwrite_uid: 1\nwrite_date: 2023-10-17 10:11:24.404237\nsale_delay: 0\ntracking: none\ndescription_picking: NULL\ndescription_pickingout: NULL\ndescription_pickingin: NULL\nproduce_delay: 0\npurchase_method: receive\npurchase_line_warn: no-message\npurchase_line_warn_msg: NULL","metadata":{"source_type":"File","file_name":"product-db.csv","file_path":"C:\\Users\\nokol\\Desktop\\training-data\\product-db.csv","file_date":"2023-10-19T06:35:15.023Z","file_page_lines":{"from":1,"to":37}}}],["b6a6826c-8d03-4a1e-a98f-ebc8dccd117b",{"pageContent":"id: 23\nmessage_main_attachment_id: NULL\nname: Acoustic Bloc Screens\nsequence: 1\ndescription: <p><br></p>\ndescription_purchase: NULL\ndescription_sale: NULL\ndetailed_type: product\ntype: product\ncateg_id: 8\nlist_price: 295.00\nvolume: 1.00\nweight: 100.01\nsale_ok: True\npurchase_ok: True\nuom_id: 1\nuom_po_id: 1\ncompany_id: NULL\nactive: True\ncolor: NULL\ndefault_code: B-3025-078\ncan_image_1024_be_zoomed: False\nhas_configurable_attributes: False\npriority: 0\ncreate_uid: 1\ncreate_date: 2023-10-13 06:04:09.367332\nwrite_uid: 2\nwrite_date: 2023-10-17 13:06:02.366512\nsale_delay: 5\ntracking: none\ndescription_picking: NULL\ndescription_pickingout: NULL\ndescription_pickingin: NULL\nproduce_delay: 2\npurchase_method: receive\npurchase_line_warn: no-message\npurchase_line_warn_msg: NULL","metadata":{"source_type":"File","file_name":"product-db.csv","file_path":"C:\\Users\\nokol\\Desktop\\training-data\\product-db.csv","file_date":"2023-10-19T06:35:15.023Z","file_page_lines":{"from":1,"to":37}}}],["a4ec9b5e-766b-40dc-9635-152a802b1fcf",{"pageContent":"Mein name ist dominic","metadata":{"source_type":"File","file_name":"Mein name ist d.txt","file_path":"?","file_date":"2023-11-11T14:04:33.718Z","file_page_lines":{"from":1,"to":1}}}],["73754ecd-4a71-4368-a239-9422b7d02e69",{"pageContent":"C:Users\nokolDesktopwrong-mail.txt","metadata":{"source_type":"File","file_name":"C:Users\nokolDesktopwrong-mail.txt","file_path":"","file_date":"2023-11-11T14:11:49.882Z","file_page_lines":{"from":1,"to":2}}}],["49f8a5d3-fe21-4f99-bccf-c09ea80456f3",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Introduction\n\n**LangChain** is a framework for developing applications powered by language models. It enables applications that:\n\n* **Are context-aware**: connect a language model to sources of context (prompt instructions, few shot examples, content to ground its response in, etc.)\n* **Reason**: rely on a language model to reason (about how to answer based on provided context, what actions to take, etc.)\n\nThis framework consists of several parts.\n\n![LangChain Diagram](/assets/images/langchain_stack-7568bff0848b6ff94a66aff96d074da5.svg)\n\nTogether, these products simplify the entire application lifecycle:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs","loc":{"lines":{"from":1,"to":19}}}}],["de995f74-1d1c-41b1-8585-85b5abf8fa7e",{"pageContent":"* **Develop**: Write your applications in LangChain/LangChain.js. Hit the ground running using Templates for reference.\n* **Productionize**: Use LangSmith to inspect, test and monitor your chains, so that you can constantly improve and deploy with confidence.\n* **Deploy**: Turn any chain into an API with LangServe.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs","loc":{"lines":{"from":21,"to":23}}}}],["49c030e8-c054-40e0-b0a5-e9cbb9e44e89",{"pageContent":"## LangChain Libraries[​](#langchain-libraries \"Direct link to LangChain Libraries\")\n\nThe main value props of the LangChain packages are:\n\n1. **Components**: composable tools and integrations for working with language models. Components are modular and easy-to-use, whether you are using the rest of the LangChain framework or not\n2. **Off-the-shelf chains**: built-in assemblages of components for accomplishing higher-level tasks\n\nOff-the-shelf chains make it easy to get started. Components make it easy to customize existing chains and build new ones.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs","loc":{"lines":{"from":25,"to":32}}}}],["4c83def4-c945-4c67-b9ab-878b43879c4c",{"pageContent":"## Get started[​](#get-started \"Direct link to Get started\")\n\n[Here's](/docs/get_started/installation) how to install LangChain, set up your environment, and start building.\n\nWe recommend following our [Quickstart](/docs/get_started/quickstart) guide to familiarize yourself with the framework by building your first LangChain application.\n\nRead up on our [Security](/docs/security) best practices to make sure you're developing safely with LangChain.\n\nnote\n\nThese docs focus on the JS/TS LangChain library. [Head here](https://python.langchain.com) for docs on the Python LangChain library.\n\n## LangChain Expression Language (LCEL)[​](#langchain-expression-language-lcel \"Direct link to LangChain Expression Language (LCEL)\")\n\nLCEL is a declarative way to compose chains. LCEL was designed from day 1 to support putting prototypes in production, with no code changes, from the simplest “prompt + LLM” chain to the most complex chains.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs","loc":{"lines":{"from":34,"to":48}}}}],["116a80fc-19c7-4f5b-a54e-66e87667c8ef",{"pageContent":"## Modules[​](#modules \"Direct link to Modules\")\n\nLangChain provides standard, extendable interfaces and integrations for the following modules:\n\n#### [Model I/O](/docs/modules/model_io/)[​](#model-io \"Direct link to model-io\")\n\nInterface with language models\n\n#### [Retrieval](/docs/modules/data_connection/)[​](#retrieval \"Direct link to retrieval\")\n\nInterface with application-specific data\n\n#### [Agents](/docs/modules/agents/)[​](#agents \"Direct link to agents\")\n\nLet models choose which tools to use given high-level directives\n\n## Examples, ecosystem, and resources[​](#examples-ecosystem-and-resources \"Direct link to Examples, ecosystem, and resources\")\n\n### [Use cases](/docs/use_cases/)[​](#use-cases \"Direct link to use-cases\")\n\nWalkthroughs and techniques for common end-to-end use cases, like:\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs","loc":{"lines":{"from":50,"to":72}}}}],["2e5a1f03-2013-435e-8d24-3e347c844002",{"pageContent":"### [Integrations](/docs/integrations/platforms/)[​](#integrations \"Direct link to integrations\")\n\nLangChain is part of a rich ecosystem of tools that integrate with our framework and build on top of it. Check out our growing list of [integrations](/docs/integrations/platforms/).\n\n### [API reference](https://api.js.langchain.com)[​](#api-reference \"Direct link to api-reference\")\n\nHead to the reference section for full documentation of all classes and methods in the LangChain and LangChain Experimental packages.\n\n### [Developer's guide](/docs/contributing)[​](#developers-guide \"Direct link to developers-guide\")\n\nCheck out the developer's guide for guidelines on contributing and help getting your dev environment set up.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs","loc":{"lines":{"from":72,"to":84}}}}],["d266be62-c529-4ece-9944-7c14a26a4884",{"pageContent":"### [Community](/docs/community)[​](#community \"Direct link to community\")\n\nHead to the [Community navigator](/docs/community) to find places to ask questions, share feedback, meet other developers, and dream about the future of LLM's.[Previous\n\nGet started](/docs/get_started)[Next\n\nInstallation](/docs/get_started/installation)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs","loc":{"lines":{"from":84,"to":97}}}}],["96b46ffc-1c63-46a9-9cd9-30f5653932e9",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Introduction\n\n**LangChain** is a framework for developing applications powered by language models. It enables applications that:\n\n* **Are context-aware**: connect a language model to sources of context (prompt instructions, few shot examples, content to ground its response in, etc.)\n* **Reason**: rely on a language model to reason (about how to answer based on provided context, what actions to take, etc.)\n\nThis framework consists of several parts.\n\n![LangChain Diagram](/assets/images/langchain_stack-7568bff0848b6ff94a66aff96d074da5.svg)\n\nTogether, these products simplify the entire application lifecycle:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/introduction/#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":1,"to":19}}}}],["f74af0e8-4eda-4db7-99c6-e459a1324452",{"pageContent":"* **Develop**: Write your applications in LangChain/LangChain.js. Hit the ground running using Templates for reference.\n* **Productionize**: Use LangSmith to inspect, test and monitor your chains, so that you can constantly improve and deploy with confidence.\n* **Deploy**: Turn any chain into an API with LangServe.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/introduction/#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":21,"to":23}}}}],["c454ecfc-5901-49f6-ae84-6f575893cc18",{"pageContent":"## LangChain Libraries[​](#langchain-libraries \"Direct link to LangChain Libraries\")\n\nThe main value props of the LangChain packages are:\n\n1. **Components**: composable tools and integrations for working with language models. Components are modular and easy-to-use, whether you are using the rest of the LangChain framework or not\n2. **Off-the-shelf chains**: built-in assemblages of components for accomplishing higher-level tasks\n\nOff-the-shelf chains make it easy to get started. Components make it easy to customize existing chains and build new ones.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/introduction/#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":25,"to":32}}}}],["21d77bed-9c82-4f5b-b3e0-aa6a455d4eb3",{"pageContent":"## Get started[​](#get-started \"Direct link to Get started\")\n\n[Here's](/docs/get_started/installation) how to install LangChain, set up your environment, and start building.\n\nWe recommend following our [Quickstart](/docs/get_started/quickstart) guide to familiarize yourself with the framework by building your first LangChain application.\n\nRead up on our [Security](/docs/security) best practices to make sure you're developing safely with LangChain.\n\nnote\n\nThese docs focus on the JS/TS LangChain library. [Head here](https://python.langchain.com) for docs on the Python LangChain library.\n\n## LangChain Expression Language (LCEL)[​](#langchain-expression-language-lcel \"Direct link to LangChain Expression Language (LCEL)\")\n\nLCEL is a declarative way to compose chains. LCEL was designed from day 1 to support putting prototypes in production, with no code changes, from the simplest “prompt + LLM” chain to the most complex chains.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/introduction/#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":34,"to":48}}}}],["68ab66c8-0d88-4d4c-8ed0-8f9b5156a3d1",{"pageContent":"## Modules[​](#modules \"Direct link to Modules\")\n\nLangChain provides standard, extendable interfaces and integrations for the following modules:\n\n#### [Model I/O](/docs/modules/model_io/)[​](#model-io \"Direct link to model-io\")\n\nInterface with language models\n\n#### [Retrieval](/docs/modules/data_connection/)[​](#retrieval \"Direct link to retrieval\")\n\nInterface with application-specific data\n\n#### [Agents](/docs/modules/agents/)[​](#agents \"Direct link to agents\")\n\nLet models choose which tools to use given high-level directives\n\n## Examples, ecosystem, and resources[​](#examples-ecosystem-and-resources \"Direct link to Examples, ecosystem, and resources\")\n\n### [Use cases](/docs/use_cases/)[​](#use-cases \"Direct link to use-cases\")\n\nWalkthroughs and techniques for common end-to-end use cases, like:\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/introduction/#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":50,"to":72}}}}],["3bf20992-c8ec-4021-ab7e-219da468d3fe",{"pageContent":"### [Integrations](/docs/integrations/platforms/)[​](#integrations \"Direct link to integrations\")\n\nLangChain is part of a rich ecosystem of tools that integrate with our framework and build on top of it. Check out our growing list of [integrations](/docs/integrations/platforms/).\n\n### [API reference](https://api.js.langchain.com)[​](#api-reference \"Direct link to api-reference\")\n\nHead to the reference section for full documentation of all classes and methods in the LangChain and LangChain Experimental packages.\n\n### [Developer's guide](/docs/contributing)[​](#developers-guide \"Direct link to developers-guide\")\n\nCheck out the developer's guide for guidelines on contributing and help getting your dev environment set up.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/introduction/#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":72,"to":84}}}}],["9080172b-5d49-4f2e-87b0-94a1df7314c8",{"pageContent":"### [Community](/docs/community)[​](#community \"Direct link to community\")\n\nHead to the [Community navigator](/docs/community) to find places to ask questions, share feedback, meet other developers, and dream about the future of LLM's.[Previous\n\nGet started](/docs/get_started)[Next\n\nInstallation](/docs/get_started/installation)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/introduction/#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":84,"to":97}}}}],["58b27a3c-e989-4a69-82ec-1ccc250de747",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Introduction\n\n**LangChain** is a framework for developing applications powered by language models. It enables applications that:\n\n* **Are context-aware**: connect a language model to sources of context (prompt instructions, few shot examples, content to ground its response in, etc.)\n* **Reason**: rely on a language model to reason (about how to answer based on provided context, what actions to take, etc.)\n\nThis framework consists of several parts.\n\n![LangChain Diagram](/assets/images/langchain_stack-7568bff0848b6ff94a66aff96d074da5.svg)\n\nTogether, these products simplify the entire application lifecycle:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/introduction","loc":{"lines":{"from":1,"to":19}}}}],["8bd16cee-3c86-4d5f-90b6-a4d7d5b40784",{"pageContent":"* **Develop**: Write your applications in LangChain/LangChain.js. Hit the ground running using Templates for reference.\n* **Productionize**: Use LangSmith to inspect, test and monitor your chains, so that you can constantly improve and deploy with confidence.\n* **Deploy**: Turn any chain into an API with LangServe.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/introduction","loc":{"lines":{"from":21,"to":23}}}}],["21998858-f271-4f29-82f9-0acbf95c5925",{"pageContent":"## LangChain Libraries[​](#langchain-libraries \"Direct link to LangChain Libraries\")\n\nThe main value props of the LangChain packages are:\n\n1. **Components**: composable tools and integrations for working with language models. Components are modular and easy-to-use, whether you are using the rest of the LangChain framework or not\n2. **Off-the-shelf chains**: built-in assemblages of components for accomplishing higher-level tasks\n\nOff-the-shelf chains make it easy to get started. Components make it easy to customize existing chains and build new ones.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/introduction","loc":{"lines":{"from":25,"to":32}}}}],["ed0986a9-7659-4dd1-a5e0-050f6c983d24",{"pageContent":"## Get started[​](#get-started \"Direct link to Get started\")\n\n[Here's](/docs/get_started/installation) how to install LangChain, set up your environment, and start building.\n\nWe recommend following our [Quickstart](/docs/get_started/quickstart) guide to familiarize yourself with the framework by building your first LangChain application.\n\nRead up on our [Security](/docs/security) best practices to make sure you're developing safely with LangChain.\n\nnote\n\nThese docs focus on the JS/TS LangChain library. [Head here](https://python.langchain.com) for docs on the Python LangChain library.\n\n## LangChain Expression Language (LCEL)[​](#langchain-expression-language-lcel \"Direct link to LangChain Expression Language (LCEL)\")\n\nLCEL is a declarative way to compose chains. LCEL was designed from day 1 to support putting prototypes in production, with no code changes, from the simplest “prompt + LLM” chain to the most complex chains.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/introduction","loc":{"lines":{"from":34,"to":48}}}}],["052e10f8-f749-4d59-af8c-83dedb13127b",{"pageContent":"## Modules[​](#modules \"Direct link to Modules\")\n\nLangChain provides standard, extendable interfaces and integrations for the following modules:\n\n#### [Model I/O](/docs/modules/model_io/)[​](#model-io \"Direct link to model-io\")\n\nInterface with language models\n\n#### [Retrieval](/docs/modules/data_connection/)[​](#retrieval \"Direct link to retrieval\")\n\nInterface with application-specific data\n\n#### [Agents](/docs/modules/agents/)[​](#agents \"Direct link to agents\")\n\nLet models choose which tools to use given high-level directives\n\n## Examples, ecosystem, and resources[​](#examples-ecosystem-and-resources \"Direct link to Examples, ecosystem, and resources\")\n\n### [Use cases](/docs/use_cases/)[​](#use-cases \"Direct link to use-cases\")\n\nWalkthroughs and techniques for common end-to-end use cases, like:\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/introduction","loc":{"lines":{"from":50,"to":72}}}}],["a7f88635-1117-432f-983b-f14435fbd57a",{"pageContent":"### [Integrations](/docs/integrations/platforms/)[​](#integrations \"Direct link to integrations\")\n\nLangChain is part of a rich ecosystem of tools that integrate with our framework and build on top of it. Check out our growing list of [integrations](/docs/integrations/platforms/).\n\n### [API reference](https://api.js.langchain.com)[​](#api-reference \"Direct link to api-reference\")\n\nHead to the reference section for full documentation of all classes and methods in the LangChain and LangChain Experimental packages.\n\n### [Developer's guide](/docs/contributing)[​](#developers-guide \"Direct link to developers-guide\")\n\nCheck out the developer's guide for guidelines on contributing and help getting your dev environment set up.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/introduction","loc":{"lines":{"from":72,"to":84}}}}],["b9304cc4-850b-4b59-84be-b712756e9251",{"pageContent":"### [Community](/docs/community)[​](#community \"Direct link to community\")\n\nHead to the [Community navigator](/docs/community) to find places to ask questions, share feedback, meet other developers, and dream about the future of LLM's.[Previous\n\nGet started](/docs/get_started)[Next\n\nInstallation](/docs/get_started/installation)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/introduction","loc":{"lines":{"from":84,"to":97}}}}],["420209c5-c7b6-4aa3-80f8-4fa6bc3e86ee",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Introduction\n\n**LangChain** is a framework for developing applications powered by language models. It enables applications that:\n\n* **Are context-aware**: connect a language model to sources of context (prompt instructions, few shot examples, content to ground its response in, etc.)\n* **Reason**: rely on a language model to reason (about how to answer based on provided context, what actions to take, etc.)\n\nThis framework consists of several parts.\n\n![LangChain Diagram](/assets/images/langchain_stack-7568bff0848b6ff94a66aff96d074da5.svg)\n\nTogether, these products simplify the entire application lifecycle:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/introduction#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":1,"to":19}}}}],["ee5c7d81-ad1b-4e97-b9a5-382e4d3ed7fd",{"pageContent":"* **Develop**: Write your applications in LangChain/LangChain.js. Hit the ground running using Templates for reference.\n* **Productionize**: Use LangSmith to inspect, test and monitor your chains, so that you can constantly improve and deploy with confidence.\n* **Deploy**: Turn any chain into an API with LangServe.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/introduction#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":21,"to":23}}}}],["c4f59d0e-98b7-4395-9c95-f258eb8241bd",{"pageContent":"## LangChain Libraries[​](#langchain-libraries \"Direct link to LangChain Libraries\")\n\nThe main value props of the LangChain packages are:\n\n1. **Components**: composable tools and integrations for working with language models. Components are modular and easy-to-use, whether you are using the rest of the LangChain framework or not\n2. **Off-the-shelf chains**: built-in assemblages of components for accomplishing higher-level tasks\n\nOff-the-shelf chains make it easy to get started. Components make it easy to customize existing chains and build new ones.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/introduction#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":25,"to":32}}}}],["85761ea1-fa58-4748-973d-087d2c040b93",{"pageContent":"## Get started[​](#get-started \"Direct link to Get started\")\n\n[Here's](/docs/get_started/installation) how to install LangChain, set up your environment, and start building.\n\nWe recommend following our [Quickstart](/docs/get_started/quickstart) guide to familiarize yourself with the framework by building your first LangChain application.\n\nRead up on our [Security](/docs/security) best practices to make sure you're developing safely with LangChain.\n\nnote\n\nThese docs focus on the JS/TS LangChain library. [Head here](https://python.langchain.com) for docs on the Python LangChain library.\n\n## LangChain Expression Language (LCEL)[​](#langchain-expression-language-lcel \"Direct link to LangChain Expression Language (LCEL)\")\n\nLCEL is a declarative way to compose chains. LCEL was designed from day 1 to support putting prototypes in production, with no code changes, from the simplest “prompt + LLM” chain to the most complex chains.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/introduction#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":34,"to":48}}}}],["1b0fac9a-da21-49b3-9486-d777ebf78923",{"pageContent":"## Modules[​](#modules \"Direct link to Modules\")\n\nLangChain provides standard, extendable interfaces and integrations for the following modules:\n\n#### [Model I/O](/docs/modules/model_io/)[​](#model-io \"Direct link to model-io\")\n\nInterface with language models\n\n#### [Retrieval](/docs/modules/data_connection/)[​](#retrieval \"Direct link to retrieval\")\n\nInterface with application-specific data\n\n#### [Agents](/docs/modules/agents/)[​](#agents \"Direct link to agents\")\n\nLet models choose which tools to use given high-level directives\n\n## Examples, ecosystem, and resources[​](#examples-ecosystem-and-resources \"Direct link to Examples, ecosystem, and resources\")\n\n### [Use cases](/docs/use_cases/)[​](#use-cases \"Direct link to use-cases\")\n\nWalkthroughs and techniques for common end-to-end use cases, like:\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/introduction#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":50,"to":72}}}}],["7620702a-4d79-458c-b53f-483e8090dbfa",{"pageContent":"### [Integrations](/docs/integrations/platforms/)[​](#integrations \"Direct link to integrations\")\n\nLangChain is part of a rich ecosystem of tools that integrate with our framework and build on top of it. Check out our growing list of [integrations](/docs/integrations/platforms/).\n\n### [API reference](https://api.js.langchain.com)[​](#api-reference \"Direct link to api-reference\")\n\nHead to the reference section for full documentation of all classes and methods in the LangChain and LangChain Experimental packages.\n\n### [Developer's guide](/docs/contributing)[​](#developers-guide \"Direct link to developers-guide\")\n\nCheck out the developer's guide for guidelines on contributing and help getting your dev environment set up.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/introduction#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":72,"to":84}}}}],["3789562b-5673-48d4-a7d5-9edd9fd91aac",{"pageContent":"### [Community](/docs/community)[​](#community \"Direct link to community\")\n\nHead to the [Community navigator](/docs/community) to find places to ask questions, share feedback, meet other developers, and dream about the future of LLM's.[Previous\n\nGet started](/docs/get_started)[Next\n\nInstallation](/docs/get_started/installation)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/introduction#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":84,"to":97}}}}],["d69f6ffd-17a3-4029-a4f0-c7f286969f35",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n[## 🗃️ QA and Chat over Documents\n\n3 items](/docs/use_cases/question_answering/)[## 🗃️ Retrieval-augmented generation (RAG)\n\n1 items](/docs/use_cases/rag/code_understanding)[## 📄️ Tabular Question Answering\n\nLots of data and information is stored in tabular data, whether it be csvs, excel sheets, or SQL tables.](/docs/use_cases/tabular)[## 📄️ Interacting with APIs\n\nLots of data and information is stored behind APIs.](/docs/use_cases/api)[## 📄️ Summarization\n\nA common use case is wanting to summarize long documents.](/docs/use_cases/summarization)[## 🗃️ Agent Simulations\n\n2 items](/docs/use_cases/agent_simulations/)[## 🗃️ Autonomous Agents\n\n3 items](/docs/use_cases/autonomous_agents/)[","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/use_cases","loc":{"lines":{"from":1,"to":22}}}}],["5dfaf54a-f808-438d-ad33-90ee0d6ac257",{"pageContent":"## 📄️ Chatbots\n\nLanguage models are good at producing text, which makes them ideal for creating chatbots.](/docs/use_cases/chatbots)[## 📄️ Extraction\n\nMost APIs and databases still deal with structured information. Therefore, in order to better work with those, it can be useful to extract structured information from text. Examples of this include:](/docs/use_cases/extraction)[Next\n\nQA and Chat over Documents](/docs/use_cases/question_answering/)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/use_cases","loc":{"lines":{"from":22,"to":35}}}}],["6b6c3707-40c7-4a42-b1b0-af6b8341486d",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n[## 🗃️ QA and Chat over Documents\n\n3 items](/docs/use_cases/question_answering/)[## 🗃️ Retrieval-augmented generation (RAG)\n\n1 items](/docs/use_cases/rag/code_understanding)[## 📄️ Tabular Question Answering\n\nLots of data and information is stored in tabular data, whether it be csvs, excel sheets, or SQL tables.](/docs/use_cases/tabular)[## 📄️ Interacting with APIs\n\nLots of data and information is stored behind APIs.](/docs/use_cases/api)[## 📄️ Summarization\n\nA common use case is wanting to summarize long documents.](/docs/use_cases/summarization)[## 🗃️ Agent Simulations\n\n2 items](/docs/use_cases/agent_simulations/)[## 🗃️ Autonomous Agents\n\n3 items](/docs/use_cases/autonomous_agents/)[","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/use_cases#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":1,"to":22}}}}],["e72e7eaa-9d3a-4660-a939-8e61780c0d73",{"pageContent":"## 📄️ Chatbots\n\nLanguage models are good at producing text, which makes them ideal for creating chatbots.](/docs/use_cases/chatbots)[## 📄️ Extraction\n\nMost APIs and databases still deal with structured information. Therefore, in order to better work with those, it can be useful to extract structured information from text. Examples of this include:](/docs/use_cases/extraction)[Next\n\nQA and Chat over Documents](/docs/use_cases/question_answering/)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/use_cases#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":22,"to":35}}}}],["12c30d7b-6ac3-4e7c-953c-d2ecca51aaac",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n[## 📄️ Anthropic\n\nAll functionality related to Anthropic models.](/docs/integrations/platforms/anthropic)[## 📄️ AWS\n\nAll functionality related to Amazon AWS platform](/docs/integrations/platforms/aws)[## 📄️ Google\n\nAll functionality related to Google Cloud Platform](/docs/integrations/platforms/google)[## 📄️ Microsoft\n\nAll functionality related to Microsoft Azure and other Microsoft products.](/docs/integrations/platforms/microsoft)[## 📄️ OpenAI\n\nAll functionality related to OpenAI](/docs/integrations/platforms/openai)[Next\n\nAnthropic](/docs/integrations/platforms/anthropic)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/integrations/platforms","loc":{"lines":{"from":1,"to":27}}}}],["427b246f-ceae-4a7d-86a9-2ed9eb75f2cf",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n[## 📄️ Anthropic\n\nAll functionality related to Anthropic models.](/docs/integrations/platforms/anthropic)[## 📄️ AWS\n\nAll functionality related to Amazon AWS platform](/docs/integrations/platforms/aws)[## 📄️ Google\n\nAll functionality related to Google Cloud Platform](/docs/integrations/platforms/google)[## 📄️ Microsoft\n\nAll functionality related to Microsoft Azure and other Microsoft products.](/docs/integrations/platforms/microsoft)[## 📄️ OpenAI\n\nAll functionality related to OpenAI](/docs/integrations/platforms/openai)[Next\n\nAnthropic](/docs/integrations/platforms/anthropic)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/integrations/platforms#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":1,"to":27}}}}],["d4908ffd-83ae-4c56-a3b1-00b2982844a8",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n[## 📄️ Anthropic\n\nAll functionality related to Anthropic models.](/docs/integrations/platforms/anthropic)[## 📄️ AWS\n\nAll functionality related to Amazon AWS platform](/docs/integrations/platforms/aws)[## 📄️ Google\n\nAll functionality related to Google Cloud Platform](/docs/integrations/platforms/google)[## 📄️ Microsoft\n\nAll functionality related to Microsoft Azure and other Microsoft products.](/docs/integrations/platforms/microsoft)[## 📄️ OpenAI\n\nAll functionality related to OpenAI](/docs/integrations/platforms/openai)[Next\n\nAnthropic](/docs/integrations/platforms/anthropic)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/integrations/platforms#","loc":{"lines":{"from":1,"to":27}}}}],["4c833efc-c7fe-4cc2-84da-1c4d094c6455",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Community navigator\n\nHi! Thanks for being here. We’re lucky to have a community of so many passionate developers building with LangChain–we have so much to teach and learn from each other. Community members contribute code, host meetups, write blog posts, amplify each other’s work, become each other's customers and collaborators, and so much more.\n\nWhether you’re new to LangChain, looking to go deeper, or just want to get more exposure to the world of building with LLMs, this page can point you in the right direction.\n\n* **🦜 Contribute to LangChain**\n\n* **🌍 Meetups, Events, and Hackathons**\n\n* **📣 Help Us Amplify Your Work**\n\n* **💬 Stay in the loop**\n\n# 🦜 Contribute to LangChain","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/community","loc":{"lines":{"from":1,"to":22}}}}],["3759d937-7b24-4f2e-b17e-548771e7fc30",{"pageContent":"# 🦜 Contribute to LangChain\n\nLangChain is the product of over 5,000+ contributions by 1,500+ contributors, and there is **still** so much to do together. Here are some ways to get involved:\n\n# 🌍 Meetups, Events, and Hackathons\n\nOne of our favorite things about working in AI is how much enthusiasm there is for building together. We want to help make that as easy and impactful for you as possible!\n\n# 📣 Help Us Amplify Your Work\n\nIf you’re working on something you’re proud of, and think the LangChain community would benefit from knowing about it, we want to help you show it off.\n\n# ☀️ Stay in the loop\n\nHere’s where our team hangs out, talks shop, spotlights cool work, and shares what we’re up to. We’d love to see you there too.\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/community","loc":{"lines":{"from":22,"to":43}}}}],["a70b4137-283c-4999-9f92-05823f9b4448",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Community navigator\n\nHi! Thanks for being here. We’re lucky to have a community of so many passionate developers building with LangChain–we have so much to teach and learn from each other. Community members contribute code, host meetups, write blog posts, amplify each other’s work, become each other's customers and collaborators, and so much more.\n\nWhether you’re new to LangChain, looking to go deeper, or just want to get more exposure to the world of building with LLMs, this page can point you in the right direction.\n\n* **🦜 Contribute to LangChain**\n\n* **🌍 Meetups, Events, and Hackathons**\n\n* **📣 Help Us Amplify Your Work**\n\n* **💬 Stay in the loop**\n\n# 🦜 Contribute to LangChain","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/community#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":1,"to":22}}}}],["52f76b5a-c883-433d-ab43-458887966af2",{"pageContent":"# 🦜 Contribute to LangChain\n\nLangChain is the product of over 5,000+ contributions by 1,500+ contributors, and there is **still** so much to do together. Here are some ways to get involved:\n\n# 🌍 Meetups, Events, and Hackathons\n\nOne of our favorite things about working in AI is how much enthusiasm there is for building together. We want to help make that as easy and impactful for you as possible!\n\n# 📣 Help Us Amplify Your Work\n\nIf you’re working on something you’re proud of, and think the LangChain community would benefit from knowing about it, we want to help you show it off.\n\n# ☀️ Stay in the loop\n\nHere’s where our team hangs out, talks shop, spotlights cool work, and shares what we’re up to. We’d love to see you there too.\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/community#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":22,"to":43}}}}],["5ac72be6-975a-4b9a-892d-dd37fd6ed2e9",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Community navigator\n\nHi! Thanks for being here. We’re lucky to have a community of so many passionate developers building with LangChain–we have so much to teach and learn from each other. Community members contribute code, host meetups, write blog posts, amplify each other’s work, become each other's customers and collaborators, and so much more.\n\nWhether you’re new to LangChain, looking to go deeper, or just want to get more exposure to the world of building with LLMs, this page can point you in the right direction.\n\n* **🦜 Contribute to LangChain**\n\n* **🌍 Meetups, Events, and Hackathons**\n\n* **📣 Help Us Amplify Your Work**\n\n* **💬 Stay in the loop**\n\n# 🦜 Contribute to LangChain","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/community#","loc":{"lines":{"from":1,"to":22}}}}],["ef08fb9e-cde5-4dc2-8c4e-a589a4b5b98f",{"pageContent":"# 🦜 Contribute to LangChain\n\nLangChain is the product of over 5,000+ contributions by 1,500+ contributors, and there is **still** so much to do together. Here are some ways to get involved:\n\n# 🌍 Meetups, Events, and Hackathons\n\nOne of our favorite things about working in AI is how much enthusiasm there is for building together. We want to help make that as easy and impactful for you as possible!\n\n# 📣 Help Us Amplify Your Work\n\nIf you’re working on something you’re proud of, and think the LangChain community would benefit from knowing about it, we want to help you show it off.\n\n# ☀️ Stay in the loop\n\nHere’s where our team hangs out, talks shop, spotlights cool work, and shares what we’re up to. We’d love to see you there too.\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/community#","loc":{"lines":{"from":22,"to":43}}}}],["c4d42965-a2c1-4ad9-963a-f413e5f4cfd3",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Tutorials\n\nBelow are links to tutorials and courses on LangChain.js. For written guides on common use cases for LangChain.js, check out the [use cases](/docs/use_cases) and [guides](/docs/guides/) sections.\n\n---\n\n## Scrimba interactive guides[​](#scrimba-interactive-guides \"Direct link to Scrimba interactive guides\")\n\n[Scrimba](https://scrimba.com) is a code-learning platform that allows you to interactively edit and run code while watching a video walkthrough.\n\nWe've partnered with Scrimba on course materials (called \"scrims\") that teach the fundamentals of building with LangChain.js - check them out below, and check back for more as they become available!\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/additional_resources/tutorials","loc":{"lines":{"from":1,"to":20}}}}],["77b089bc-c01b-4ebd-a73d-c7e51268af10",{"pageContent":"### Learn LangChain.js[​](#learn-langchainjs \"Direct link to Learn LangChain.js\")\n\nAn full end-to-end course that walks through how to build a chatbot that can answer questions about a provided document. A great introduction to LangChain and a great first project for learning how to use LangChain Expression Language primitives to perform retrieval!\n\n### LangChain Expression Language (LCEL)[​](#langchain-expression-language-lcel \"Direct link to LangChain Expression Language (LCEL)\")\n\n### Deeper dives[​](#deeper-dives \"Direct link to Deeper dives\")","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/additional_resources/tutorials","loc":{"lines":{"from":20,"to":26}}}}],["959888c8-2375-4cde-abb9-90a53e41449d",{"pageContent":"## LangChain Expression Language Cheatsheet[​](#langchain-expression-language-cheatsheet \"Direct link to LangChain Expression Language Cheatsheet\")\n\nFor a quick reference for LangChain Expression Language, [check out this overview/cheatsheet](/assets/files/langchain-js-runnable-cheatsheet-17e8dcc53c6636dd6f3fad0fbdb65115.png) made by [@zhanghaili0610](https://twitter.com/zhanghaili0610):\n\n---\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/additional_resources/tutorials","loc":{"lines":{"from":28,"to":39}}}}],["88f45805-2935-40b4-9330-846d8df4b88e",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Tutorials\n\nBelow are links to tutorials and courses on LangChain.js. For written guides on common use cases for LangChain.js, check out the [use cases](/docs/use_cases) and [guides](/docs/guides/) sections.\n\n---\n\n## Scrimba interactive guides[​](#scrimba-interactive-guides \"Direct link to Scrimba interactive guides\")\n\n[Scrimba](https://scrimba.com) is a code-learning platform that allows you to interactively edit and run code while watching a video walkthrough.\n\nWe've partnered with Scrimba on course materials (called \"scrims\") that teach the fundamentals of building with LangChain.js - check them out below, and check back for more as they become available!\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/additional_resources/tutorials#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":1,"to":20}}}}],["71ee7c77-0e43-44c7-8ae1-eb47d8bccac6",{"pageContent":"### Learn LangChain.js[​](#learn-langchainjs \"Direct link to Learn LangChain.js\")\n\nAn full end-to-end course that walks through how to build a chatbot that can answer questions about a provided document. A great introduction to LangChain and a great first project for learning how to use LangChain Expression Language primitives to perform retrieval!\n\n### LangChain Expression Language (LCEL)[​](#langchain-expression-language-lcel \"Direct link to LangChain Expression Language (LCEL)\")\n\n### Deeper dives[​](#deeper-dives \"Direct link to Deeper dives\")","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/additional_resources/tutorials#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":20,"to":26}}}}],["3cec14a2-f252-4061-bfe4-f9963268b4b1",{"pageContent":"## LangChain Expression Language Cheatsheet[​](#langchain-expression-language-cheatsheet \"Direct link to LangChain Expression Language Cheatsheet\")\n\nFor a quick reference for LangChain Expression Language, [check out this overview/cheatsheet](/assets/files/langchain-js-runnable-cheatsheet-17e8dcc53c6636dd6f3fad0fbdb65115.png) made by [@zhanghaili0610](https://twitter.com/zhanghaili0610):\n\n---\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/additional_resources/tutorials#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":28,"to":39}}}}],["7572969a-c393-4d52-b2f2-d7d3e0d1714e",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Tutorials\n\nBelow are links to tutorials and courses on LangChain.js. For written guides on common use cases for LangChain.js, check out the [use cases](/docs/use_cases) and [guides](/docs/guides/) sections.\n\n---\n\n## Scrimba interactive guides[​](#scrimba-interactive-guides \"Direct link to Scrimba interactive guides\")\n\n[Scrimba](https://scrimba.com) is a code-learning platform that allows you to interactively edit and run code while watching a video walkthrough.\n\nWe've partnered with Scrimba on course materials (called \"scrims\") that teach the fundamentals of building with LangChain.js - check them out below, and check back for more as they become available!\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/additional_resources/tutorials#","loc":{"lines":{"from":1,"to":20}}}}],["d36531ca-93d6-464b-807a-86c56ce0bb6c",{"pageContent":"### Learn LangChain.js[​](#learn-langchainjs \"Direct link to Learn LangChain.js\")\n\nAn full end-to-end course that walks through how to build a chatbot that can answer questions about a provided document. A great introduction to LangChain and a great first project for learning how to use LangChain Expression Language primitives to perform retrieval!\n\n### LangChain Expression Language (LCEL)[​](#langchain-expression-language-lcel \"Direct link to LangChain Expression Language (LCEL)\")\n\n### Deeper dives[​](#deeper-dives \"Direct link to Deeper dives\")","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/additional_resources/tutorials#","loc":{"lines":{"from":20,"to":26}}}}],["700ed54b-d34a-479a-9bea-3909a7077064",{"pageContent":"## LangChain Expression Language Cheatsheet[​](#langchain-expression-language-cheatsheet \"Direct link to LangChain Expression Language Cheatsheet\")\n\nFor a quick reference for LangChain Expression Language, [check out this overview/cheatsheet](/assets/files/langchain-js-runnable-cheatsheet-17e8dcc53c6636dd6f3fad0fbdb65115.png) made by [@zhanghaili0610](https://twitter.com/zhanghaili0610):\n\n---\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/additional_resources/tutorials#","loc":{"lines":{"from":28,"to":39}}}}],["11ac217d-b352-4c5f-84a4-358e44980f34",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Contributing to LangChain\n\n👋 Hi there! Thank you for being interested in contributing to LangChain. As an open source project in a rapidly developing field, we are extremely open to contributions, whether it be in the form of a new feature, improved infra, or better documentation.\n\nTo contribute to this project, please follow a [\"fork and pull request\"](https://docs.github.com/en/get-started/quickstart/contributing-to-projects) workflow. Please do not try to push directly to this repo unless you are a maintainer.\n\n## Quick Links[​](#quick-links \"Direct link to Quick Links\")\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing","loc":{"lines":{"from":1,"to":16}}}}],["1c86b49f-d0e9-49de-88d4-1197c65dd81d",{"pageContent":"### Not sure what to work on?[​](#not-sure-what-to-work-on \"Direct link to Not sure what to work on?\")\n\nIf you are not sure what to work on, we have a few suggestions:\n\n### New abstractions[​](#new-abstractions \"Direct link to New abstractions\")\n\nWe aim to keep the same APIs between the Python and JS versions of LangChain, where possible. As such we ask that if you have an idea for a new abstraction, please open an issue first to discuss it. This will help us make sure that the API is consistent across both versions. If you're not sure what to work on, we recommend looking at the links above first.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing","loc":{"lines":{"from":16,"to":24}}}}],["ae9b918a-8912-4bcb-bd2f-a7e70d80c02e",{"pageContent":"## Want to add a specific integration?[​](#want-to-add-a-specific-integration \"Direct link to Want to add a specific integration?\")\n\nLangChain supports several different types of integrations with third-party providers and frameworks, including LLM providers (e.g. [OpenAI](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/llms/openai.ts)), vector stores (e.g. [FAISS](https://github.com/ewfian/langchainjs/blob/main/langchain/src/vectorstores/faiss.ts)), document loaders (e.g. [Apify](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/document_loaders/web/apify_dataset.ts)) persistent message history stores (e.g. [Redis](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/stores/message/redis.ts)), and more.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing","loc":{"lines":{"from":24,"to":26}}}}],["1ebd3a01-d525-4151-a0d5-d730932e0e31",{"pageContent":"We welcome such contributions, but ask that you read our dedicated [integration contribution guide](https://github.com/langchain-ai/langchainjs/blob/main/.github/contributing/INTEGRATIONS.md) for specific details and patterns to consider before opening a pull request.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing","loc":{"lines":{"from":28,"to":28}}}}],["07599bec-95d4-4ca6-abe6-89cee732d506",{"pageContent":"### Want to add a feature that's already in Python?[​](#want-to-add-a-feature-thats-already-in-python \"Direct link to Want to add a feature that's already in Python?\")\n\nIf you're interested in contributing a feature that's already in the [LangChain Python repo](https://github.com/langchain-ai/langchain) and you'd like some help getting started, you can try pasting code snippets and classes into the [LangChain Python to JS translator](https://langchain-translator.vercel.app/).\n\nIt's a chat interface wrapping a fine-tuned `gpt-3.5-turbo` instance trained on prior ported features. This allows the model to innately take into account LangChain-specific code style and imports.\n\nIt's an ongoing project, and feedback on runs will be used to improve the [LangSmith dataset](https://smith.langchain.com) for further fine-tuning! Try it out below:\n\n[https://langchain-translator.vercel.app/](https://langchain-translator.vercel.app/)","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing","loc":{"lines":{"from":30,"to":38}}}}],["6e37323d-006e-4237-9a8f-6a305c948294",{"pageContent":"## 🗺️ Contributing Guidelines[​](#️-contributing-guidelines \"Direct link to 🗺️ Contributing Guidelines\")\n\n### 🚩 GitHub Issues[​](#-github-issues \"Direct link to 🚩 GitHub Issues\")\n\nOur [issues](https://github.com/langchain-ai/langchainjs/issues) page contains with bugs, improvements, and feature requests.\n\nIf you start working on an issue, please assign it to yourself.\n\nIf you are adding an issue, please try to keep it focused on a single modular bug/improvement/feature. If the two issues are related, or blocking, please link them rather than keep them as one single one.\n\nWe will try to keep these issues as up to date as possible, though with the rapid rate of develop in this field some may get out of date. If you notice this happening, please just let us know.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing","loc":{"lines":{"from":40,"to":52}}}}],["100adc41-d76c-4311-a9a6-63133834e3e5",{"pageContent":"### 🙋 Getting Help[​](#-getting-help \"Direct link to 🙋 Getting Help\")\n\nAlthough we try to have a developer setup to make it as easy as possible for others to contribute (see below) it is possible that some pain point may arise around environment setup, linting, documentation, or other. Should that occur, please contact a maintainer! Not only do we want to help get you unblocked, but we also want to make sure that the process is smooth for future contributors.\n\nIn a similar vein, we do enforce certain linting, formatting, and documentation standards in the codebase. If you are finding these difficult (or even just annoying) to work with, feel free to contact a maintainer for help - we do not want these to get in the way of getting good code into the codebase.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing","loc":{"lines":{"from":52,"to":58}}}}],["e56e9a07-9ba4-4e77-9fc8-230a12fcdbf6",{"pageContent":"### 🏭 Release process[​](#-release-process \"Direct link to 🏭 Release process\")\n\nAs of now, LangChain has an ad hoc release process: releases are cut with high frequency via by a developer and published to [npm](https://www.npmjs.com/package/langchain).\n\nLangChain follows the [semver](https://semver.org/) versioning standard. However, as pre-1.0 software, even patch releases may contain [non-backwards-compatible changes](https://semver.org/#spec-item-4).\n\nIf your contribution has made its way into a release, we will want to give you credit on Twitter (only if you want though)! If you have a Twitter account you would like us to mention, please let us know in the PR or in another manner.\n\n### 🛠️ Tooling[​](#️-tooling \"Direct link to 🛠️ Tooling\")\n\nThis project uses the following tools, which are worth getting familiar with if you plan to contribute:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing","loc":{"lines":{"from":58,"to":68}}}}],["17bb8361-33c9-46e9-bac0-21f8cb8a80f6",{"pageContent":"## 🚀 Quick Start[​](#-quick-start \"Direct link to 🚀 Quick Start\")\n\nClone this repo, then cd into it:\n\n```bash\ncd langchainjs  \n```\n\nNext, try running the following common tasks:\n\n## ✅ Common Tasks[​](#-common-tasks \"Direct link to ✅ Common Tasks\")\n\nOur goal is to make it as easy as possible for you to contribute to this project. All of the below commands should be run from within the `langchain/` directory unless otherwise noted.\n\n```bash\ncd langchain  \n```\n\n### Setup[​](#setup \"Direct link to Setup\")\n\nTo get started, you will need to install the dependencies for the project. To do so, run:\n\n```bash\nyarn  \n```\n\n### Linting[​](#linting \"Direct link to Linting\")\n\nWe use [eslint](https://eslint.org/) to enforce standard lint rules. To run the linter, run:\n\n```bash\nyarn lint  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing","loc":{"lines":{"from":70,"to":104}}}}],["b60e075a-6a5b-4c3e-9db7-2e1fa149c89e",{"pageContent":"### Formatting[​](#formatting \"Direct link to Formatting\")\n\nWe use [prettier](https://prettier.io) to enforce code formatting style. To run the formatter, run:\n\n```bash\nyarn format  \n```\n\nTo just check for formatting differences, without fixing them, run:\n\n```bash\nyarn format:check  \n```\n\n### Testing[​](#testing \"Direct link to Testing\")\n\nIn general, tests should be added within a `tests/` folder alongside the modules they are testing.\n\n**Unit tests** cover modular logic that does not require calls to outside APIs.\n\nIf you add new logic, please add a unit test. Unit tests should be called `*.test.ts`.\n\nTo run only unit tests, run:\n\n```bash\nyarn test  \n```\n\n##","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing","loc":{"lines":{"from":104,"to":132}}}}],["b99accc3-bd75-4ee3-8b9a-6fb70879f37d",{"pageContent":"#### Running a single test[​](#running-a-single-test \"Direct link to Running a single test\")\n\nTo run a single test, run:\n\n```bash\nyarn test:single /path/to/yourtest.test.ts  \n```\n\nThis is useful for developing individual features.\n\n**Integration tests** cover logic that requires making calls to outside APIs (often integration with other services).\n\nIf you add support for a new external API, please add a new integration test. Integration tests should be called `*.int.test.ts`.\n\nNote that most integration tests require credentials or other setup. You will likely need to set up a `langchain/.env` file like the example [here](https://github.com/langchain-ai/langchainjs/blob/main/langchain/.env.example).\n\nWe generally recommend only running integration tests with `yarn test:single`, but if you want to run all integration tests, run:\n\n```bash\nyarn test:integration  \n```\n\n### Building[​](#building \"Direct link to Building\")\n\nTo build the project, run:\n\n```bash\nyarn build  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing","loc":{"lines":{"from":132,"to":162}}}}],["be9bc64a-be0d-42dd-8bfa-97eb3e437724",{"pageContent":"### Adding an Entrypoint[​](#adding-an-entrypoint \"Direct link to Adding an Entrypoint\")\n\nLangChain exposes multiple subpaths the user can import from, e.g.\n\n```ts\nimport { OpenAI } from \"langchain/llms/openai\";  \n```\n\nWe call these subpaths \"entrypoints\". In general, you should create a new entrypoint if you are adding a new integration with a 3rd party library. If you're adding self-contained functionality without any external dependencies, you can add it to an existing entrypoint.\n\nIn order to declare a new entrypoint that users can import from, you should edit the `langchain/scripts/create-entrypoints.js` script. To add an entrypoint `tools` that imports from `tools/index.ts` you'd add the following to the `entrypoints` variable:\n\n```ts\nconst entrypoints = {  \n  // ...  \n  tools: \"tools/index\",  \n};  \n```\n\nThis will make sure the entrypoint is included in the published package, and in generated documentation.\n\n## Documentation[​](#documentation \"Direct link to Documentation\")\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing","loc":{"lines":{"from":162,"to":185}}}}],["3071d57c-f093-4d10-9b56-dc07f408940d",{"pageContent":"### Contribute Documentation[​](#contribute-documentation \"Direct link to Contribute Documentation\")\n\nDocs are largely autogenerated by [TypeDoc](https://typedoc.org/) from the code.\n\nFor that reason, we ask that you add good documentation to all classes and methods.\n\nSimilar to linting, we recognize documentation can be annoying. If you do not want to do it, please contact a project maintainer, and they can help you with it. We do not want this to be a blocker for good code getting contributed.\n\nDocumentation and the skeleton lives under the `docs/` folder. Example code is imported from under the `examples/` folder.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing","loc":{"lines":{"from":185,"to":195}}}}],["3c91261c-ade9-414b-95a2-001d73b5c9a0",{"pageContent":"### Running examples[​](#running-examples \"Direct link to Running examples\")\n\nIf you add a new major piece of functionality, it is helpful to add an example to showcase how to use it. Most of our users find examples to be the most helpful kind of documentation.\n\nExamples can be added in the `examples/src` directory, e.g. `examples/src/path/to/example` and should export a `run` function. This example can then be invoked with `yarn example path/to/example` at the top level of the repo.\n\nTo run examples that require an environment variable, you'll need to add a `.env` file under `examples/.env`\n\n### Build Documentation Locally[​](#build-documentation-locally \"Direct link to Build Documentation Locally\")\n\nTo generate and view the documentation locally, change to the project root and run `yarn` to ensure dependencies get installed in both the `docs/` and `examples/` workspaces:\n\n```bash\ncd ..  \nyarn  \n```\n\nThen run:\n\n```bash\nyarn docs  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing","loc":{"lines":{"from":195,"to":216}}}}],["15668a50-b39e-419a-a464-f85db9cf0ff2",{"pageContent":"## Advanced[​](#advanced \"Direct link to Advanced\")\n\n**Environment tests** test whether LangChain works across different JS environments, including Node.js (both ESM and CJS), Edge environments (eg. Cloudflare Workers), and browsers (using Webpack).\n\nTo run the environment tests with Docker, run the following command from the project root:\n\n```bash\nyarn test:exports:docker  \n```\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing","loc":{"lines":{"from":218,"to":233}}}}],["89a8280b-b857-405a-a3b7-513ec2d6ffa6",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Contributing to LangChain\n\n👋 Hi there! Thank you for being interested in contributing to LangChain. As an open source project in a rapidly developing field, we are extremely open to contributions, whether it be in the form of a new feature, improved infra, or better documentation.\n\nTo contribute to this project, please follow a [\"fork and pull request\"](https://docs.github.com/en/get-started/quickstart/contributing-to-projects) workflow. Please do not try to push directly to this repo unless you are a maintainer.\n\n## Quick Links[​](#quick-links \"Direct link to Quick Links\")\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":1,"to":16}}}}],["7cb9a4a5-b50f-4ce1-a25e-a33ba3db96d3",{"pageContent":"### Not sure what to work on?[​](#not-sure-what-to-work-on \"Direct link to Not sure what to work on?\")\n\nIf you are not sure what to work on, we have a few suggestions:\n\n### New abstractions[​](#new-abstractions \"Direct link to New abstractions\")\n\nWe aim to keep the same APIs between the Python and JS versions of LangChain, where possible. As such we ask that if you have an idea for a new abstraction, please open an issue first to discuss it. This will help us make sure that the API is consistent across both versions. If you're not sure what to work on, we recommend looking at the links above first.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":16,"to":24}}}}],["e89abad4-0646-411e-a6f5-95a406f9718f",{"pageContent":"## Want to add a specific integration?[​](#want-to-add-a-specific-integration \"Direct link to Want to add a specific integration?\")\n\nLangChain supports several different types of integrations with third-party providers and frameworks, including LLM providers (e.g. [OpenAI](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/llms/openai.ts)), vector stores (e.g. [FAISS](https://github.com/ewfian/langchainjs/blob/main/langchain/src/vectorstores/faiss.ts)), document loaders (e.g. [Apify](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/document_loaders/web/apify_dataset.ts)) persistent message history stores (e.g. [Redis](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/stores/message/redis.ts)), and more.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":24,"to":26}}}}],["bbfe17fe-1dcf-404c-a3b4-4316744d75d8",{"pageContent":"We welcome such contributions, but ask that you read our dedicated [integration contribution guide](https://github.com/langchain-ai/langchainjs/blob/main/.github/contributing/INTEGRATIONS.md) for specific details and patterns to consider before opening a pull request.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":28,"to":28}}}}],["798ce0aa-34a9-4a3a-8ee1-04c230668bdf",{"pageContent":"### Want to add a feature that's already in Python?[​](#want-to-add-a-feature-thats-already-in-python \"Direct link to Want to add a feature that's already in Python?\")\n\nIf you're interested in contributing a feature that's already in the [LangChain Python repo](https://github.com/langchain-ai/langchain) and you'd like some help getting started, you can try pasting code snippets and classes into the [LangChain Python to JS translator](https://langchain-translator.vercel.app/).\n\nIt's a chat interface wrapping a fine-tuned `gpt-3.5-turbo` instance trained on prior ported features. This allows the model to innately take into account LangChain-specific code style and imports.\n\nIt's an ongoing project, and feedback on runs will be used to improve the [LangSmith dataset](https://smith.langchain.com) for further fine-tuning! Try it out below:\n\n[https://langchain-translator.vercel.app/](https://langchain-translator.vercel.app/)","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":30,"to":38}}}}],["8c65019e-6040-4379-af5b-2da6c9bad3d8",{"pageContent":"## 🗺️ Contributing Guidelines[​](#️-contributing-guidelines \"Direct link to 🗺️ Contributing Guidelines\")\n\n### 🚩 GitHub Issues[​](#-github-issues \"Direct link to 🚩 GitHub Issues\")\n\nOur [issues](https://github.com/langchain-ai/langchainjs/issues) page contains with bugs, improvements, and feature requests.\n\nIf you start working on an issue, please assign it to yourself.\n\nIf you are adding an issue, please try to keep it focused on a single modular bug/improvement/feature. If the two issues are related, or blocking, please link them rather than keep them as one single one.\n\nWe will try to keep these issues as up to date as possible, though with the rapid rate of develop in this field some may get out of date. If you notice this happening, please just let us know.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":40,"to":52}}}}],["abc81783-c87b-4496-b28d-07ce479eb72b",{"pageContent":"### 🙋 Getting Help[​](#-getting-help \"Direct link to 🙋 Getting Help\")\n\nAlthough we try to have a developer setup to make it as easy as possible for others to contribute (see below) it is possible that some pain point may arise around environment setup, linting, documentation, or other. Should that occur, please contact a maintainer! Not only do we want to help get you unblocked, but we also want to make sure that the process is smooth for future contributors.\n\nIn a similar vein, we do enforce certain linting, formatting, and documentation standards in the codebase. If you are finding these difficult (or even just annoying) to work with, feel free to contact a maintainer for help - we do not want these to get in the way of getting good code into the codebase.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":52,"to":58}}}}],["dfd5f2ec-35b0-46c2-9f26-42caf1573cba",{"pageContent":"### 🏭 Release process[​](#-release-process \"Direct link to 🏭 Release process\")\n\nAs of now, LangChain has an ad hoc release process: releases are cut with high frequency via by a developer and published to [npm](https://www.npmjs.com/package/langchain).\n\nLangChain follows the [semver](https://semver.org/) versioning standard. However, as pre-1.0 software, even patch releases may contain [non-backwards-compatible changes](https://semver.org/#spec-item-4).\n\nIf your contribution has made its way into a release, we will want to give you credit on Twitter (only if you want though)! If you have a Twitter account you would like us to mention, please let us know in the PR or in another manner.\n\n### 🛠️ Tooling[​](#️-tooling \"Direct link to 🛠️ Tooling\")\n\nThis project uses the following tools, which are worth getting familiar with if you plan to contribute:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":58,"to":68}}}}],["4bbd7051-10be-4328-b063-b81736a668fd",{"pageContent":"## 🚀 Quick Start[​](#-quick-start \"Direct link to 🚀 Quick Start\")\n\nClone this repo, then cd into it:\n\n```bash\ncd langchainjs  \n```\n\nNext, try running the following common tasks:\n\n## ✅ Common Tasks[​](#-common-tasks \"Direct link to ✅ Common Tasks\")\n\nOur goal is to make it as easy as possible for you to contribute to this project. All of the below commands should be run from within the `langchain/` directory unless otherwise noted.\n\n```bash\ncd langchain  \n```\n\n### Setup[​](#setup \"Direct link to Setup\")\n\nTo get started, you will need to install the dependencies for the project. To do so, run:\n\n```bash\nyarn  \n```\n\n### Linting[​](#linting \"Direct link to Linting\")\n\nWe use [eslint](https://eslint.org/) to enforce standard lint rules. To run the linter, run:\n\n```bash\nyarn lint  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":70,"to":104}}}}],["66120f7f-ae75-4072-873f-9d42875efde8",{"pageContent":"### Formatting[​](#formatting \"Direct link to Formatting\")\n\nWe use [prettier](https://prettier.io) to enforce code formatting style. To run the formatter, run:\n\n```bash\nyarn format  \n```\n\nTo just check for formatting differences, without fixing them, run:\n\n```bash\nyarn format:check  \n```\n\n### Testing[​](#testing \"Direct link to Testing\")\n\nIn general, tests should be added within a `tests/` folder alongside the modules they are testing.\n\n**Unit tests** cover modular logic that does not require calls to outside APIs.\n\nIf you add new logic, please add a unit test. Unit tests should be called `*.test.ts`.\n\nTo run only unit tests, run:\n\n```bash\nyarn test  \n```\n\n##","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":104,"to":132}}}}],["558eb6e4-aa55-43df-8abb-296428b1565d",{"pageContent":"#### Running a single test[​](#running-a-single-test \"Direct link to Running a single test\")\n\nTo run a single test, run:\n\n```bash\nyarn test:single /path/to/yourtest.test.ts  \n```\n\nThis is useful for developing individual features.\n\n**Integration tests** cover logic that requires making calls to outside APIs (often integration with other services).\n\nIf you add support for a new external API, please add a new integration test. Integration tests should be called `*.int.test.ts`.\n\nNote that most integration tests require credentials or other setup. You will likely need to set up a `langchain/.env` file like the example [here](https://github.com/langchain-ai/langchainjs/blob/main/langchain/.env.example).\n\nWe generally recommend only running integration tests with `yarn test:single`, but if you want to run all integration tests, run:\n\n```bash\nyarn test:integration  \n```\n\n### Building[​](#building \"Direct link to Building\")\n\nTo build the project, run:\n\n```bash\nyarn build  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":132,"to":162}}}}],["dcee569e-787c-45f8-b4e4-c6e7fb26323b",{"pageContent":"### Adding an Entrypoint[​](#adding-an-entrypoint \"Direct link to Adding an Entrypoint\")\n\nLangChain exposes multiple subpaths the user can import from, e.g.\n\n```ts\nimport { OpenAI } from \"langchain/llms/openai\";  \n```\n\nWe call these subpaths \"entrypoints\". In general, you should create a new entrypoint if you are adding a new integration with a 3rd party library. If you're adding self-contained functionality without any external dependencies, you can add it to an existing entrypoint.\n\nIn order to declare a new entrypoint that users can import from, you should edit the `langchain/scripts/create-entrypoints.js` script. To add an entrypoint `tools` that imports from `tools/index.ts` you'd add the following to the `entrypoints` variable:\n\n```ts\nconst entrypoints = {  \n  // ...  \n  tools: \"tools/index\",  \n};  \n```\n\nThis will make sure the entrypoint is included in the published package, and in generated documentation.\n\n## Documentation[​](#documentation \"Direct link to Documentation\")\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":162,"to":185}}}}],["4323792c-7ba3-46df-9c28-f5ecd6270546",{"pageContent":"### Contribute Documentation[​](#contribute-documentation \"Direct link to Contribute Documentation\")\n\nDocs are largely autogenerated by [TypeDoc](https://typedoc.org/) from the code.\n\nFor that reason, we ask that you add good documentation to all classes and methods.\n\nSimilar to linting, we recognize documentation can be annoying. If you do not want to do it, please contact a project maintainer, and they can help you with it. We do not want this to be a blocker for good code getting contributed.\n\nDocumentation and the skeleton lives under the `docs/` folder. Example code is imported from under the `examples/` folder.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":185,"to":195}}}}],["a4689188-f252-4820-84d6-7c1cee25e76a",{"pageContent":"### Running examples[​](#running-examples \"Direct link to Running examples\")\n\nIf you add a new major piece of functionality, it is helpful to add an example to showcase how to use it. Most of our users find examples to be the most helpful kind of documentation.\n\nExamples can be added in the `examples/src` directory, e.g. `examples/src/path/to/example` and should export a `run` function. This example can then be invoked with `yarn example path/to/example` at the top level of the repo.\n\nTo run examples that require an environment variable, you'll need to add a `.env` file under `examples/.env`\n\n### Build Documentation Locally[​](#build-documentation-locally \"Direct link to Build Documentation Locally\")\n\nTo generate and view the documentation locally, change to the project root and run `yarn` to ensure dependencies get installed in both the `docs/` and `examples/` workspaces:\n\n```bash\ncd ..  \nyarn  \n```\n\nThen run:\n\n```bash\nyarn docs  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":195,"to":216}}}}],["d6b559e8-404a-4730-946a-1c10e8bdbfa9",{"pageContent":"## Advanced[​](#advanced \"Direct link to Advanced\")\n\n**Environment tests** test whether LangChain works across different JS environments, including Node.js (both ESM and CJS), Edge environments (eg. Cloudflare Workers), and browsers (using Webpack).\n\nTo run the environment tests with Docker, run the following command from the project root:\n\n```bash\nyarn test:exports:docker  \n```\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":218,"to":233}}}}],["f73cfd49-c9b1-4f71-87fe-c54e0b378380",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Contributing to LangChain\n\n👋 Hi there! Thank you for being interested in contributing to LangChain. As an open source project in a rapidly developing field, we are extremely open to contributions, whether it be in the form of a new feature, improved infra, or better documentation.\n\nTo contribute to this project, please follow a [\"fork and pull request\"](https://docs.github.com/en/get-started/quickstart/contributing-to-projects) workflow. Please do not try to push directly to this repo unless you are a maintainer.\n\n## Quick Links[​](#quick-links \"Direct link to Quick Links\")\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#","loc":{"lines":{"from":1,"to":16}}}}],["7bcb2bac-8d5d-4969-b451-80e46ed21de0",{"pageContent":"### Not sure what to work on?[​](#not-sure-what-to-work-on \"Direct link to Not sure what to work on?\")\n\nIf you are not sure what to work on, we have a few suggestions:\n\n### New abstractions[​](#new-abstractions \"Direct link to New abstractions\")\n\nWe aim to keep the same APIs between the Python and JS versions of LangChain, where possible. As such we ask that if you have an idea for a new abstraction, please open an issue first to discuss it. This will help us make sure that the API is consistent across both versions. If you're not sure what to work on, we recommend looking at the links above first.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#","loc":{"lines":{"from":16,"to":24}}}}],["420607e7-a148-4e94-bf6b-236b6cb0b42b",{"pageContent":"## Want to add a specific integration?[​](#want-to-add-a-specific-integration \"Direct link to Want to add a specific integration?\")\n\nLangChain supports several different types of integrations with third-party providers and frameworks, including LLM providers (e.g. [OpenAI](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/llms/openai.ts)), vector stores (e.g. [FAISS](https://github.com/ewfian/langchainjs/blob/main/langchain/src/vectorstores/faiss.ts)), document loaders (e.g. [Apify](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/document_loaders/web/apify_dataset.ts)) persistent message history stores (e.g. [Redis](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/stores/message/redis.ts)), and more.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#","loc":{"lines":{"from":24,"to":26}}}}],["97ca7154-1713-4756-ad39-9bfee47305b0",{"pageContent":"We welcome such contributions, but ask that you read our dedicated [integration contribution guide](https://github.com/langchain-ai/langchainjs/blob/main/.github/contributing/INTEGRATIONS.md) for specific details and patterns to consider before opening a pull request.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#","loc":{"lines":{"from":28,"to":28}}}}],["0f922218-88d5-4357-8bbd-a58a062034d6",{"pageContent":"### Want to add a feature that's already in Python?[​](#want-to-add-a-feature-thats-already-in-python \"Direct link to Want to add a feature that's already in Python?\")\n\nIf you're interested in contributing a feature that's already in the [LangChain Python repo](https://github.com/langchain-ai/langchain) and you'd like some help getting started, you can try pasting code snippets and classes into the [LangChain Python to JS translator](https://langchain-translator.vercel.app/).\n\nIt's a chat interface wrapping a fine-tuned `gpt-3.5-turbo` instance trained on prior ported features. This allows the model to innately take into account LangChain-specific code style and imports.\n\nIt's an ongoing project, and feedback on runs will be used to improve the [LangSmith dataset](https://smith.langchain.com) for further fine-tuning! Try it out below:\n\n[https://langchain-translator.vercel.app/](https://langchain-translator.vercel.app/)","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#","loc":{"lines":{"from":30,"to":38}}}}],["fea90ce8-f019-4738-b2c2-82c3f91c86f4",{"pageContent":"## 🗺️ Contributing Guidelines[​](#️-contributing-guidelines \"Direct link to 🗺️ Contributing Guidelines\")\n\n### 🚩 GitHub Issues[​](#-github-issues \"Direct link to 🚩 GitHub Issues\")\n\nOur [issues](https://github.com/langchain-ai/langchainjs/issues) page contains with bugs, improvements, and feature requests.\n\nIf you start working on an issue, please assign it to yourself.\n\nIf you are adding an issue, please try to keep it focused on a single modular bug/improvement/feature. If the two issues are related, or blocking, please link them rather than keep them as one single one.\n\nWe will try to keep these issues as up to date as possible, though with the rapid rate of develop in this field some may get out of date. If you notice this happening, please just let us know.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#","loc":{"lines":{"from":40,"to":52}}}}],["2e763034-4356-44c3-bd55-a9aa44f0abcd",{"pageContent":"### 🙋 Getting Help[​](#-getting-help \"Direct link to 🙋 Getting Help\")\n\nAlthough we try to have a developer setup to make it as easy as possible for others to contribute (see below) it is possible that some pain point may arise around environment setup, linting, documentation, or other. Should that occur, please contact a maintainer! Not only do we want to help get you unblocked, but we also want to make sure that the process is smooth for future contributors.\n\nIn a similar vein, we do enforce certain linting, formatting, and documentation standards in the codebase. If you are finding these difficult (or even just annoying) to work with, feel free to contact a maintainer for help - we do not want these to get in the way of getting good code into the codebase.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#","loc":{"lines":{"from":52,"to":58}}}}],["268cc17f-00a3-41b5-9898-d0943ed25441",{"pageContent":"### 🏭 Release process[​](#-release-process \"Direct link to 🏭 Release process\")\n\nAs of now, LangChain has an ad hoc release process: releases are cut with high frequency via by a developer and published to [npm](https://www.npmjs.com/package/langchain).\n\nLangChain follows the [semver](https://semver.org/) versioning standard. However, as pre-1.0 software, even patch releases may contain [non-backwards-compatible changes](https://semver.org/#spec-item-4).\n\nIf your contribution has made its way into a release, we will want to give you credit on Twitter (only if you want though)! If you have a Twitter account you would like us to mention, please let us know in the PR or in another manner.\n\n### 🛠️ Tooling[​](#️-tooling \"Direct link to 🛠️ Tooling\")\n\nThis project uses the following tools, which are worth getting familiar with if you plan to contribute:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#","loc":{"lines":{"from":58,"to":68}}}}],["9847dd39-39d1-4f34-b151-fafc2e1e973e",{"pageContent":"## 🚀 Quick Start[​](#-quick-start \"Direct link to 🚀 Quick Start\")\n\nClone this repo, then cd into it:\n\n```bash\ncd langchainjs  \n```\n\nNext, try running the following common tasks:\n\n## ✅ Common Tasks[​](#-common-tasks \"Direct link to ✅ Common Tasks\")\n\nOur goal is to make it as easy as possible for you to contribute to this project. All of the below commands should be run from within the `langchain/` directory unless otherwise noted.\n\n```bash\ncd langchain  \n```\n\n### Setup[​](#setup \"Direct link to Setup\")\n\nTo get started, you will need to install the dependencies for the project. To do so, run:\n\n```bash\nyarn  \n```\n\n### Linting[​](#linting \"Direct link to Linting\")\n\nWe use [eslint](https://eslint.org/) to enforce standard lint rules. To run the linter, run:\n\n```bash\nyarn lint  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#","loc":{"lines":{"from":70,"to":104}}}}],["7dee83b9-cb37-4605-8b78-735ff41019e7",{"pageContent":"### Formatting[​](#formatting \"Direct link to Formatting\")\n\nWe use [prettier](https://prettier.io) to enforce code formatting style. To run the formatter, run:\n\n```bash\nyarn format  \n```\n\nTo just check for formatting differences, without fixing them, run:\n\n```bash\nyarn format:check  \n```\n\n### Testing[​](#testing \"Direct link to Testing\")\n\nIn general, tests should be added within a `tests/` folder alongside the modules they are testing.\n\n**Unit tests** cover modular logic that does not require calls to outside APIs.\n\nIf you add new logic, please add a unit test. Unit tests should be called `*.test.ts`.\n\nTo run only unit tests, run:\n\n```bash\nyarn test  \n```\n\n##","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#","loc":{"lines":{"from":104,"to":132}}}}],["8451dda1-af6c-4d63-83e6-388f0ae5fccf",{"pageContent":"#### Running a single test[​](#running-a-single-test \"Direct link to Running a single test\")\n\nTo run a single test, run:\n\n```bash\nyarn test:single /path/to/yourtest.test.ts  \n```\n\nThis is useful for developing individual features.\n\n**Integration tests** cover logic that requires making calls to outside APIs (often integration with other services).\n\nIf you add support for a new external API, please add a new integration test. Integration tests should be called `*.int.test.ts`.\n\nNote that most integration tests require credentials or other setup. You will likely need to set up a `langchain/.env` file like the example [here](https://github.com/langchain-ai/langchainjs/blob/main/langchain/.env.example).\n\nWe generally recommend only running integration tests with `yarn test:single`, but if you want to run all integration tests, run:\n\n```bash\nyarn test:integration  \n```\n\n### Building[​](#building \"Direct link to Building\")\n\nTo build the project, run:\n\n```bash\nyarn build  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#","loc":{"lines":{"from":132,"to":162}}}}],["4a927613-4d97-4e29-850d-7f3f1039324a",{"pageContent":"### Adding an Entrypoint[​](#adding-an-entrypoint \"Direct link to Adding an Entrypoint\")\n\nLangChain exposes multiple subpaths the user can import from, e.g.\n\n```ts\nimport { OpenAI } from \"langchain/llms/openai\";  \n```\n\nWe call these subpaths \"entrypoints\". In general, you should create a new entrypoint if you are adding a new integration with a 3rd party library. If you're adding self-contained functionality without any external dependencies, you can add it to an existing entrypoint.\n\nIn order to declare a new entrypoint that users can import from, you should edit the `langchain/scripts/create-entrypoints.js` script. To add an entrypoint `tools` that imports from `tools/index.ts` you'd add the following to the `entrypoints` variable:\n\n```ts\nconst entrypoints = {  \n  // ...  \n  tools: \"tools/index\",  \n};  \n```\n\nThis will make sure the entrypoint is included in the published package, and in generated documentation.\n\n## Documentation[​](#documentation \"Direct link to Documentation\")\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#","loc":{"lines":{"from":162,"to":185}}}}],["212723fe-fd58-4f14-a16a-8bae13d874ed",{"pageContent":"### Contribute Documentation[​](#contribute-documentation \"Direct link to Contribute Documentation\")\n\nDocs are largely autogenerated by [TypeDoc](https://typedoc.org/) from the code.\n\nFor that reason, we ask that you add good documentation to all classes and methods.\n\nSimilar to linting, we recognize documentation can be annoying. If you do not want to do it, please contact a project maintainer, and they can help you with it. We do not want this to be a blocker for good code getting contributed.\n\nDocumentation and the skeleton lives under the `docs/` folder. Example code is imported from under the `examples/` folder.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#","loc":{"lines":{"from":185,"to":195}}}}],["53447c14-df3f-4aa4-b8ec-0f9e1c37a86d",{"pageContent":"### Running examples[​](#running-examples \"Direct link to Running examples\")\n\nIf you add a new major piece of functionality, it is helpful to add an example to showcase how to use it. Most of our users find examples to be the most helpful kind of documentation.\n\nExamples can be added in the `examples/src` directory, e.g. `examples/src/path/to/example` and should export a `run` function. This example can then be invoked with `yarn example path/to/example` at the top level of the repo.\n\nTo run examples that require an environment variable, you'll need to add a `.env` file under `examples/.env`\n\n### Build Documentation Locally[​](#build-documentation-locally \"Direct link to Build Documentation Locally\")\n\nTo generate and view the documentation locally, change to the project root and run `yarn` to ensure dependencies get installed in both the `docs/` and `examples/` workspaces:\n\n```bash\ncd ..  \nyarn  \n```\n\nThen run:\n\n```bash\nyarn docs  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#","loc":{"lines":{"from":195,"to":216}}}}],["35b65c51-1117-4c99-848e-6e3e91cf779d",{"pageContent":"## Advanced[​](#advanced \"Direct link to Advanced\")\n\n**Environment tests** test whether LangChain works across different JS environments, including Node.js (both ESM and CJS), Edge environments (eg. Cloudflare Workers), and browsers (using Webpack).\n\nTo run the environment tests with Docker, run the following command from the project root:\n\n```bash\nyarn test:exports:docker  \n```\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#","loc":{"lines":{"from":218,"to":233}}}}],["5801e03c-b120-4a2f-8383-05a0454238d8",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Contributing to LangChain\n\n👋 Hi there! Thank you for being interested in contributing to LangChain. As an open source project in a rapidly developing field, we are extremely open to contributions, whether it be in the form of a new feature, improved infra, or better documentation.\n\nTo contribute to this project, please follow a [\"fork and pull request\"](https://docs.github.com/en/get-started/quickstart/contributing-to-projects) workflow. Please do not try to push directly to this repo unless you are a maintainer.\n\n## Quick Links[​](#quick-links \"Direct link to Quick Links\")\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#quick-links","loc":{"lines":{"from":1,"to":16}}}}],["c9dd1952-da18-48d3-9f42-bafe8b64591f",{"pageContent":"### Not sure what to work on?[​](#not-sure-what-to-work-on \"Direct link to Not sure what to work on?\")\n\nIf you are not sure what to work on, we have a few suggestions:\n\n### New abstractions[​](#new-abstractions \"Direct link to New abstractions\")\n\nWe aim to keep the same APIs between the Python and JS versions of LangChain, where possible. As such we ask that if you have an idea for a new abstraction, please open an issue first to discuss it. This will help us make sure that the API is consistent across both versions. If you're not sure what to work on, we recommend looking at the links above first.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#quick-links","loc":{"lines":{"from":16,"to":24}}}}],["e2263939-6515-4938-a0af-58d29e515e08",{"pageContent":"## Want to add a specific integration?[​](#want-to-add-a-specific-integration \"Direct link to Want to add a specific integration?\")\n\nLangChain supports several different types of integrations with third-party providers and frameworks, including LLM providers (e.g. [OpenAI](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/llms/openai.ts)), vector stores (e.g. [FAISS](https://github.com/ewfian/langchainjs/blob/main/langchain/src/vectorstores/faiss.ts)), document loaders (e.g. [Apify](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/document_loaders/web/apify_dataset.ts)) persistent message history stores (e.g. [Redis](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/stores/message/redis.ts)), and more.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#quick-links","loc":{"lines":{"from":24,"to":26}}}}],["bcbd46b7-9aba-47e8-932e-59cb619f451d",{"pageContent":"We welcome such contributions, but ask that you read our dedicated [integration contribution guide](https://github.com/langchain-ai/langchainjs/blob/main/.github/contributing/INTEGRATIONS.md) for specific details and patterns to consider before opening a pull request.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#quick-links","loc":{"lines":{"from":28,"to":28}}}}],["74a3c075-947a-41ba-9190-22e856aee439",{"pageContent":"### Want to add a feature that's already in Python?[​](#want-to-add-a-feature-thats-already-in-python \"Direct link to Want to add a feature that's already in Python?\")\n\nIf you're interested in contributing a feature that's already in the [LangChain Python repo](https://github.com/langchain-ai/langchain) and you'd like some help getting started, you can try pasting code snippets and classes into the [LangChain Python to JS translator](https://langchain-translator.vercel.app/).\n\nIt's a chat interface wrapping a fine-tuned `gpt-3.5-turbo` instance trained on prior ported features. This allows the model to innately take into account LangChain-specific code style and imports.\n\nIt's an ongoing project, and feedback on runs will be used to improve the [LangSmith dataset](https://smith.langchain.com) for further fine-tuning! Try it out below:\n\n[https://langchain-translator.vercel.app/](https://langchain-translator.vercel.app/)","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#quick-links","loc":{"lines":{"from":30,"to":38}}}}],["827edc58-d4bb-4578-9e83-8d15c72b6b26",{"pageContent":"## 🗺️ Contributing Guidelines[​](#️-contributing-guidelines \"Direct link to 🗺️ Contributing Guidelines\")\n\n### 🚩 GitHub Issues[​](#-github-issues \"Direct link to 🚩 GitHub Issues\")\n\nOur [issues](https://github.com/langchain-ai/langchainjs/issues) page contains with bugs, improvements, and feature requests.\n\nIf you start working on an issue, please assign it to yourself.\n\nIf you are adding an issue, please try to keep it focused on a single modular bug/improvement/feature. If the two issues are related, or blocking, please link them rather than keep them as one single one.\n\nWe will try to keep these issues as up to date as possible, though with the rapid rate of develop in this field some may get out of date. If you notice this happening, please just let us know.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#quick-links","loc":{"lines":{"from":40,"to":52}}}}],["b36dbe17-9d80-4a1b-9fdd-4db05986c103",{"pageContent":"### 🙋 Getting Help[​](#-getting-help \"Direct link to 🙋 Getting Help\")\n\nAlthough we try to have a developer setup to make it as easy as possible for others to contribute (see below) it is possible that some pain point may arise around environment setup, linting, documentation, or other. Should that occur, please contact a maintainer! Not only do we want to help get you unblocked, but we also want to make sure that the process is smooth for future contributors.\n\nIn a similar vein, we do enforce certain linting, formatting, and documentation standards in the codebase. If you are finding these difficult (or even just annoying) to work with, feel free to contact a maintainer for help - we do not want these to get in the way of getting good code into the codebase.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#quick-links","loc":{"lines":{"from":52,"to":58}}}}],["6b82b77b-ea68-4c36-9b9f-26bc86d38d5a",{"pageContent":"### 🏭 Release process[​](#-release-process \"Direct link to 🏭 Release process\")\n\nAs of now, LangChain has an ad hoc release process: releases are cut with high frequency via by a developer and published to [npm](https://www.npmjs.com/package/langchain).\n\nLangChain follows the [semver](https://semver.org/) versioning standard. However, as pre-1.0 software, even patch releases may contain [non-backwards-compatible changes](https://semver.org/#spec-item-4).\n\nIf your contribution has made its way into a release, we will want to give you credit on Twitter (only if you want though)! If you have a Twitter account you would like us to mention, please let us know in the PR or in another manner.\n\n### 🛠️ Tooling[​](#️-tooling \"Direct link to 🛠️ Tooling\")\n\nThis project uses the following tools, which are worth getting familiar with if you plan to contribute:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#quick-links","loc":{"lines":{"from":58,"to":68}}}}],["c3449ed9-2d5b-407c-bd34-ea77647d3ed5",{"pageContent":"## 🚀 Quick Start[​](#-quick-start \"Direct link to 🚀 Quick Start\")\n\nClone this repo, then cd into it:\n\n```bash\ncd langchainjs  \n```\n\nNext, try running the following common tasks:\n\n## ✅ Common Tasks[​](#-common-tasks \"Direct link to ✅ Common Tasks\")\n\nOur goal is to make it as easy as possible for you to contribute to this project. All of the below commands should be run from within the `langchain/` directory unless otherwise noted.\n\n```bash\ncd langchain  \n```\n\n### Setup[​](#setup \"Direct link to Setup\")\n\nTo get started, you will need to install the dependencies for the project. To do so, run:\n\n```bash\nyarn  \n```\n\n### Linting[​](#linting \"Direct link to Linting\")\n\nWe use [eslint](https://eslint.org/) to enforce standard lint rules. To run the linter, run:\n\n```bash\nyarn lint  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#quick-links","loc":{"lines":{"from":70,"to":104}}}}],["f9105426-b2ca-428a-8c4f-227ecbc458e8",{"pageContent":"### Formatting[​](#formatting \"Direct link to Formatting\")\n\nWe use [prettier](https://prettier.io) to enforce code formatting style. To run the formatter, run:\n\n```bash\nyarn format  \n```\n\nTo just check for formatting differences, without fixing them, run:\n\n```bash\nyarn format:check  \n```\n\n### Testing[​](#testing \"Direct link to Testing\")\n\nIn general, tests should be added within a `tests/` folder alongside the modules they are testing.\n\n**Unit tests** cover modular logic that does not require calls to outside APIs.\n\nIf you add new logic, please add a unit test. Unit tests should be called `*.test.ts`.\n\nTo run only unit tests, run:\n\n```bash\nyarn test  \n```\n\n##","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#quick-links","loc":{"lines":{"from":104,"to":132}}}}],["1dcec245-fcea-451b-a30e-3042586d8f50",{"pageContent":"#### Running a single test[​](#running-a-single-test \"Direct link to Running a single test\")\n\nTo run a single test, run:\n\n```bash\nyarn test:single /path/to/yourtest.test.ts  \n```\n\nThis is useful for developing individual features.\n\n**Integration tests** cover logic that requires making calls to outside APIs (often integration with other services).\n\nIf you add support for a new external API, please add a new integration test. Integration tests should be called `*.int.test.ts`.\n\nNote that most integration tests require credentials or other setup. You will likely need to set up a `langchain/.env` file like the example [here](https://github.com/langchain-ai/langchainjs/blob/main/langchain/.env.example).\n\nWe generally recommend only running integration tests with `yarn test:single`, but if you want to run all integration tests, run:\n\n```bash\nyarn test:integration  \n```\n\n### Building[​](#building \"Direct link to Building\")\n\nTo build the project, run:\n\n```bash\nyarn build  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#quick-links","loc":{"lines":{"from":132,"to":162}}}}],["4af4a15a-ccf2-410b-a3ac-a941ef152af8",{"pageContent":"### Adding an Entrypoint[​](#adding-an-entrypoint \"Direct link to Adding an Entrypoint\")\n\nLangChain exposes multiple subpaths the user can import from, e.g.\n\n```ts\nimport { OpenAI } from \"langchain/llms/openai\";  \n```\n\nWe call these subpaths \"entrypoints\". In general, you should create a new entrypoint if you are adding a new integration with a 3rd party library. If you're adding self-contained functionality without any external dependencies, you can add it to an existing entrypoint.\n\nIn order to declare a new entrypoint that users can import from, you should edit the `langchain/scripts/create-entrypoints.js` script. To add an entrypoint `tools` that imports from `tools/index.ts` you'd add the following to the `entrypoints` variable:\n\n```ts\nconst entrypoints = {  \n  // ...  \n  tools: \"tools/index\",  \n};  \n```\n\nThis will make sure the entrypoint is included in the published package, and in generated documentation.\n\n## Documentation[​](#documentation \"Direct link to Documentation\")\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#quick-links","loc":{"lines":{"from":162,"to":185}}}}],["3fbd5b75-d846-417d-b351-195352f64ed9",{"pageContent":"### Contribute Documentation[​](#contribute-documentation \"Direct link to Contribute Documentation\")\n\nDocs are largely autogenerated by [TypeDoc](https://typedoc.org/) from the code.\n\nFor that reason, we ask that you add good documentation to all classes and methods.\n\nSimilar to linting, we recognize documentation can be annoying. If you do not want to do it, please contact a project maintainer, and they can help you with it. We do not want this to be a blocker for good code getting contributed.\n\nDocumentation and the skeleton lives under the `docs/` folder. Example code is imported from under the `examples/` folder.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#quick-links","loc":{"lines":{"from":185,"to":195}}}}],["883f765d-7faa-4710-9e08-698ef7d7dd82",{"pageContent":"### Running examples[​](#running-examples \"Direct link to Running examples\")\n\nIf you add a new major piece of functionality, it is helpful to add an example to showcase how to use it. Most of our users find examples to be the most helpful kind of documentation.\n\nExamples can be added in the `examples/src` directory, e.g. `examples/src/path/to/example` and should export a `run` function. This example can then be invoked with `yarn example path/to/example` at the top level of the repo.\n\nTo run examples that require an environment variable, you'll need to add a `.env` file under `examples/.env`\n\n### Build Documentation Locally[​](#build-documentation-locally \"Direct link to Build Documentation Locally\")\n\nTo generate and view the documentation locally, change to the project root and run `yarn` to ensure dependencies get installed in both the `docs/` and `examples/` workspaces:\n\n```bash\ncd ..  \nyarn  \n```\n\nThen run:\n\n```bash\nyarn docs  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#quick-links","loc":{"lines":{"from":195,"to":216}}}}],["b6da18ea-874b-4ea2-ab17-5c1c035db8c7",{"pageContent":"## Advanced[​](#advanced \"Direct link to Advanced\")\n\n**Environment tests** test whether LangChain works across different JS environments, including Node.js (both ESM and CJS), Edge environments (eg. Cloudflare Workers), and browsers (using Webpack).\n\nTo run the environment tests with Docker, run the following command from the project root:\n\n```bash\nyarn test:exports:docker  \n```\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#quick-links","loc":{"lines":{"from":218,"to":233}}}}],["09115f87-37de-43ea-b084-8cf8573c8791",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Contributing to LangChain\n\n👋 Hi there! Thank you for being interested in contributing to LangChain. As an open source project in a rapidly developing field, we are extremely open to contributions, whether it be in the form of a new feature, improved infra, or better documentation.\n\nTo contribute to this project, please follow a [\"fork and pull request\"](https://docs.github.com/en/get-started/quickstart/contributing-to-projects) workflow. Please do not try to push directly to this repo unless you are a maintainer.\n\n## Quick Links[​](#quick-links \"Direct link to Quick Links\")\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#not-sure-what-to-work-on","loc":{"lines":{"from":1,"to":16}}}}],["54a4f2a3-5bb3-431b-ade8-cead72e4d0ad",{"pageContent":"### Not sure what to work on?[​](#not-sure-what-to-work-on \"Direct link to Not sure what to work on?\")\n\nIf you are not sure what to work on, we have a few suggestions:\n\n### New abstractions[​](#new-abstractions \"Direct link to New abstractions\")\n\nWe aim to keep the same APIs between the Python and JS versions of LangChain, where possible. As such we ask that if you have an idea for a new abstraction, please open an issue first to discuss it. This will help us make sure that the API is consistent across both versions. If you're not sure what to work on, we recommend looking at the links above first.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#not-sure-what-to-work-on","loc":{"lines":{"from":16,"to":24}}}}],["26858eae-56cd-4430-b07a-ae132e259b10",{"pageContent":"## Want to add a specific integration?[​](#want-to-add-a-specific-integration \"Direct link to Want to add a specific integration?\")\n\nLangChain supports several different types of integrations with third-party providers and frameworks, including LLM providers (e.g. [OpenAI](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/llms/openai.ts)), vector stores (e.g. [FAISS](https://github.com/ewfian/langchainjs/blob/main/langchain/src/vectorstores/faiss.ts)), document loaders (e.g. [Apify](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/document_loaders/web/apify_dataset.ts)) persistent message history stores (e.g. [Redis](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/stores/message/redis.ts)), and more.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#not-sure-what-to-work-on","loc":{"lines":{"from":24,"to":26}}}}],["99ae28af-04a9-4df8-887d-f814bfc56760",{"pageContent":"We welcome such contributions, but ask that you read our dedicated [integration contribution guide](https://github.com/langchain-ai/langchainjs/blob/main/.github/contributing/INTEGRATIONS.md) for specific details and patterns to consider before opening a pull request.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#not-sure-what-to-work-on","loc":{"lines":{"from":28,"to":28}}}}],["af66d816-b6df-47db-9f0d-ef0158ab7acb",{"pageContent":"### Want to add a feature that's already in Python?[​](#want-to-add-a-feature-thats-already-in-python \"Direct link to Want to add a feature that's already in Python?\")\n\nIf you're interested in contributing a feature that's already in the [LangChain Python repo](https://github.com/langchain-ai/langchain) and you'd like some help getting started, you can try pasting code snippets and classes into the [LangChain Python to JS translator](https://langchain-translator.vercel.app/).\n\nIt's a chat interface wrapping a fine-tuned `gpt-3.5-turbo` instance trained on prior ported features. This allows the model to innately take into account LangChain-specific code style and imports.\n\nIt's an ongoing project, and feedback on runs will be used to improve the [LangSmith dataset](https://smith.langchain.com) for further fine-tuning! Try it out below:\n\n[https://langchain-translator.vercel.app/](https://langchain-translator.vercel.app/)","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#not-sure-what-to-work-on","loc":{"lines":{"from":30,"to":38}}}}],["b3a233cd-b99c-4cf8-8aca-edc2f264d5b8",{"pageContent":"## 🗺️ Contributing Guidelines[​](#️-contributing-guidelines \"Direct link to 🗺️ Contributing Guidelines\")\n\n### 🚩 GitHub Issues[​](#-github-issues \"Direct link to 🚩 GitHub Issues\")\n\nOur [issues](https://github.com/langchain-ai/langchainjs/issues) page contains with bugs, improvements, and feature requests.\n\nIf you start working on an issue, please assign it to yourself.\n\nIf you are adding an issue, please try to keep it focused on a single modular bug/improvement/feature. If the two issues are related, or blocking, please link them rather than keep them as one single one.\n\nWe will try to keep these issues as up to date as possible, though with the rapid rate of develop in this field some may get out of date. If you notice this happening, please just let us know.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#not-sure-what-to-work-on","loc":{"lines":{"from":40,"to":52}}}}],["8aa23b5e-bd4c-4083-85ac-353edece48d3",{"pageContent":"### 🙋 Getting Help[​](#-getting-help \"Direct link to 🙋 Getting Help\")\n\nAlthough we try to have a developer setup to make it as easy as possible for others to contribute (see below) it is possible that some pain point may arise around environment setup, linting, documentation, or other. Should that occur, please contact a maintainer! Not only do we want to help get you unblocked, but we also want to make sure that the process is smooth for future contributors.\n\nIn a similar vein, we do enforce certain linting, formatting, and documentation standards in the codebase. If you are finding these difficult (or even just annoying) to work with, feel free to contact a maintainer for help - we do not want these to get in the way of getting good code into the codebase.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#not-sure-what-to-work-on","loc":{"lines":{"from":52,"to":58}}}}],["d9f621bd-8fd8-4c66-81ce-8271d9d74f11",{"pageContent":"### 🏭 Release process[​](#-release-process \"Direct link to 🏭 Release process\")\n\nAs of now, LangChain has an ad hoc release process: releases are cut with high frequency via by a developer and published to [npm](https://www.npmjs.com/package/langchain).\n\nLangChain follows the [semver](https://semver.org/) versioning standard. However, as pre-1.0 software, even patch releases may contain [non-backwards-compatible changes](https://semver.org/#spec-item-4).\n\nIf your contribution has made its way into a release, we will want to give you credit on Twitter (only if you want though)! If you have a Twitter account you would like us to mention, please let us know in the PR or in another manner.\n\n### 🛠️ Tooling[​](#️-tooling \"Direct link to 🛠️ Tooling\")\n\nThis project uses the following tools, which are worth getting familiar with if you plan to contribute:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#not-sure-what-to-work-on","loc":{"lines":{"from":58,"to":68}}}}],["47b06d18-db1f-4439-b4d8-965fd3690e25",{"pageContent":"## 🚀 Quick Start[​](#-quick-start \"Direct link to 🚀 Quick Start\")\n\nClone this repo, then cd into it:\n\n```bash\ncd langchainjs  \n```\n\nNext, try running the following common tasks:\n\n## ✅ Common Tasks[​](#-common-tasks \"Direct link to ✅ Common Tasks\")\n\nOur goal is to make it as easy as possible for you to contribute to this project. All of the below commands should be run from within the `langchain/` directory unless otherwise noted.\n\n```bash\ncd langchain  \n```\n\n### Setup[​](#setup \"Direct link to Setup\")\n\nTo get started, you will need to install the dependencies for the project. To do so, run:\n\n```bash\nyarn  \n```\n\n### Linting[​](#linting \"Direct link to Linting\")\n\nWe use [eslint](https://eslint.org/) to enforce standard lint rules. To run the linter, run:\n\n```bash\nyarn lint  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#not-sure-what-to-work-on","loc":{"lines":{"from":70,"to":104}}}}],["8d2c1cd1-4896-4f4f-9c3d-bb50446bb764",{"pageContent":"### Formatting[​](#formatting \"Direct link to Formatting\")\n\nWe use [prettier](https://prettier.io) to enforce code formatting style. To run the formatter, run:\n\n```bash\nyarn format  \n```\n\nTo just check for formatting differences, without fixing them, run:\n\n```bash\nyarn format:check  \n```\n\n### Testing[​](#testing \"Direct link to Testing\")\n\nIn general, tests should be added within a `tests/` folder alongside the modules they are testing.\n\n**Unit tests** cover modular logic that does not require calls to outside APIs.\n\nIf you add new logic, please add a unit test. Unit tests should be called `*.test.ts`.\n\nTo run only unit tests, run:\n\n```bash\nyarn test  \n```\n\n##","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#not-sure-what-to-work-on","loc":{"lines":{"from":104,"to":132}}}}],["a89c858e-dffc-49c9-8ba7-0e26e063cbf4",{"pageContent":"#### Running a single test[​](#running-a-single-test \"Direct link to Running a single test\")\n\nTo run a single test, run:\n\n```bash\nyarn test:single /path/to/yourtest.test.ts  \n```\n\nThis is useful for developing individual features.\n\n**Integration tests** cover logic that requires making calls to outside APIs (often integration with other services).\n\nIf you add support for a new external API, please add a new integration test. Integration tests should be called `*.int.test.ts`.\n\nNote that most integration tests require credentials or other setup. You will likely need to set up a `langchain/.env` file like the example [here](https://github.com/langchain-ai/langchainjs/blob/main/langchain/.env.example).\n\nWe generally recommend only running integration tests with `yarn test:single`, but if you want to run all integration tests, run:\n\n```bash\nyarn test:integration  \n```\n\n### Building[​](#building \"Direct link to Building\")\n\nTo build the project, run:\n\n```bash\nyarn build  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#not-sure-what-to-work-on","loc":{"lines":{"from":132,"to":162}}}}],["8c5f1334-099c-4e26-885b-efe0b855fb71",{"pageContent":"### Adding an Entrypoint[​](#adding-an-entrypoint \"Direct link to Adding an Entrypoint\")\n\nLangChain exposes multiple subpaths the user can import from, e.g.\n\n```ts\nimport { OpenAI } from \"langchain/llms/openai\";  \n```\n\nWe call these subpaths \"entrypoints\". In general, you should create a new entrypoint if you are adding a new integration with a 3rd party library. If you're adding self-contained functionality without any external dependencies, you can add it to an existing entrypoint.\n\nIn order to declare a new entrypoint that users can import from, you should edit the `langchain/scripts/create-entrypoints.js` script. To add an entrypoint `tools` that imports from `tools/index.ts` you'd add the following to the `entrypoints` variable:\n\n```ts\nconst entrypoints = {  \n  // ...  \n  tools: \"tools/index\",  \n};  \n```\n\nThis will make sure the entrypoint is included in the published package, and in generated documentation.\n\n## Documentation[​](#documentation \"Direct link to Documentation\")\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#not-sure-what-to-work-on","loc":{"lines":{"from":162,"to":185}}}}],["5d12498e-8479-4059-a928-726cb78ce587",{"pageContent":"### Contribute Documentation[​](#contribute-documentation \"Direct link to Contribute Documentation\")\n\nDocs are largely autogenerated by [TypeDoc](https://typedoc.org/) from the code.\n\nFor that reason, we ask that you add good documentation to all classes and methods.\n\nSimilar to linting, we recognize documentation can be annoying. If you do not want to do it, please contact a project maintainer, and they can help you with it. We do not want this to be a blocker for good code getting contributed.\n\nDocumentation and the skeleton lives under the `docs/` folder. Example code is imported from under the `examples/` folder.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#not-sure-what-to-work-on","loc":{"lines":{"from":185,"to":195}}}}],["3879eef3-f558-405a-a0e8-ea78ce3a5485",{"pageContent":"### Running examples[​](#running-examples \"Direct link to Running examples\")\n\nIf you add a new major piece of functionality, it is helpful to add an example to showcase how to use it. Most of our users find examples to be the most helpful kind of documentation.\n\nExamples can be added in the `examples/src` directory, e.g. `examples/src/path/to/example` and should export a `run` function. This example can then be invoked with `yarn example path/to/example` at the top level of the repo.\n\nTo run examples that require an environment variable, you'll need to add a `.env` file under `examples/.env`\n\n### Build Documentation Locally[​](#build-documentation-locally \"Direct link to Build Documentation Locally\")\n\nTo generate and view the documentation locally, change to the project root and run `yarn` to ensure dependencies get installed in both the `docs/` and `examples/` workspaces:\n\n```bash\ncd ..  \nyarn  \n```\n\nThen run:\n\n```bash\nyarn docs  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#not-sure-what-to-work-on","loc":{"lines":{"from":195,"to":216}}}}],["c47b2dc9-55ce-439a-b183-8406a6ff654b",{"pageContent":"## Advanced[​](#advanced \"Direct link to Advanced\")\n\n**Environment tests** test whether LangChain works across different JS environments, including Node.js (both ESM and CJS), Edge environments (eg. Cloudflare Workers), and browsers (using Webpack).\n\nTo run the environment tests with Docker, run the following command from the project root:\n\n```bash\nyarn test:exports:docker  \n```\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#not-sure-what-to-work-on","loc":{"lines":{"from":218,"to":233}}}}],["cba98c80-116b-4d6b-9d73-ea0939b9bf28",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Contributing to LangChain\n\n👋 Hi there! Thank you for being interested in contributing to LangChain. As an open source project in a rapidly developing field, we are extremely open to contributions, whether it be in the form of a new feature, improved infra, or better documentation.\n\nTo contribute to this project, please follow a [\"fork and pull request\"](https://docs.github.com/en/get-started/quickstart/contributing-to-projects) workflow. Please do not try to push directly to this repo unless you are a maintainer.\n\n## Quick Links[​](#quick-links \"Direct link to Quick Links\")\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#new-abstractions","loc":{"lines":{"from":1,"to":16}}}}],["44652d83-b1ec-4371-9acf-1de20462fc33",{"pageContent":"### Not sure what to work on?[​](#not-sure-what-to-work-on \"Direct link to Not sure what to work on?\")\n\nIf you are not sure what to work on, we have a few suggestions:\n\n### New abstractions[​](#new-abstractions \"Direct link to New abstractions\")\n\nWe aim to keep the same APIs between the Python and JS versions of LangChain, where possible. As such we ask that if you have an idea for a new abstraction, please open an issue first to discuss it. This will help us make sure that the API is consistent across both versions. If you're not sure what to work on, we recommend looking at the links above first.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#new-abstractions","loc":{"lines":{"from":16,"to":24}}}}],["3754ab25-6577-40ac-9ab5-41e1a45b2056",{"pageContent":"## Want to add a specific integration?[​](#want-to-add-a-specific-integration \"Direct link to Want to add a specific integration?\")\n\nLangChain supports several different types of integrations with third-party providers and frameworks, including LLM providers (e.g. [OpenAI](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/llms/openai.ts)), vector stores (e.g. [FAISS](https://github.com/ewfian/langchainjs/blob/main/langchain/src/vectorstores/faiss.ts)), document loaders (e.g. [Apify](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/document_loaders/web/apify_dataset.ts)) persistent message history stores (e.g. [Redis](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/stores/message/redis.ts)), and more.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#new-abstractions","loc":{"lines":{"from":24,"to":26}}}}],["1fc59bd8-d9a9-490a-a93b-f599ef8c9ac8",{"pageContent":"We welcome such contributions, but ask that you read our dedicated [integration contribution guide](https://github.com/langchain-ai/langchainjs/blob/main/.github/contributing/INTEGRATIONS.md) for specific details and patterns to consider before opening a pull request.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#new-abstractions","loc":{"lines":{"from":28,"to":28}}}}],["254f9b22-0776-48e8-8e58-4468a056fff1",{"pageContent":"### Want to add a feature that's already in Python?[​](#want-to-add-a-feature-thats-already-in-python \"Direct link to Want to add a feature that's already in Python?\")\n\nIf you're interested in contributing a feature that's already in the [LangChain Python repo](https://github.com/langchain-ai/langchain) and you'd like some help getting started, you can try pasting code snippets and classes into the [LangChain Python to JS translator](https://langchain-translator.vercel.app/).\n\nIt's a chat interface wrapping a fine-tuned `gpt-3.5-turbo` instance trained on prior ported features. This allows the model to innately take into account LangChain-specific code style and imports.\n\nIt's an ongoing project, and feedback on runs will be used to improve the [LangSmith dataset](https://smith.langchain.com) for further fine-tuning! Try it out below:\n\n[https://langchain-translator.vercel.app/](https://langchain-translator.vercel.app/)","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#new-abstractions","loc":{"lines":{"from":30,"to":38}}}}],["148afbe7-d737-4257-9dae-e7b34997db8b",{"pageContent":"## 🗺️ Contributing Guidelines[​](#️-contributing-guidelines \"Direct link to 🗺️ Contributing Guidelines\")\n\n### 🚩 GitHub Issues[​](#-github-issues \"Direct link to 🚩 GitHub Issues\")\n\nOur [issues](https://github.com/langchain-ai/langchainjs/issues) page contains with bugs, improvements, and feature requests.\n\nIf you start working on an issue, please assign it to yourself.\n\nIf you are adding an issue, please try to keep it focused on a single modular bug/improvement/feature. If the two issues are related, or blocking, please link them rather than keep them as one single one.\n\nWe will try to keep these issues as up to date as possible, though with the rapid rate of develop in this field some may get out of date. If you notice this happening, please just let us know.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#new-abstractions","loc":{"lines":{"from":40,"to":52}}}}],["77559cb7-a258-4692-9844-b4132e99cf57",{"pageContent":"### 🙋 Getting Help[​](#-getting-help \"Direct link to 🙋 Getting Help\")\n\nAlthough we try to have a developer setup to make it as easy as possible for others to contribute (see below) it is possible that some pain point may arise around environment setup, linting, documentation, or other. Should that occur, please contact a maintainer! Not only do we want to help get you unblocked, but we also want to make sure that the process is smooth for future contributors.\n\nIn a similar vein, we do enforce certain linting, formatting, and documentation standards in the codebase. If you are finding these difficult (or even just annoying) to work with, feel free to contact a maintainer for help - we do not want these to get in the way of getting good code into the codebase.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#new-abstractions","loc":{"lines":{"from":52,"to":58}}}}],["b7576fdd-725b-475c-b70c-9c4928e6ad13",{"pageContent":"### 🏭 Release process[​](#-release-process \"Direct link to 🏭 Release process\")\n\nAs of now, LangChain has an ad hoc release process: releases are cut with high frequency via by a developer and published to [npm](https://www.npmjs.com/package/langchain).\n\nLangChain follows the [semver](https://semver.org/) versioning standard. However, as pre-1.0 software, even patch releases may contain [non-backwards-compatible changes](https://semver.org/#spec-item-4).\n\nIf your contribution has made its way into a release, we will want to give you credit on Twitter (only if you want though)! If you have a Twitter account you would like us to mention, please let us know in the PR or in another manner.\n\n### 🛠️ Tooling[​](#️-tooling \"Direct link to 🛠️ Tooling\")\n\nThis project uses the following tools, which are worth getting familiar with if you plan to contribute:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#new-abstractions","loc":{"lines":{"from":58,"to":68}}}}],["4099bf62-be4e-44aa-b020-4d52913048ac",{"pageContent":"## 🚀 Quick Start[​](#-quick-start \"Direct link to 🚀 Quick Start\")\n\nClone this repo, then cd into it:\n\n```bash\ncd langchainjs  \n```\n\nNext, try running the following common tasks:\n\n## ✅ Common Tasks[​](#-common-tasks \"Direct link to ✅ Common Tasks\")\n\nOur goal is to make it as easy as possible for you to contribute to this project. All of the below commands should be run from within the `langchain/` directory unless otherwise noted.\n\n```bash\ncd langchain  \n```\n\n### Setup[​](#setup \"Direct link to Setup\")\n\nTo get started, you will need to install the dependencies for the project. To do so, run:\n\n```bash\nyarn  \n```\n\n### Linting[​](#linting \"Direct link to Linting\")\n\nWe use [eslint](https://eslint.org/) to enforce standard lint rules. To run the linter, run:\n\n```bash\nyarn lint  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#new-abstractions","loc":{"lines":{"from":70,"to":104}}}}],["b6a9f085-07d8-4f14-b312-3e8b85d460f1",{"pageContent":"### Formatting[​](#formatting \"Direct link to Formatting\")\n\nWe use [prettier](https://prettier.io) to enforce code formatting style. To run the formatter, run:\n\n```bash\nyarn format  \n```\n\nTo just check for formatting differences, without fixing them, run:\n\n```bash\nyarn format:check  \n```\n\n### Testing[​](#testing \"Direct link to Testing\")\n\nIn general, tests should be added within a `tests/` folder alongside the modules they are testing.\n\n**Unit tests** cover modular logic that does not require calls to outside APIs.\n\nIf you add new logic, please add a unit test. Unit tests should be called `*.test.ts`.\n\nTo run only unit tests, run:\n\n```bash\nyarn test  \n```\n\n##","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#new-abstractions","loc":{"lines":{"from":104,"to":132}}}}],["af51bc34-db64-4994-85fa-65f44a31ecd0",{"pageContent":"#### Running a single test[​](#running-a-single-test \"Direct link to Running a single test\")\n\nTo run a single test, run:\n\n```bash\nyarn test:single /path/to/yourtest.test.ts  \n```\n\nThis is useful for developing individual features.\n\n**Integration tests** cover logic that requires making calls to outside APIs (often integration with other services).\n\nIf you add support for a new external API, please add a new integration test. Integration tests should be called `*.int.test.ts`.\n\nNote that most integration tests require credentials or other setup. You will likely need to set up a `langchain/.env` file like the example [here](https://github.com/langchain-ai/langchainjs/blob/main/langchain/.env.example).\n\nWe generally recommend only running integration tests with `yarn test:single`, but if you want to run all integration tests, run:\n\n```bash\nyarn test:integration  \n```\n\n### Building[​](#building \"Direct link to Building\")\n\nTo build the project, run:\n\n```bash\nyarn build  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#new-abstractions","loc":{"lines":{"from":132,"to":162}}}}],["ed336ab8-7b4e-4371-ba43-d4aeffc04b2b",{"pageContent":"### Adding an Entrypoint[​](#adding-an-entrypoint \"Direct link to Adding an Entrypoint\")\n\nLangChain exposes multiple subpaths the user can import from, e.g.\n\n```ts\nimport { OpenAI } from \"langchain/llms/openai\";  \n```\n\nWe call these subpaths \"entrypoints\". In general, you should create a new entrypoint if you are adding a new integration with a 3rd party library. If you're adding self-contained functionality without any external dependencies, you can add it to an existing entrypoint.\n\nIn order to declare a new entrypoint that users can import from, you should edit the `langchain/scripts/create-entrypoints.js` script. To add an entrypoint `tools` that imports from `tools/index.ts` you'd add the following to the `entrypoints` variable:\n\n```ts\nconst entrypoints = {  \n  // ...  \n  tools: \"tools/index\",  \n};  \n```\n\nThis will make sure the entrypoint is included in the published package, and in generated documentation.\n\n## Documentation[​](#documentation \"Direct link to Documentation\")\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#new-abstractions","loc":{"lines":{"from":162,"to":185}}}}],["a4ba1b53-c53f-4563-816e-ca4ced43c49a",{"pageContent":"### Contribute Documentation[​](#contribute-documentation \"Direct link to Contribute Documentation\")\n\nDocs are largely autogenerated by [TypeDoc](https://typedoc.org/) from the code.\n\nFor that reason, we ask that you add good documentation to all classes and methods.\n\nSimilar to linting, we recognize documentation can be annoying. If you do not want to do it, please contact a project maintainer, and they can help you with it. We do not want this to be a blocker for good code getting contributed.\n\nDocumentation and the skeleton lives under the `docs/` folder. Example code is imported from under the `examples/` folder.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#new-abstractions","loc":{"lines":{"from":185,"to":195}}}}],["44bdb3ea-1af9-4aed-b892-10c380be82e4",{"pageContent":"### Running examples[​](#running-examples \"Direct link to Running examples\")\n\nIf you add a new major piece of functionality, it is helpful to add an example to showcase how to use it. Most of our users find examples to be the most helpful kind of documentation.\n\nExamples can be added in the `examples/src` directory, e.g. `examples/src/path/to/example` and should export a `run` function. This example can then be invoked with `yarn example path/to/example` at the top level of the repo.\n\nTo run examples that require an environment variable, you'll need to add a `.env` file under `examples/.env`\n\n### Build Documentation Locally[​](#build-documentation-locally \"Direct link to Build Documentation Locally\")\n\nTo generate and view the documentation locally, change to the project root and run `yarn` to ensure dependencies get installed in both the `docs/` and `examples/` workspaces:\n\n```bash\ncd ..  \nyarn  \n```\n\nThen run:\n\n```bash\nyarn docs  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#new-abstractions","loc":{"lines":{"from":195,"to":216}}}}],["041e0c92-c6d6-4459-92de-17b1d0c1bf78",{"pageContent":"## Advanced[​](#advanced \"Direct link to Advanced\")\n\n**Environment tests** test whether LangChain works across different JS environments, including Node.js (both ESM and CJS), Edge environments (eg. Cloudflare Workers), and browsers (using Webpack).\n\nTo run the environment tests with Docker, run the following command from the project root:\n\n```bash\nyarn test:exports:docker  \n```\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#new-abstractions","loc":{"lines":{"from":218,"to":233}}}}],["29d9664a-4508-4883-bdf7-60d14fe50dd2",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Contributing to LangChain\n\n👋 Hi there! Thank you for being interested in contributing to LangChain. As an open source project in a rapidly developing field, we are extremely open to contributions, whether it be in the form of a new feature, improved infra, or better documentation.\n\nTo contribute to this project, please follow a [\"fork and pull request\"](https://docs.github.com/en/get-started/quickstart/contributing-to-projects) workflow. Please do not try to push directly to this repo unless you are a maintainer.\n\n## Quick Links[​](#quick-links \"Direct link to Quick Links\")\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#want-to-add-a-specific-integration","loc":{"lines":{"from":1,"to":16}}}}],["da1538aa-300c-40d3-90e0-144f45858b50",{"pageContent":"### Not sure what to work on?[​](#not-sure-what-to-work-on \"Direct link to Not sure what to work on?\")\n\nIf you are not sure what to work on, we have a few suggestions:\n\n### New abstractions[​](#new-abstractions \"Direct link to New abstractions\")\n\nWe aim to keep the same APIs between the Python and JS versions of LangChain, where possible. As such we ask that if you have an idea for a new abstraction, please open an issue first to discuss it. This will help us make sure that the API is consistent across both versions. If you're not sure what to work on, we recommend looking at the links above first.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#want-to-add-a-specific-integration","loc":{"lines":{"from":16,"to":24}}}}],["dd519148-6397-45e8-938e-074ed2574a1b",{"pageContent":"## Want to add a specific integration?[​](#want-to-add-a-specific-integration \"Direct link to Want to add a specific integration?\")\n\nLangChain supports several different types of integrations with third-party providers and frameworks, including LLM providers (e.g. [OpenAI](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/llms/openai.ts)), vector stores (e.g. [FAISS](https://github.com/ewfian/langchainjs/blob/main/langchain/src/vectorstores/faiss.ts)), document loaders (e.g. [Apify](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/document_loaders/web/apify_dataset.ts)) persistent message history stores (e.g. [Redis](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/stores/message/redis.ts)), and more.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#want-to-add-a-specific-integration","loc":{"lines":{"from":24,"to":26}}}}],["d23d0fdc-c74a-4d27-9c3c-11c36c0ead3b",{"pageContent":"We welcome such contributions, but ask that you read our dedicated [integration contribution guide](https://github.com/langchain-ai/langchainjs/blob/main/.github/contributing/INTEGRATIONS.md) for specific details and patterns to consider before opening a pull request.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#want-to-add-a-specific-integration","loc":{"lines":{"from":28,"to":28}}}}],["d7ff2cb6-d6eb-4b37-9163-1068eac2ed42",{"pageContent":"### Want to add a feature that's already in Python?[​](#want-to-add-a-feature-thats-already-in-python \"Direct link to Want to add a feature that's already in Python?\")\n\nIf you're interested in contributing a feature that's already in the [LangChain Python repo](https://github.com/langchain-ai/langchain) and you'd like some help getting started, you can try pasting code snippets and classes into the [LangChain Python to JS translator](https://langchain-translator.vercel.app/).\n\nIt's a chat interface wrapping a fine-tuned `gpt-3.5-turbo` instance trained on prior ported features. This allows the model to innately take into account LangChain-specific code style and imports.\n\nIt's an ongoing project, and feedback on runs will be used to improve the [LangSmith dataset](https://smith.langchain.com) for further fine-tuning! Try it out below:\n\n[https://langchain-translator.vercel.app/](https://langchain-translator.vercel.app/)","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#want-to-add-a-specific-integration","loc":{"lines":{"from":30,"to":38}}}}],["843fbb48-66c1-4021-9f5c-442b024bdd57",{"pageContent":"## 🗺️ Contributing Guidelines[​](#️-contributing-guidelines \"Direct link to 🗺️ Contributing Guidelines\")\n\n### 🚩 GitHub Issues[​](#-github-issues \"Direct link to 🚩 GitHub Issues\")\n\nOur [issues](https://github.com/langchain-ai/langchainjs/issues) page contains with bugs, improvements, and feature requests.\n\nIf you start working on an issue, please assign it to yourself.\n\nIf you are adding an issue, please try to keep it focused on a single modular bug/improvement/feature. If the two issues are related, or blocking, please link them rather than keep them as one single one.\n\nWe will try to keep these issues as up to date as possible, though with the rapid rate of develop in this field some may get out of date. If you notice this happening, please just let us know.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#want-to-add-a-specific-integration","loc":{"lines":{"from":40,"to":52}}}}],["e4b8d864-25fa-434c-8c83-32690e077964",{"pageContent":"### 🙋 Getting Help[​](#-getting-help \"Direct link to 🙋 Getting Help\")\n\nAlthough we try to have a developer setup to make it as easy as possible for others to contribute (see below) it is possible that some pain point may arise around environment setup, linting, documentation, or other. Should that occur, please contact a maintainer! Not only do we want to help get you unblocked, but we also want to make sure that the process is smooth for future contributors.\n\nIn a similar vein, we do enforce certain linting, formatting, and documentation standards in the codebase. If you are finding these difficult (or even just annoying) to work with, feel free to contact a maintainer for help - we do not want these to get in the way of getting good code into the codebase.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#want-to-add-a-specific-integration","loc":{"lines":{"from":52,"to":58}}}}],["cd940428-46ad-4d74-b554-10313eb22f81",{"pageContent":"### 🏭 Release process[​](#-release-process \"Direct link to 🏭 Release process\")\n\nAs of now, LangChain has an ad hoc release process: releases are cut with high frequency via by a developer and published to [npm](https://www.npmjs.com/package/langchain).\n\nLangChain follows the [semver](https://semver.org/) versioning standard. However, as pre-1.0 software, even patch releases may contain [non-backwards-compatible changes](https://semver.org/#spec-item-4).\n\nIf your contribution has made its way into a release, we will want to give you credit on Twitter (only if you want though)! If you have a Twitter account you would like us to mention, please let us know in the PR or in another manner.\n\n### 🛠️ Tooling[​](#️-tooling \"Direct link to 🛠️ Tooling\")\n\nThis project uses the following tools, which are worth getting familiar with if you plan to contribute:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#want-to-add-a-specific-integration","loc":{"lines":{"from":58,"to":68}}}}],["a5188f7f-e15f-4d18-859e-74b2f63f8ad1",{"pageContent":"## 🚀 Quick Start[​](#-quick-start \"Direct link to 🚀 Quick Start\")\n\nClone this repo, then cd into it:\n\n```bash\ncd langchainjs  \n```\n\nNext, try running the following common tasks:\n\n## ✅ Common Tasks[​](#-common-tasks \"Direct link to ✅ Common Tasks\")\n\nOur goal is to make it as easy as possible for you to contribute to this project. All of the below commands should be run from within the `langchain/` directory unless otherwise noted.\n\n```bash\ncd langchain  \n```\n\n### Setup[​](#setup \"Direct link to Setup\")\n\nTo get started, you will need to install the dependencies for the project. To do so, run:\n\n```bash\nyarn  \n```\n\n### Linting[​](#linting \"Direct link to Linting\")\n\nWe use [eslint](https://eslint.org/) to enforce standard lint rules. To run the linter, run:\n\n```bash\nyarn lint  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#want-to-add-a-specific-integration","loc":{"lines":{"from":70,"to":104}}}}],["6f893cae-d62d-4588-9de8-cdc6ad61d942",{"pageContent":"### Formatting[​](#formatting \"Direct link to Formatting\")\n\nWe use [prettier](https://prettier.io) to enforce code formatting style. To run the formatter, run:\n\n```bash\nyarn format  \n```\n\nTo just check for formatting differences, without fixing them, run:\n\n```bash\nyarn format:check  \n```\n\n### Testing[​](#testing \"Direct link to Testing\")\n\nIn general, tests should be added within a `tests/` folder alongside the modules they are testing.\n\n**Unit tests** cover modular logic that does not require calls to outside APIs.\n\nIf you add new logic, please add a unit test. Unit tests should be called `*.test.ts`.\n\nTo run only unit tests, run:\n\n```bash\nyarn test  \n```\n\n##","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#want-to-add-a-specific-integration","loc":{"lines":{"from":104,"to":132}}}}],["97e754e2-024e-474a-ad6a-0ded6f9e6de8",{"pageContent":"#### Running a single test[​](#running-a-single-test \"Direct link to Running a single test\")\n\nTo run a single test, run:\n\n```bash\nyarn test:single /path/to/yourtest.test.ts  \n```\n\nThis is useful for developing individual features.\n\n**Integration tests** cover logic that requires making calls to outside APIs (often integration with other services).\n\nIf you add support for a new external API, please add a new integration test. Integration tests should be called `*.int.test.ts`.\n\nNote that most integration tests require credentials or other setup. You will likely need to set up a `langchain/.env` file like the example [here](https://github.com/langchain-ai/langchainjs/blob/main/langchain/.env.example).\n\nWe generally recommend only running integration tests with `yarn test:single`, but if you want to run all integration tests, run:\n\n```bash\nyarn test:integration  \n```\n\n### Building[​](#building \"Direct link to Building\")\n\nTo build the project, run:\n\n```bash\nyarn build  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#want-to-add-a-specific-integration","loc":{"lines":{"from":132,"to":162}}}}],["db2e2583-27d2-4967-950f-ceefd9e6e2b3",{"pageContent":"### Adding an Entrypoint[​](#adding-an-entrypoint \"Direct link to Adding an Entrypoint\")\n\nLangChain exposes multiple subpaths the user can import from, e.g.\n\n```ts\nimport { OpenAI } from \"langchain/llms/openai\";  \n```\n\nWe call these subpaths \"entrypoints\". In general, you should create a new entrypoint if you are adding a new integration with a 3rd party library. If you're adding self-contained functionality without any external dependencies, you can add it to an existing entrypoint.\n\nIn order to declare a new entrypoint that users can import from, you should edit the `langchain/scripts/create-entrypoints.js` script. To add an entrypoint `tools` that imports from `tools/index.ts` you'd add the following to the `entrypoints` variable:\n\n```ts\nconst entrypoints = {  \n  // ...  \n  tools: \"tools/index\",  \n};  \n```\n\nThis will make sure the entrypoint is included in the published package, and in generated documentation.\n\n## Documentation[​](#documentation \"Direct link to Documentation\")\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#want-to-add-a-specific-integration","loc":{"lines":{"from":162,"to":185}}}}],["72f3ee5e-021f-43a1-96cb-24cdd0dfc920",{"pageContent":"### Contribute Documentation[​](#contribute-documentation \"Direct link to Contribute Documentation\")\n\nDocs are largely autogenerated by [TypeDoc](https://typedoc.org/) from the code.\n\nFor that reason, we ask that you add good documentation to all classes and methods.\n\nSimilar to linting, we recognize documentation can be annoying. If you do not want to do it, please contact a project maintainer, and they can help you with it. We do not want this to be a blocker for good code getting contributed.\n\nDocumentation and the skeleton lives under the `docs/` folder. Example code is imported from under the `examples/` folder.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#want-to-add-a-specific-integration","loc":{"lines":{"from":185,"to":195}}}}],["bb5ea23b-9d6b-4ec5-a534-7ef95fa31808",{"pageContent":"### Running examples[​](#running-examples \"Direct link to Running examples\")\n\nIf you add a new major piece of functionality, it is helpful to add an example to showcase how to use it. Most of our users find examples to be the most helpful kind of documentation.\n\nExamples can be added in the `examples/src` directory, e.g. `examples/src/path/to/example` and should export a `run` function. This example can then be invoked with `yarn example path/to/example` at the top level of the repo.\n\nTo run examples that require an environment variable, you'll need to add a `.env` file under `examples/.env`\n\n### Build Documentation Locally[​](#build-documentation-locally \"Direct link to Build Documentation Locally\")\n\nTo generate and view the documentation locally, change to the project root and run `yarn` to ensure dependencies get installed in both the `docs/` and `examples/` workspaces:\n\n```bash\ncd ..  \nyarn  \n```\n\nThen run:\n\n```bash\nyarn docs  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#want-to-add-a-specific-integration","loc":{"lines":{"from":195,"to":216}}}}],["20198733-3cf8-4d48-9c3f-e3f88eb18643",{"pageContent":"## Advanced[​](#advanced \"Direct link to Advanced\")\n\n**Environment tests** test whether LangChain works across different JS environments, including Node.js (both ESM and CJS), Edge environments (eg. Cloudflare Workers), and browsers (using Webpack).\n\nTo run the environment tests with Docker, run the following command from the project root:\n\n```bash\nyarn test:exports:docker  \n```\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#want-to-add-a-specific-integration","loc":{"lines":{"from":218,"to":233}}}}],["90a737db-7a4a-43f3-947c-cf4e2d53a616",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Contributing to LangChain\n\n👋 Hi there! Thank you for being interested in contributing to LangChain. As an open source project in a rapidly developing field, we are extremely open to contributions, whether it be in the form of a new feature, improved infra, or better documentation.\n\nTo contribute to this project, please follow a [\"fork and pull request\"](https://docs.github.com/en/get-started/quickstart/contributing-to-projects) workflow. Please do not try to push directly to this repo unless you are a maintainer.\n\n## Quick Links[​](#quick-links \"Direct link to Quick Links\")\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#want-to-add-a-feature-thats-already-in-python","loc":{"lines":{"from":1,"to":16}}}}],["e626f1db-5d2e-4631-bd79-10ba1dcda7ee",{"pageContent":"### Not sure what to work on?[​](#not-sure-what-to-work-on \"Direct link to Not sure what to work on?\")\n\nIf you are not sure what to work on, we have a few suggestions:\n\n### New abstractions[​](#new-abstractions \"Direct link to New abstractions\")\n\nWe aim to keep the same APIs between the Python and JS versions of LangChain, where possible. As such we ask that if you have an idea for a new abstraction, please open an issue first to discuss it. This will help us make sure that the API is consistent across both versions. If you're not sure what to work on, we recommend looking at the links above first.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#want-to-add-a-feature-thats-already-in-python","loc":{"lines":{"from":16,"to":24}}}}],["9991fdbb-0d7f-417c-b5c0-31f4d71ee86a",{"pageContent":"## Want to add a specific integration?[​](#want-to-add-a-specific-integration \"Direct link to Want to add a specific integration?\")\n\nLangChain supports several different types of integrations with third-party providers and frameworks, including LLM providers (e.g. [OpenAI](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/llms/openai.ts)), vector stores (e.g. [FAISS](https://github.com/ewfian/langchainjs/blob/main/langchain/src/vectorstores/faiss.ts)), document loaders (e.g. [Apify](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/document_loaders/web/apify_dataset.ts)) persistent message history stores (e.g. [Redis](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/stores/message/redis.ts)), and more.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#want-to-add-a-feature-thats-already-in-python","loc":{"lines":{"from":24,"to":26}}}}],["be92b41f-c66a-40c2-8d27-c6efc7b98a3d",{"pageContent":"We welcome such contributions, but ask that you read our dedicated [integration contribution guide](https://github.com/langchain-ai/langchainjs/blob/main/.github/contributing/INTEGRATIONS.md) for specific details and patterns to consider before opening a pull request.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#want-to-add-a-feature-thats-already-in-python","loc":{"lines":{"from":28,"to":28}}}}],["261363ca-953f-475f-88ee-c8f2daecdee7",{"pageContent":"### Want to add a feature that's already in Python?[​](#want-to-add-a-feature-thats-already-in-python \"Direct link to Want to add a feature that's already in Python?\")\n\nIf you're interested in contributing a feature that's already in the [LangChain Python repo](https://github.com/langchain-ai/langchain) and you'd like some help getting started, you can try pasting code snippets and classes into the [LangChain Python to JS translator](https://langchain-translator.vercel.app/).\n\nIt's a chat interface wrapping a fine-tuned `gpt-3.5-turbo` instance trained on prior ported features. This allows the model to innately take into account LangChain-specific code style and imports.\n\nIt's an ongoing project, and feedback on runs will be used to improve the [LangSmith dataset](https://smith.langchain.com) for further fine-tuning! Try it out below:\n\n[https://langchain-translator.vercel.app/](https://langchain-translator.vercel.app/)","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#want-to-add-a-feature-thats-already-in-python","loc":{"lines":{"from":30,"to":38}}}}],["eddcb1aa-ddc5-4938-9d77-5e1569a10ce1",{"pageContent":"## 🗺️ Contributing Guidelines[​](#️-contributing-guidelines \"Direct link to 🗺️ Contributing Guidelines\")\n\n### 🚩 GitHub Issues[​](#-github-issues \"Direct link to 🚩 GitHub Issues\")\n\nOur [issues](https://github.com/langchain-ai/langchainjs/issues) page contains with bugs, improvements, and feature requests.\n\nIf you start working on an issue, please assign it to yourself.\n\nIf you are adding an issue, please try to keep it focused on a single modular bug/improvement/feature. If the two issues are related, or blocking, please link them rather than keep them as one single one.\n\nWe will try to keep these issues as up to date as possible, though with the rapid rate of develop in this field some may get out of date. If you notice this happening, please just let us know.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#want-to-add-a-feature-thats-already-in-python","loc":{"lines":{"from":40,"to":52}}}}],["4aca2dfe-b4a2-4f30-86a7-67314057fc4c",{"pageContent":"### 🙋 Getting Help[​](#-getting-help \"Direct link to 🙋 Getting Help\")\n\nAlthough we try to have a developer setup to make it as easy as possible for others to contribute (see below) it is possible that some pain point may arise around environment setup, linting, documentation, or other. Should that occur, please contact a maintainer! Not only do we want to help get you unblocked, but we also want to make sure that the process is smooth for future contributors.\n\nIn a similar vein, we do enforce certain linting, formatting, and documentation standards in the codebase. If you are finding these difficult (or even just annoying) to work with, feel free to contact a maintainer for help - we do not want these to get in the way of getting good code into the codebase.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#want-to-add-a-feature-thats-already-in-python","loc":{"lines":{"from":52,"to":58}}}}],["fd860461-53d5-43ab-adf1-ab5ca5b0d6db",{"pageContent":"### 🏭 Release process[​](#-release-process \"Direct link to 🏭 Release process\")\n\nAs of now, LangChain has an ad hoc release process: releases are cut with high frequency via by a developer and published to [npm](https://www.npmjs.com/package/langchain).\n\nLangChain follows the [semver](https://semver.org/) versioning standard. However, as pre-1.0 software, even patch releases may contain [non-backwards-compatible changes](https://semver.org/#spec-item-4).\n\nIf your contribution has made its way into a release, we will want to give you credit on Twitter (only if you want though)! If you have a Twitter account you would like us to mention, please let us know in the PR or in another manner.\n\n### 🛠️ Tooling[​](#️-tooling \"Direct link to 🛠️ Tooling\")\n\nThis project uses the following tools, which are worth getting familiar with if you plan to contribute:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#want-to-add-a-feature-thats-already-in-python","loc":{"lines":{"from":58,"to":68}}}}],["c72cc9cf-5bce-4518-b1b2-a9a798537862",{"pageContent":"## 🚀 Quick Start[​](#-quick-start \"Direct link to 🚀 Quick Start\")\n\nClone this repo, then cd into it:\n\n```bash\ncd langchainjs  \n```\n\nNext, try running the following common tasks:\n\n## ✅ Common Tasks[​](#-common-tasks \"Direct link to ✅ Common Tasks\")\n\nOur goal is to make it as easy as possible for you to contribute to this project. All of the below commands should be run from within the `langchain/` directory unless otherwise noted.\n\n```bash\ncd langchain  \n```\n\n### Setup[​](#setup \"Direct link to Setup\")\n\nTo get started, you will need to install the dependencies for the project. To do so, run:\n\n```bash\nyarn  \n```\n\n### Linting[​](#linting \"Direct link to Linting\")\n\nWe use [eslint](https://eslint.org/) to enforce standard lint rules. To run the linter, run:\n\n```bash\nyarn lint  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#want-to-add-a-feature-thats-already-in-python","loc":{"lines":{"from":70,"to":104}}}}],["e036ecf2-9a0c-4db2-abfc-32af5aa46b79",{"pageContent":"### Formatting[​](#formatting \"Direct link to Formatting\")\n\nWe use [prettier](https://prettier.io) to enforce code formatting style. To run the formatter, run:\n\n```bash\nyarn format  \n```\n\nTo just check for formatting differences, without fixing them, run:\n\n```bash\nyarn format:check  \n```\n\n### Testing[​](#testing \"Direct link to Testing\")\n\nIn general, tests should be added within a `tests/` folder alongside the modules they are testing.\n\n**Unit tests** cover modular logic that does not require calls to outside APIs.\n\nIf you add new logic, please add a unit test. Unit tests should be called `*.test.ts`.\n\nTo run only unit tests, run:\n\n```bash\nyarn test  \n```\n\n##","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#want-to-add-a-feature-thats-already-in-python","loc":{"lines":{"from":104,"to":132}}}}],["3ace67d8-d730-4d45-92f4-eb2df5545a72",{"pageContent":"#### Running a single test[​](#running-a-single-test \"Direct link to Running a single test\")\n\nTo run a single test, run:\n\n```bash\nyarn test:single /path/to/yourtest.test.ts  \n```\n\nThis is useful for developing individual features.\n\n**Integration tests** cover logic that requires making calls to outside APIs (often integration with other services).\n\nIf you add support for a new external API, please add a new integration test. Integration tests should be called `*.int.test.ts`.\n\nNote that most integration tests require credentials or other setup. You will likely need to set up a `langchain/.env` file like the example [here](https://github.com/langchain-ai/langchainjs/blob/main/langchain/.env.example).\n\nWe generally recommend only running integration tests with `yarn test:single`, but if you want to run all integration tests, run:\n\n```bash\nyarn test:integration  \n```\n\n### Building[​](#building \"Direct link to Building\")\n\nTo build the project, run:\n\n```bash\nyarn build  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#want-to-add-a-feature-thats-already-in-python","loc":{"lines":{"from":132,"to":162}}}}],["5fefd6b9-9c36-4481-9e71-1c6612ee55cd",{"pageContent":"### Adding an Entrypoint[​](#adding-an-entrypoint \"Direct link to Adding an Entrypoint\")\n\nLangChain exposes multiple subpaths the user can import from, e.g.\n\n```ts\nimport { OpenAI } from \"langchain/llms/openai\";  \n```\n\nWe call these subpaths \"entrypoints\". In general, you should create a new entrypoint if you are adding a new integration with a 3rd party library. If you're adding self-contained functionality without any external dependencies, you can add it to an existing entrypoint.\n\nIn order to declare a new entrypoint that users can import from, you should edit the `langchain/scripts/create-entrypoints.js` script. To add an entrypoint `tools` that imports from `tools/index.ts` you'd add the following to the `entrypoints` variable:\n\n```ts\nconst entrypoints = {  \n  // ...  \n  tools: \"tools/index\",  \n};  \n```\n\nThis will make sure the entrypoint is included in the published package, and in generated documentation.\n\n## Documentation[​](#documentation \"Direct link to Documentation\")\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#want-to-add-a-feature-thats-already-in-python","loc":{"lines":{"from":162,"to":185}}}}],["08613578-849c-484f-aeb5-28a0f3a167d5",{"pageContent":"### Contribute Documentation[​](#contribute-documentation \"Direct link to Contribute Documentation\")\n\nDocs are largely autogenerated by [TypeDoc](https://typedoc.org/) from the code.\n\nFor that reason, we ask that you add good documentation to all classes and methods.\n\nSimilar to linting, we recognize documentation can be annoying. If you do not want to do it, please contact a project maintainer, and they can help you with it. We do not want this to be a blocker for good code getting contributed.\n\nDocumentation and the skeleton lives under the `docs/` folder. Example code is imported from under the `examples/` folder.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#want-to-add-a-feature-thats-already-in-python","loc":{"lines":{"from":185,"to":195}}}}],["bd36bf45-e0fe-4da9-9cae-45d1e56e36e0",{"pageContent":"### Running examples[​](#running-examples \"Direct link to Running examples\")\n\nIf you add a new major piece of functionality, it is helpful to add an example to showcase how to use it. Most of our users find examples to be the most helpful kind of documentation.\n\nExamples can be added in the `examples/src` directory, e.g. `examples/src/path/to/example` and should export a `run` function. This example can then be invoked with `yarn example path/to/example` at the top level of the repo.\n\nTo run examples that require an environment variable, you'll need to add a `.env` file under `examples/.env`\n\n### Build Documentation Locally[​](#build-documentation-locally \"Direct link to Build Documentation Locally\")\n\nTo generate and view the documentation locally, change to the project root and run `yarn` to ensure dependencies get installed in both the `docs/` and `examples/` workspaces:\n\n```bash\ncd ..  \nyarn  \n```\n\nThen run:\n\n```bash\nyarn docs  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#want-to-add-a-feature-thats-already-in-python","loc":{"lines":{"from":195,"to":216}}}}],["963af4ee-9bc7-4ab6-9229-3c31c84ae90f",{"pageContent":"## Advanced[​](#advanced \"Direct link to Advanced\")\n\n**Environment tests** test whether LangChain works across different JS environments, including Node.js (both ESM and CJS), Edge environments (eg. Cloudflare Workers), and browsers (using Webpack).\n\nTo run the environment tests with Docker, run the following command from the project root:\n\n```bash\nyarn test:exports:docker  \n```\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#want-to-add-a-feature-thats-already-in-python","loc":{"lines":{"from":218,"to":233}}}}],["a16a6bdb-4e33-472b-874a-3e1161bc0fab",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Contributing to LangChain\n\n👋 Hi there! Thank you for being interested in contributing to LangChain. As an open source project in a rapidly developing field, we are extremely open to contributions, whether it be in the form of a new feature, improved infra, or better documentation.\n\nTo contribute to this project, please follow a [\"fork and pull request\"](https://docs.github.com/en/get-started/quickstart/contributing-to-projects) workflow. Please do not try to push directly to this repo unless you are a maintainer.\n\n## Quick Links[​](#quick-links \"Direct link to Quick Links\")\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#%EF%B8%8F-contributing-guidelines","loc":{"lines":{"from":1,"to":16}}}}],["497c8921-6019-4367-bc31-b4673ad199e2",{"pageContent":"### Not sure what to work on?[​](#not-sure-what-to-work-on \"Direct link to Not sure what to work on?\")\n\nIf you are not sure what to work on, we have a few suggestions:\n\n### New abstractions[​](#new-abstractions \"Direct link to New abstractions\")\n\nWe aim to keep the same APIs between the Python and JS versions of LangChain, where possible. As such we ask that if you have an idea for a new abstraction, please open an issue first to discuss it. This will help us make sure that the API is consistent across both versions. If you're not sure what to work on, we recommend looking at the links above first.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#%EF%B8%8F-contributing-guidelines","loc":{"lines":{"from":16,"to":24}}}}],["75ebf6d5-8abe-4a1e-9eb6-a25dda6e0609",{"pageContent":"## Want to add a specific integration?[​](#want-to-add-a-specific-integration \"Direct link to Want to add a specific integration?\")\n\nLangChain supports several different types of integrations with third-party providers and frameworks, including LLM providers (e.g. [OpenAI](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/llms/openai.ts)), vector stores (e.g. [FAISS](https://github.com/ewfian/langchainjs/blob/main/langchain/src/vectorstores/faiss.ts)), document loaders (e.g. [Apify](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/document_loaders/web/apify_dataset.ts)) persistent message history stores (e.g. [Redis](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/stores/message/redis.ts)), and more.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#%EF%B8%8F-contributing-guidelines","loc":{"lines":{"from":24,"to":26}}}}],["dcefdbf6-8fd5-4c8b-b5b2-d9dc4c8a18c6",{"pageContent":"We welcome such contributions, but ask that you read our dedicated [integration contribution guide](https://github.com/langchain-ai/langchainjs/blob/main/.github/contributing/INTEGRATIONS.md) for specific details and patterns to consider before opening a pull request.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#%EF%B8%8F-contributing-guidelines","loc":{"lines":{"from":28,"to":28}}}}],["f6e83e29-44ea-4a68-8267-dd0f79626f14",{"pageContent":"### Want to add a feature that's already in Python?[​](#want-to-add-a-feature-thats-already-in-python \"Direct link to Want to add a feature that's already in Python?\")\n\nIf you're interested in contributing a feature that's already in the [LangChain Python repo](https://github.com/langchain-ai/langchain) and you'd like some help getting started, you can try pasting code snippets and classes into the [LangChain Python to JS translator](https://langchain-translator.vercel.app/).\n\nIt's a chat interface wrapping a fine-tuned `gpt-3.5-turbo` instance trained on prior ported features. This allows the model to innately take into account LangChain-specific code style and imports.\n\nIt's an ongoing project, and feedback on runs will be used to improve the [LangSmith dataset](https://smith.langchain.com) for further fine-tuning! Try it out below:\n\n[https://langchain-translator.vercel.app/](https://langchain-translator.vercel.app/)","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#%EF%B8%8F-contributing-guidelines","loc":{"lines":{"from":30,"to":38}}}}],["e06fdd92-7601-41c0-b81c-af3dfc1c3719",{"pageContent":"## 🗺️ Contributing Guidelines[​](#️-contributing-guidelines \"Direct link to 🗺️ Contributing Guidelines\")\n\n### 🚩 GitHub Issues[​](#-github-issues \"Direct link to 🚩 GitHub Issues\")\n\nOur [issues](https://github.com/langchain-ai/langchainjs/issues) page contains with bugs, improvements, and feature requests.\n\nIf you start working on an issue, please assign it to yourself.\n\nIf you are adding an issue, please try to keep it focused on a single modular bug/improvement/feature. If the two issues are related, or blocking, please link them rather than keep them as one single one.\n\nWe will try to keep these issues as up to date as possible, though with the rapid rate of develop in this field some may get out of date. If you notice this happening, please just let us know.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#%EF%B8%8F-contributing-guidelines","loc":{"lines":{"from":40,"to":52}}}}],["238b7866-237e-4e10-b031-0305fb4f5316",{"pageContent":"### 🙋 Getting Help[​](#-getting-help \"Direct link to 🙋 Getting Help\")\n\nAlthough we try to have a developer setup to make it as easy as possible for others to contribute (see below) it is possible that some pain point may arise around environment setup, linting, documentation, or other. Should that occur, please contact a maintainer! Not only do we want to help get you unblocked, but we also want to make sure that the process is smooth for future contributors.\n\nIn a similar vein, we do enforce certain linting, formatting, and documentation standards in the codebase. If you are finding these difficult (or even just annoying) to work with, feel free to contact a maintainer for help - we do not want these to get in the way of getting good code into the codebase.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#%EF%B8%8F-contributing-guidelines","loc":{"lines":{"from":52,"to":58}}}}],["abaa455d-7474-4f25-910e-9fe869812cce",{"pageContent":"### 🏭 Release process[​](#-release-process \"Direct link to 🏭 Release process\")\n\nAs of now, LangChain has an ad hoc release process: releases are cut with high frequency via by a developer and published to [npm](https://www.npmjs.com/package/langchain).\n\nLangChain follows the [semver](https://semver.org/) versioning standard. However, as pre-1.0 software, even patch releases may contain [non-backwards-compatible changes](https://semver.org/#spec-item-4).\n\nIf your contribution has made its way into a release, we will want to give you credit on Twitter (only if you want though)! If you have a Twitter account you would like us to mention, please let us know in the PR or in another manner.\n\n### 🛠️ Tooling[​](#️-tooling \"Direct link to 🛠️ Tooling\")\n\nThis project uses the following tools, which are worth getting familiar with if you plan to contribute:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#%EF%B8%8F-contributing-guidelines","loc":{"lines":{"from":58,"to":68}}}}],["da795db9-b372-4612-89f5-ab6bf25da045",{"pageContent":"## 🚀 Quick Start[​](#-quick-start \"Direct link to 🚀 Quick Start\")\n\nClone this repo, then cd into it:\n\n```bash\ncd langchainjs  \n```\n\nNext, try running the following common tasks:\n\n## ✅ Common Tasks[​](#-common-tasks \"Direct link to ✅ Common Tasks\")\n\nOur goal is to make it as easy as possible for you to contribute to this project. All of the below commands should be run from within the `langchain/` directory unless otherwise noted.\n\n```bash\ncd langchain  \n```\n\n### Setup[​](#setup \"Direct link to Setup\")\n\nTo get started, you will need to install the dependencies for the project. To do so, run:\n\n```bash\nyarn  \n```\n\n### Linting[​](#linting \"Direct link to Linting\")\n\nWe use [eslint](https://eslint.org/) to enforce standard lint rules. To run the linter, run:\n\n```bash\nyarn lint  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#%EF%B8%8F-contributing-guidelines","loc":{"lines":{"from":70,"to":104}}}}],["b948346a-d0ed-4392-a562-c24dbac2576c",{"pageContent":"### Formatting[​](#formatting \"Direct link to Formatting\")\n\nWe use [prettier](https://prettier.io) to enforce code formatting style. To run the formatter, run:\n\n```bash\nyarn format  \n```\n\nTo just check for formatting differences, without fixing them, run:\n\n```bash\nyarn format:check  \n```\n\n### Testing[​](#testing \"Direct link to Testing\")\n\nIn general, tests should be added within a `tests/` folder alongside the modules they are testing.\n\n**Unit tests** cover modular logic that does not require calls to outside APIs.\n\nIf you add new logic, please add a unit test. Unit tests should be called `*.test.ts`.\n\nTo run only unit tests, run:\n\n```bash\nyarn test  \n```\n\n##","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#%EF%B8%8F-contributing-guidelines","loc":{"lines":{"from":104,"to":132}}}}],["6d2206db-26a8-4b75-9c30-2baf044ad3d3",{"pageContent":"#### Running a single test[​](#running-a-single-test \"Direct link to Running a single test\")\n\nTo run a single test, run:\n\n```bash\nyarn test:single /path/to/yourtest.test.ts  \n```\n\nThis is useful for developing individual features.\n\n**Integration tests** cover logic that requires making calls to outside APIs (often integration with other services).\n\nIf you add support for a new external API, please add a new integration test. Integration tests should be called `*.int.test.ts`.\n\nNote that most integration tests require credentials or other setup. You will likely need to set up a `langchain/.env` file like the example [here](https://github.com/langchain-ai/langchainjs/blob/main/langchain/.env.example).\n\nWe generally recommend only running integration tests with `yarn test:single`, but if you want to run all integration tests, run:\n\n```bash\nyarn test:integration  \n```\n\n### Building[​](#building \"Direct link to Building\")\n\nTo build the project, run:\n\n```bash\nyarn build  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#%EF%B8%8F-contributing-guidelines","loc":{"lines":{"from":132,"to":162}}}}],["1b24e3a6-8b4b-44e1-97cb-5e9070359729",{"pageContent":"### Adding an Entrypoint[​](#adding-an-entrypoint \"Direct link to Adding an Entrypoint\")\n\nLangChain exposes multiple subpaths the user can import from, e.g.\n\n```ts\nimport { OpenAI } from \"langchain/llms/openai\";  \n```\n\nWe call these subpaths \"entrypoints\". In general, you should create a new entrypoint if you are adding a new integration with a 3rd party library. If you're adding self-contained functionality without any external dependencies, you can add it to an existing entrypoint.\n\nIn order to declare a new entrypoint that users can import from, you should edit the `langchain/scripts/create-entrypoints.js` script. To add an entrypoint `tools` that imports from `tools/index.ts` you'd add the following to the `entrypoints` variable:\n\n```ts\nconst entrypoints = {  \n  // ...  \n  tools: \"tools/index\",  \n};  \n```\n\nThis will make sure the entrypoint is included in the published package, and in generated documentation.\n\n## Documentation[​](#documentation \"Direct link to Documentation\")\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#%EF%B8%8F-contributing-guidelines","loc":{"lines":{"from":162,"to":185}}}}],["af22edd4-fd10-485c-907a-4d7f11ad7114",{"pageContent":"### Contribute Documentation[​](#contribute-documentation \"Direct link to Contribute Documentation\")\n\nDocs are largely autogenerated by [TypeDoc](https://typedoc.org/) from the code.\n\nFor that reason, we ask that you add good documentation to all classes and methods.\n\nSimilar to linting, we recognize documentation can be annoying. If you do not want to do it, please contact a project maintainer, and they can help you with it. We do not want this to be a blocker for good code getting contributed.\n\nDocumentation and the skeleton lives under the `docs/` folder. Example code is imported from under the `examples/` folder.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#%EF%B8%8F-contributing-guidelines","loc":{"lines":{"from":185,"to":195}}}}],["3af644e2-a107-4017-a7e6-54d5a6a9a8d9",{"pageContent":"### Running examples[​](#running-examples \"Direct link to Running examples\")\n\nIf you add a new major piece of functionality, it is helpful to add an example to showcase how to use it. Most of our users find examples to be the most helpful kind of documentation.\n\nExamples can be added in the `examples/src` directory, e.g. `examples/src/path/to/example` and should export a `run` function. This example can then be invoked with `yarn example path/to/example` at the top level of the repo.\n\nTo run examples that require an environment variable, you'll need to add a `.env` file under `examples/.env`\n\n### Build Documentation Locally[​](#build-documentation-locally \"Direct link to Build Documentation Locally\")\n\nTo generate and view the documentation locally, change to the project root and run `yarn` to ensure dependencies get installed in both the `docs/` and `examples/` workspaces:\n\n```bash\ncd ..  \nyarn  \n```\n\nThen run:\n\n```bash\nyarn docs  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#%EF%B8%8F-contributing-guidelines","loc":{"lines":{"from":195,"to":216}}}}],["5bf9bc91-2e8b-4a4c-8196-84f32b5834e2",{"pageContent":"## Advanced[​](#advanced \"Direct link to Advanced\")\n\n**Environment tests** test whether LangChain works across different JS environments, including Node.js (both ESM and CJS), Edge environments (eg. Cloudflare Workers), and browsers (using Webpack).\n\nTo run the environment tests with Docker, run the following command from the project root:\n\n```bash\nyarn test:exports:docker  \n```\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#%EF%B8%8F-contributing-guidelines","loc":{"lines":{"from":218,"to":233}}}}],["c0572e4f-6a02-4071-8bd5-2fb47b1dd66c",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Contributing to LangChain\n\n👋 Hi there! Thank you for being interested in contributing to LangChain. As an open source project in a rapidly developing field, we are extremely open to contributions, whether it be in the form of a new feature, improved infra, or better documentation.\n\nTo contribute to this project, please follow a [\"fork and pull request\"](https://docs.github.com/en/get-started/quickstart/contributing-to-projects) workflow. Please do not try to push directly to this repo unless you are a maintainer.\n\n## Quick Links[​](#quick-links \"Direct link to Quick Links\")\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-github-issues","loc":{"lines":{"from":1,"to":16}}}}],["dcbc9f20-41a3-4344-a1e8-811853b36a97",{"pageContent":"### Not sure what to work on?[​](#not-sure-what-to-work-on \"Direct link to Not sure what to work on?\")\n\nIf you are not sure what to work on, we have a few suggestions:\n\n### New abstractions[​](#new-abstractions \"Direct link to New abstractions\")\n\nWe aim to keep the same APIs between the Python and JS versions of LangChain, where possible. As such we ask that if you have an idea for a new abstraction, please open an issue first to discuss it. This will help us make sure that the API is consistent across both versions. If you're not sure what to work on, we recommend looking at the links above first.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-github-issues","loc":{"lines":{"from":16,"to":24}}}}],["c43d40d2-46d5-48f8-9ce2-59aba0906159",{"pageContent":"## Want to add a specific integration?[​](#want-to-add-a-specific-integration \"Direct link to Want to add a specific integration?\")\n\nLangChain supports several different types of integrations with third-party providers and frameworks, including LLM providers (e.g. [OpenAI](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/llms/openai.ts)), vector stores (e.g. [FAISS](https://github.com/ewfian/langchainjs/blob/main/langchain/src/vectorstores/faiss.ts)), document loaders (e.g. [Apify](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/document_loaders/web/apify_dataset.ts)) persistent message history stores (e.g. [Redis](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/stores/message/redis.ts)), and more.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-github-issues","loc":{"lines":{"from":24,"to":26}}}}],["6b833043-051b-4510-b47d-63acbfd2d64b",{"pageContent":"We welcome such contributions, but ask that you read our dedicated [integration contribution guide](https://github.com/langchain-ai/langchainjs/blob/main/.github/contributing/INTEGRATIONS.md) for specific details and patterns to consider before opening a pull request.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-github-issues","loc":{"lines":{"from":28,"to":28}}}}],["564397de-1012-4a86-8096-6b0d7ab9ce21",{"pageContent":"### Want to add a feature that's already in Python?[​](#want-to-add-a-feature-thats-already-in-python \"Direct link to Want to add a feature that's already in Python?\")\n\nIf you're interested in contributing a feature that's already in the [LangChain Python repo](https://github.com/langchain-ai/langchain) and you'd like some help getting started, you can try pasting code snippets and classes into the [LangChain Python to JS translator](https://langchain-translator.vercel.app/).\n\nIt's a chat interface wrapping a fine-tuned `gpt-3.5-turbo` instance trained on prior ported features. This allows the model to innately take into account LangChain-specific code style and imports.\n\nIt's an ongoing project, and feedback on runs will be used to improve the [LangSmith dataset](https://smith.langchain.com) for further fine-tuning! Try it out below:\n\n[https://langchain-translator.vercel.app/](https://langchain-translator.vercel.app/)","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-github-issues","loc":{"lines":{"from":30,"to":38}}}}],["8ebb546d-36df-4348-851b-877d29bae795",{"pageContent":"## 🗺️ Contributing Guidelines[​](#️-contributing-guidelines \"Direct link to 🗺️ Contributing Guidelines\")\n\n### 🚩 GitHub Issues[​](#-github-issues \"Direct link to 🚩 GitHub Issues\")\n\nOur [issues](https://github.com/langchain-ai/langchainjs/issues) page contains with bugs, improvements, and feature requests.\n\nIf you start working on an issue, please assign it to yourself.\n\nIf you are adding an issue, please try to keep it focused on a single modular bug/improvement/feature. If the two issues are related, or blocking, please link them rather than keep them as one single one.\n\nWe will try to keep these issues as up to date as possible, though with the rapid rate of develop in this field some may get out of date. If you notice this happening, please just let us know.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-github-issues","loc":{"lines":{"from":40,"to":52}}}}],["3d17150f-2664-4408-8e56-41b333b44d3a",{"pageContent":"### 🙋 Getting Help[​](#-getting-help \"Direct link to 🙋 Getting Help\")\n\nAlthough we try to have a developer setup to make it as easy as possible for others to contribute (see below) it is possible that some pain point may arise around environment setup, linting, documentation, or other. Should that occur, please contact a maintainer! Not only do we want to help get you unblocked, but we also want to make sure that the process is smooth for future contributors.\n\nIn a similar vein, we do enforce certain linting, formatting, and documentation standards in the codebase. If you are finding these difficult (or even just annoying) to work with, feel free to contact a maintainer for help - we do not want these to get in the way of getting good code into the codebase.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-github-issues","loc":{"lines":{"from":52,"to":58}}}}],["aed34643-5240-44cc-a465-5cf74bcda240",{"pageContent":"### 🏭 Release process[​](#-release-process \"Direct link to 🏭 Release process\")\n\nAs of now, LangChain has an ad hoc release process: releases are cut with high frequency via by a developer and published to [npm](https://www.npmjs.com/package/langchain).\n\nLangChain follows the [semver](https://semver.org/) versioning standard. However, as pre-1.0 software, even patch releases may contain [non-backwards-compatible changes](https://semver.org/#spec-item-4).\n\nIf your contribution has made its way into a release, we will want to give you credit on Twitter (only if you want though)! If you have a Twitter account you would like us to mention, please let us know in the PR or in another manner.\n\n### 🛠️ Tooling[​](#️-tooling \"Direct link to 🛠️ Tooling\")\n\nThis project uses the following tools, which are worth getting familiar with if you plan to contribute:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-github-issues","loc":{"lines":{"from":58,"to":68}}}}],["5c6a2695-5803-42d6-8a5d-800fa99cc693",{"pageContent":"## 🚀 Quick Start[​](#-quick-start \"Direct link to 🚀 Quick Start\")\n\nClone this repo, then cd into it:\n\n```bash\ncd langchainjs  \n```\n\nNext, try running the following common tasks:\n\n## ✅ Common Tasks[​](#-common-tasks \"Direct link to ✅ Common Tasks\")\n\nOur goal is to make it as easy as possible for you to contribute to this project. All of the below commands should be run from within the `langchain/` directory unless otherwise noted.\n\n```bash\ncd langchain  \n```\n\n### Setup[​](#setup \"Direct link to Setup\")\n\nTo get started, you will need to install the dependencies for the project. To do so, run:\n\n```bash\nyarn  \n```\n\n### Linting[​](#linting \"Direct link to Linting\")\n\nWe use [eslint](https://eslint.org/) to enforce standard lint rules. To run the linter, run:\n\n```bash\nyarn lint  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-github-issues","loc":{"lines":{"from":70,"to":104}}}}],["a92cf2de-b281-45b9-808d-2d8609a2194c",{"pageContent":"### Formatting[​](#formatting \"Direct link to Formatting\")\n\nWe use [prettier](https://prettier.io) to enforce code formatting style. To run the formatter, run:\n\n```bash\nyarn format  \n```\n\nTo just check for formatting differences, without fixing them, run:\n\n```bash\nyarn format:check  \n```\n\n### Testing[​](#testing \"Direct link to Testing\")\n\nIn general, tests should be added within a `tests/` folder alongside the modules they are testing.\n\n**Unit tests** cover modular logic that does not require calls to outside APIs.\n\nIf you add new logic, please add a unit test. Unit tests should be called `*.test.ts`.\n\nTo run only unit tests, run:\n\n```bash\nyarn test  \n```\n\n##","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-github-issues","loc":{"lines":{"from":104,"to":132}}}}],["48d148ca-8288-430a-8dda-8786e80ee5f0",{"pageContent":"#### Running a single test[​](#running-a-single-test \"Direct link to Running a single test\")\n\nTo run a single test, run:\n\n```bash\nyarn test:single /path/to/yourtest.test.ts  \n```\n\nThis is useful for developing individual features.\n\n**Integration tests** cover logic that requires making calls to outside APIs (often integration with other services).\n\nIf you add support for a new external API, please add a new integration test. Integration tests should be called `*.int.test.ts`.\n\nNote that most integration tests require credentials or other setup. You will likely need to set up a `langchain/.env` file like the example [here](https://github.com/langchain-ai/langchainjs/blob/main/langchain/.env.example).\n\nWe generally recommend only running integration tests with `yarn test:single`, but if you want to run all integration tests, run:\n\n```bash\nyarn test:integration  \n```\n\n### Building[​](#building \"Direct link to Building\")\n\nTo build the project, run:\n\n```bash\nyarn build  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-github-issues","loc":{"lines":{"from":132,"to":162}}}}],["9d33ed29-12b9-4a2a-b589-03768696ab87",{"pageContent":"### Adding an Entrypoint[​](#adding-an-entrypoint \"Direct link to Adding an Entrypoint\")\n\nLangChain exposes multiple subpaths the user can import from, e.g.\n\n```ts\nimport { OpenAI } from \"langchain/llms/openai\";  \n```\n\nWe call these subpaths \"entrypoints\". In general, you should create a new entrypoint if you are adding a new integration with a 3rd party library. If you're adding self-contained functionality without any external dependencies, you can add it to an existing entrypoint.\n\nIn order to declare a new entrypoint that users can import from, you should edit the `langchain/scripts/create-entrypoints.js` script. To add an entrypoint `tools` that imports from `tools/index.ts` you'd add the following to the `entrypoints` variable:\n\n```ts\nconst entrypoints = {  \n  // ...  \n  tools: \"tools/index\",  \n};  \n```\n\nThis will make sure the entrypoint is included in the published package, and in generated documentation.\n\n## Documentation[​](#documentation \"Direct link to Documentation\")\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-github-issues","loc":{"lines":{"from":162,"to":185}}}}],["c1fb753c-0096-4a1a-a123-3802228eafd8",{"pageContent":"### Contribute Documentation[​](#contribute-documentation \"Direct link to Contribute Documentation\")\n\nDocs are largely autogenerated by [TypeDoc](https://typedoc.org/) from the code.\n\nFor that reason, we ask that you add good documentation to all classes and methods.\n\nSimilar to linting, we recognize documentation can be annoying. If you do not want to do it, please contact a project maintainer, and they can help you with it. We do not want this to be a blocker for good code getting contributed.\n\nDocumentation and the skeleton lives under the `docs/` folder. Example code is imported from under the `examples/` folder.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-github-issues","loc":{"lines":{"from":185,"to":195}}}}],["93d80a26-272b-4ef2-b0c3-c5444dc4241c",{"pageContent":"### Running examples[​](#running-examples \"Direct link to Running examples\")\n\nIf you add a new major piece of functionality, it is helpful to add an example to showcase how to use it. Most of our users find examples to be the most helpful kind of documentation.\n\nExamples can be added in the `examples/src` directory, e.g. `examples/src/path/to/example` and should export a `run` function. This example can then be invoked with `yarn example path/to/example` at the top level of the repo.\n\nTo run examples that require an environment variable, you'll need to add a `.env` file under `examples/.env`\n\n### Build Documentation Locally[​](#build-documentation-locally \"Direct link to Build Documentation Locally\")\n\nTo generate and view the documentation locally, change to the project root and run `yarn` to ensure dependencies get installed in both the `docs/` and `examples/` workspaces:\n\n```bash\ncd ..  \nyarn  \n```\n\nThen run:\n\n```bash\nyarn docs  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-github-issues","loc":{"lines":{"from":195,"to":216}}}}],["d7178506-5374-4640-a4e8-2cbee0fbfc7e",{"pageContent":"## Advanced[​](#advanced \"Direct link to Advanced\")\n\n**Environment tests** test whether LangChain works across different JS environments, including Node.js (both ESM and CJS), Edge environments (eg. Cloudflare Workers), and browsers (using Webpack).\n\nTo run the environment tests with Docker, run the following command from the project root:\n\n```bash\nyarn test:exports:docker  \n```\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-github-issues","loc":{"lines":{"from":218,"to":233}}}}],["766f9f57-9145-4ca7-bdfb-78f063a8f980",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Contributing to LangChain\n\n👋 Hi there! Thank you for being interested in contributing to LangChain. As an open source project in a rapidly developing field, we are extremely open to contributions, whether it be in the form of a new feature, improved infra, or better documentation.\n\nTo contribute to this project, please follow a [\"fork and pull request\"](https://docs.github.com/en/get-started/quickstart/contributing-to-projects) workflow. Please do not try to push directly to this repo unless you are a maintainer.\n\n## Quick Links[​](#quick-links \"Direct link to Quick Links\")\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-getting-help","loc":{"lines":{"from":1,"to":16}}}}],["bd3babb1-5ded-4621-8e9c-2873869d220a",{"pageContent":"### Not sure what to work on?[​](#not-sure-what-to-work-on \"Direct link to Not sure what to work on?\")\n\nIf you are not sure what to work on, we have a few suggestions:\n\n### New abstractions[​](#new-abstractions \"Direct link to New abstractions\")\n\nWe aim to keep the same APIs between the Python and JS versions of LangChain, where possible. As such we ask that if you have an idea for a new abstraction, please open an issue first to discuss it. This will help us make sure that the API is consistent across both versions. If you're not sure what to work on, we recommend looking at the links above first.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-getting-help","loc":{"lines":{"from":16,"to":24}}}}],["8eb9598a-606a-479f-b9aa-40eb11a95362",{"pageContent":"## Want to add a specific integration?[​](#want-to-add-a-specific-integration \"Direct link to Want to add a specific integration?\")\n\nLangChain supports several different types of integrations with third-party providers and frameworks, including LLM providers (e.g. [OpenAI](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/llms/openai.ts)), vector stores (e.g. [FAISS](https://github.com/ewfian/langchainjs/blob/main/langchain/src/vectorstores/faiss.ts)), document loaders (e.g. [Apify](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/document_loaders/web/apify_dataset.ts)) persistent message history stores (e.g. [Redis](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/stores/message/redis.ts)), and more.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-getting-help","loc":{"lines":{"from":24,"to":26}}}}],["a87c1e6e-4ec8-4fed-84df-8f139f6bb7e0",{"pageContent":"We welcome such contributions, but ask that you read our dedicated [integration contribution guide](https://github.com/langchain-ai/langchainjs/blob/main/.github/contributing/INTEGRATIONS.md) for specific details and patterns to consider before opening a pull request.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-getting-help","loc":{"lines":{"from":28,"to":28}}}}],["045cfc41-1e38-4cd8-a3f6-a77b50709c41",{"pageContent":"### Want to add a feature that's already in Python?[​](#want-to-add-a-feature-thats-already-in-python \"Direct link to Want to add a feature that's already in Python?\")\n\nIf you're interested in contributing a feature that's already in the [LangChain Python repo](https://github.com/langchain-ai/langchain) and you'd like some help getting started, you can try pasting code snippets and classes into the [LangChain Python to JS translator](https://langchain-translator.vercel.app/).\n\nIt's a chat interface wrapping a fine-tuned `gpt-3.5-turbo` instance trained on prior ported features. This allows the model to innately take into account LangChain-specific code style and imports.\n\nIt's an ongoing project, and feedback on runs will be used to improve the [LangSmith dataset](https://smith.langchain.com) for further fine-tuning! Try it out below:\n\n[https://langchain-translator.vercel.app/](https://langchain-translator.vercel.app/)","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-getting-help","loc":{"lines":{"from":30,"to":38}}}}],["567e07ca-b9f9-4abf-b983-16c0c02bc45c",{"pageContent":"## 🗺️ Contributing Guidelines[​](#️-contributing-guidelines \"Direct link to 🗺️ Contributing Guidelines\")\n\n### 🚩 GitHub Issues[​](#-github-issues \"Direct link to 🚩 GitHub Issues\")\n\nOur [issues](https://github.com/langchain-ai/langchainjs/issues) page contains with bugs, improvements, and feature requests.\n\nIf you start working on an issue, please assign it to yourself.\n\nIf you are adding an issue, please try to keep it focused on a single modular bug/improvement/feature. If the two issues are related, or blocking, please link them rather than keep them as one single one.\n\nWe will try to keep these issues as up to date as possible, though with the rapid rate of develop in this field some may get out of date. If you notice this happening, please just let us know.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-getting-help","loc":{"lines":{"from":40,"to":52}}}}],["c4c2a40b-2510-48c6-981e-521f45645cc8",{"pageContent":"### 🙋 Getting Help[​](#-getting-help \"Direct link to 🙋 Getting Help\")\n\nAlthough we try to have a developer setup to make it as easy as possible for others to contribute (see below) it is possible that some pain point may arise around environment setup, linting, documentation, or other. Should that occur, please contact a maintainer! Not only do we want to help get you unblocked, but we also want to make sure that the process is smooth for future contributors.\n\nIn a similar vein, we do enforce certain linting, formatting, and documentation standards in the codebase. If you are finding these difficult (or even just annoying) to work with, feel free to contact a maintainer for help - we do not want these to get in the way of getting good code into the codebase.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-getting-help","loc":{"lines":{"from":52,"to":58}}}}],["de34e0ff-8379-45c5-81b9-d4cc1c8a2488",{"pageContent":"### 🏭 Release process[​](#-release-process \"Direct link to 🏭 Release process\")\n\nAs of now, LangChain has an ad hoc release process: releases are cut with high frequency via by a developer and published to [npm](https://www.npmjs.com/package/langchain).\n\nLangChain follows the [semver](https://semver.org/) versioning standard. However, as pre-1.0 software, even patch releases may contain [non-backwards-compatible changes](https://semver.org/#spec-item-4).\n\nIf your contribution has made its way into a release, we will want to give you credit on Twitter (only if you want though)! If you have a Twitter account you would like us to mention, please let us know in the PR or in another manner.\n\n### 🛠️ Tooling[​](#️-tooling \"Direct link to 🛠️ Tooling\")\n\nThis project uses the following tools, which are worth getting familiar with if you plan to contribute:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-getting-help","loc":{"lines":{"from":58,"to":68}}}}],["b3761506-1356-4d16-9e69-40abcddd901e",{"pageContent":"## 🚀 Quick Start[​](#-quick-start \"Direct link to 🚀 Quick Start\")\n\nClone this repo, then cd into it:\n\n```bash\ncd langchainjs  \n```\n\nNext, try running the following common tasks:\n\n## ✅ Common Tasks[​](#-common-tasks \"Direct link to ✅ Common Tasks\")\n\nOur goal is to make it as easy as possible for you to contribute to this project. All of the below commands should be run from within the `langchain/` directory unless otherwise noted.\n\n```bash\ncd langchain  \n```\n\n### Setup[​](#setup \"Direct link to Setup\")\n\nTo get started, you will need to install the dependencies for the project. To do so, run:\n\n```bash\nyarn  \n```\n\n### Linting[​](#linting \"Direct link to Linting\")\n\nWe use [eslint](https://eslint.org/) to enforce standard lint rules. To run the linter, run:\n\n```bash\nyarn lint  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-getting-help","loc":{"lines":{"from":70,"to":104}}}}],["1fc75660-0410-44bc-ae36-b10ebdbb8584",{"pageContent":"### Formatting[​](#formatting \"Direct link to Formatting\")\n\nWe use [prettier](https://prettier.io) to enforce code formatting style. To run the formatter, run:\n\n```bash\nyarn format  \n```\n\nTo just check for formatting differences, without fixing them, run:\n\n```bash\nyarn format:check  \n```\n\n### Testing[​](#testing \"Direct link to Testing\")\n\nIn general, tests should be added within a `tests/` folder alongside the modules they are testing.\n\n**Unit tests** cover modular logic that does not require calls to outside APIs.\n\nIf you add new logic, please add a unit test. Unit tests should be called `*.test.ts`.\n\nTo run only unit tests, run:\n\n```bash\nyarn test  \n```\n\n##","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-getting-help","loc":{"lines":{"from":104,"to":132}}}}],["399a457e-8143-452f-a82a-f735ddc1761c",{"pageContent":"#### Running a single test[​](#running-a-single-test \"Direct link to Running a single test\")\n\nTo run a single test, run:\n\n```bash\nyarn test:single /path/to/yourtest.test.ts  \n```\n\nThis is useful for developing individual features.\n\n**Integration tests** cover logic that requires making calls to outside APIs (often integration with other services).\n\nIf you add support for a new external API, please add a new integration test. Integration tests should be called `*.int.test.ts`.\n\nNote that most integration tests require credentials or other setup. You will likely need to set up a `langchain/.env` file like the example [here](https://github.com/langchain-ai/langchainjs/blob/main/langchain/.env.example).\n\nWe generally recommend only running integration tests with `yarn test:single`, but if you want to run all integration tests, run:\n\n```bash\nyarn test:integration  \n```\n\n### Building[​](#building \"Direct link to Building\")\n\nTo build the project, run:\n\n```bash\nyarn build  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-getting-help","loc":{"lines":{"from":132,"to":162}}}}],["5d19c7ad-3413-41c3-9a21-3452e2729383",{"pageContent":"### Adding an Entrypoint[​](#adding-an-entrypoint \"Direct link to Adding an Entrypoint\")\n\nLangChain exposes multiple subpaths the user can import from, e.g.\n\n```ts\nimport { OpenAI } from \"langchain/llms/openai\";  \n```\n\nWe call these subpaths \"entrypoints\". In general, you should create a new entrypoint if you are adding a new integration with a 3rd party library. If you're adding self-contained functionality without any external dependencies, you can add it to an existing entrypoint.\n\nIn order to declare a new entrypoint that users can import from, you should edit the `langchain/scripts/create-entrypoints.js` script. To add an entrypoint `tools` that imports from `tools/index.ts` you'd add the following to the `entrypoints` variable:\n\n```ts\nconst entrypoints = {  \n  // ...  \n  tools: \"tools/index\",  \n};  \n```\n\nThis will make sure the entrypoint is included in the published package, and in generated documentation.\n\n## Documentation[​](#documentation \"Direct link to Documentation\")\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-getting-help","loc":{"lines":{"from":162,"to":185}}}}],["f267e9dc-fa10-42c0-bd7b-340acfec31ce",{"pageContent":"### Contribute Documentation[​](#contribute-documentation \"Direct link to Contribute Documentation\")\n\nDocs are largely autogenerated by [TypeDoc](https://typedoc.org/) from the code.\n\nFor that reason, we ask that you add good documentation to all classes and methods.\n\nSimilar to linting, we recognize documentation can be annoying. If you do not want to do it, please contact a project maintainer, and they can help you with it. We do not want this to be a blocker for good code getting contributed.\n\nDocumentation and the skeleton lives under the `docs/` folder. Example code is imported from under the `examples/` folder.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-getting-help","loc":{"lines":{"from":185,"to":195}}}}],["877ac376-252a-4724-8620-196bb5947a0b",{"pageContent":"### Running examples[​](#running-examples \"Direct link to Running examples\")\n\nIf you add a new major piece of functionality, it is helpful to add an example to showcase how to use it. Most of our users find examples to be the most helpful kind of documentation.\n\nExamples can be added in the `examples/src` directory, e.g. `examples/src/path/to/example` and should export a `run` function. This example can then be invoked with `yarn example path/to/example` at the top level of the repo.\n\nTo run examples that require an environment variable, you'll need to add a `.env` file under `examples/.env`\n\n### Build Documentation Locally[​](#build-documentation-locally \"Direct link to Build Documentation Locally\")\n\nTo generate and view the documentation locally, change to the project root and run `yarn` to ensure dependencies get installed in both the `docs/` and `examples/` workspaces:\n\n```bash\ncd ..  \nyarn  \n```\n\nThen run:\n\n```bash\nyarn docs  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-getting-help","loc":{"lines":{"from":195,"to":216}}}}],["e7a44ff3-33b6-4220-b3d4-fddbe96348d1",{"pageContent":"## Advanced[​](#advanced \"Direct link to Advanced\")\n\n**Environment tests** test whether LangChain works across different JS environments, including Node.js (both ESM and CJS), Edge environments (eg. Cloudflare Workers), and browsers (using Webpack).\n\nTo run the environment tests with Docker, run the following command from the project root:\n\n```bash\nyarn test:exports:docker  \n```\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-getting-help","loc":{"lines":{"from":218,"to":233}}}}],["8f20c79a-c3af-4700-b104-00b708ee57fd",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Contributing to LangChain\n\n👋 Hi there! Thank you for being interested in contributing to LangChain. As an open source project in a rapidly developing field, we are extremely open to contributions, whether it be in the form of a new feature, improved infra, or better documentation.\n\nTo contribute to this project, please follow a [\"fork and pull request\"](https://docs.github.com/en/get-started/quickstart/contributing-to-projects) workflow. Please do not try to push directly to this repo unless you are a maintainer.\n\n## Quick Links[​](#quick-links \"Direct link to Quick Links\")\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-release-process","loc":{"lines":{"from":1,"to":16}}}}],["9873038c-8b8a-4b27-8032-d8ef4534b181",{"pageContent":"### Not sure what to work on?[​](#not-sure-what-to-work-on \"Direct link to Not sure what to work on?\")\n\nIf you are not sure what to work on, we have a few suggestions:\n\n### New abstractions[​](#new-abstractions \"Direct link to New abstractions\")\n\nWe aim to keep the same APIs between the Python and JS versions of LangChain, where possible. As such we ask that if you have an idea for a new abstraction, please open an issue first to discuss it. This will help us make sure that the API is consistent across both versions. If you're not sure what to work on, we recommend looking at the links above first.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-release-process","loc":{"lines":{"from":16,"to":24}}}}],["db5efa63-3c74-4a27-9233-ce42d3fd88a5",{"pageContent":"## Want to add a specific integration?[​](#want-to-add-a-specific-integration \"Direct link to Want to add a specific integration?\")\n\nLangChain supports several different types of integrations with third-party providers and frameworks, including LLM providers (e.g. [OpenAI](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/llms/openai.ts)), vector stores (e.g. [FAISS](https://github.com/ewfian/langchainjs/blob/main/langchain/src/vectorstores/faiss.ts)), document loaders (e.g. [Apify](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/document_loaders/web/apify_dataset.ts)) persistent message history stores (e.g. [Redis](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/stores/message/redis.ts)), and more.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-release-process","loc":{"lines":{"from":24,"to":26}}}}],["c4ee40c6-4d7a-45d6-b0eb-8267e3be14f1",{"pageContent":"We welcome such contributions, but ask that you read our dedicated [integration contribution guide](https://github.com/langchain-ai/langchainjs/blob/main/.github/contributing/INTEGRATIONS.md) for specific details and patterns to consider before opening a pull request.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-release-process","loc":{"lines":{"from":28,"to":28}}}}],["034cc478-1904-4cb0-a2c1-2c532e7bc628",{"pageContent":"### Want to add a feature that's already in Python?[​](#want-to-add-a-feature-thats-already-in-python \"Direct link to Want to add a feature that's already in Python?\")\n\nIf you're interested in contributing a feature that's already in the [LangChain Python repo](https://github.com/langchain-ai/langchain) and you'd like some help getting started, you can try pasting code snippets and classes into the [LangChain Python to JS translator](https://langchain-translator.vercel.app/).\n\nIt's a chat interface wrapping a fine-tuned `gpt-3.5-turbo` instance trained on prior ported features. This allows the model to innately take into account LangChain-specific code style and imports.\n\nIt's an ongoing project, and feedback on runs will be used to improve the [LangSmith dataset](https://smith.langchain.com) for further fine-tuning! Try it out below:\n\n[https://langchain-translator.vercel.app/](https://langchain-translator.vercel.app/)","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-release-process","loc":{"lines":{"from":30,"to":38}}}}],["2705205a-8a18-4bba-b114-37ad82fe0adb",{"pageContent":"## 🗺️ Contributing Guidelines[​](#️-contributing-guidelines \"Direct link to 🗺️ Contributing Guidelines\")\n\n### 🚩 GitHub Issues[​](#-github-issues \"Direct link to 🚩 GitHub Issues\")\n\nOur [issues](https://github.com/langchain-ai/langchainjs/issues) page contains with bugs, improvements, and feature requests.\n\nIf you start working on an issue, please assign it to yourself.\n\nIf you are adding an issue, please try to keep it focused on a single modular bug/improvement/feature. If the two issues are related, or blocking, please link them rather than keep them as one single one.\n\nWe will try to keep these issues as up to date as possible, though with the rapid rate of develop in this field some may get out of date. If you notice this happening, please just let us know.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-release-process","loc":{"lines":{"from":40,"to":52}}}}],["b3b7503d-f952-4215-8423-6077afaa4030",{"pageContent":"### 🙋 Getting Help[​](#-getting-help \"Direct link to 🙋 Getting Help\")\n\nAlthough we try to have a developer setup to make it as easy as possible for others to contribute (see below) it is possible that some pain point may arise around environment setup, linting, documentation, or other. Should that occur, please contact a maintainer! Not only do we want to help get you unblocked, but we also want to make sure that the process is smooth for future contributors.\n\nIn a similar vein, we do enforce certain linting, formatting, and documentation standards in the codebase. If you are finding these difficult (or even just annoying) to work with, feel free to contact a maintainer for help - we do not want these to get in the way of getting good code into the codebase.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-release-process","loc":{"lines":{"from":52,"to":58}}}}],["db5753ae-a5d1-4e2e-b1c0-4b747084ddf2",{"pageContent":"### 🏭 Release process[​](#-release-process \"Direct link to 🏭 Release process\")\n\nAs of now, LangChain has an ad hoc release process: releases are cut with high frequency via by a developer and published to [npm](https://www.npmjs.com/package/langchain).\n\nLangChain follows the [semver](https://semver.org/) versioning standard. However, as pre-1.0 software, even patch releases may contain [non-backwards-compatible changes](https://semver.org/#spec-item-4).\n\nIf your contribution has made its way into a release, we will want to give you credit on Twitter (only if you want though)! If you have a Twitter account you would like us to mention, please let us know in the PR or in another manner.\n\n### 🛠️ Tooling[​](#️-tooling \"Direct link to 🛠️ Tooling\")\n\nThis project uses the following tools, which are worth getting familiar with if you plan to contribute:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-release-process","loc":{"lines":{"from":58,"to":68}}}}],["e825acf5-0a46-4f54-982b-46ada1469df1",{"pageContent":"## 🚀 Quick Start[​](#-quick-start \"Direct link to 🚀 Quick Start\")\n\nClone this repo, then cd into it:\n\n```bash\ncd langchainjs  \n```\n\nNext, try running the following common tasks:\n\n## ✅ Common Tasks[​](#-common-tasks \"Direct link to ✅ Common Tasks\")\n\nOur goal is to make it as easy as possible for you to contribute to this project. All of the below commands should be run from within the `langchain/` directory unless otherwise noted.\n\n```bash\ncd langchain  \n```\n\n### Setup[​](#setup \"Direct link to Setup\")\n\nTo get started, you will need to install the dependencies for the project. To do so, run:\n\n```bash\nyarn  \n```\n\n### Linting[​](#linting \"Direct link to Linting\")\n\nWe use [eslint](https://eslint.org/) to enforce standard lint rules. To run the linter, run:\n\n```bash\nyarn lint  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-release-process","loc":{"lines":{"from":70,"to":104}}}}],["89bfc56b-e4d1-4686-ac96-71503970dff6",{"pageContent":"### Formatting[​](#formatting \"Direct link to Formatting\")\n\nWe use [prettier](https://prettier.io) to enforce code formatting style. To run the formatter, run:\n\n```bash\nyarn format  \n```\n\nTo just check for formatting differences, without fixing them, run:\n\n```bash\nyarn format:check  \n```\n\n### Testing[​](#testing \"Direct link to Testing\")\n\nIn general, tests should be added within a `tests/` folder alongside the modules they are testing.\n\n**Unit tests** cover modular logic that does not require calls to outside APIs.\n\nIf you add new logic, please add a unit test. Unit tests should be called `*.test.ts`.\n\nTo run only unit tests, run:\n\n```bash\nyarn test  \n```\n\n##","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-release-process","loc":{"lines":{"from":104,"to":132}}}}],["366e0721-d09d-4e6f-8b9b-a925a751c882",{"pageContent":"#### Running a single test[​](#running-a-single-test \"Direct link to Running a single test\")\n\nTo run a single test, run:\n\n```bash\nyarn test:single /path/to/yourtest.test.ts  \n```\n\nThis is useful for developing individual features.\n\n**Integration tests** cover logic that requires making calls to outside APIs (often integration with other services).\n\nIf you add support for a new external API, please add a new integration test. Integration tests should be called `*.int.test.ts`.\n\nNote that most integration tests require credentials or other setup. You will likely need to set up a `langchain/.env` file like the example [here](https://github.com/langchain-ai/langchainjs/blob/main/langchain/.env.example).\n\nWe generally recommend only running integration tests with `yarn test:single`, but if you want to run all integration tests, run:\n\n```bash\nyarn test:integration  \n```\n\n### Building[​](#building \"Direct link to Building\")\n\nTo build the project, run:\n\n```bash\nyarn build  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-release-process","loc":{"lines":{"from":132,"to":162}}}}],["c54eb664-14c0-4550-9d6c-8ed5651c37a6",{"pageContent":"### Adding an Entrypoint[​](#adding-an-entrypoint \"Direct link to Adding an Entrypoint\")\n\nLangChain exposes multiple subpaths the user can import from, e.g.\n\n```ts\nimport { OpenAI } from \"langchain/llms/openai\";  \n```\n\nWe call these subpaths \"entrypoints\". In general, you should create a new entrypoint if you are adding a new integration with a 3rd party library. If you're adding self-contained functionality without any external dependencies, you can add it to an existing entrypoint.\n\nIn order to declare a new entrypoint that users can import from, you should edit the `langchain/scripts/create-entrypoints.js` script. To add an entrypoint `tools` that imports from `tools/index.ts` you'd add the following to the `entrypoints` variable:\n\n```ts\nconst entrypoints = {  \n  // ...  \n  tools: \"tools/index\",  \n};  \n```\n\nThis will make sure the entrypoint is included in the published package, and in generated documentation.\n\n## Documentation[​](#documentation \"Direct link to Documentation\")\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-release-process","loc":{"lines":{"from":162,"to":185}}}}],["7fd6d05d-58ec-40e3-b13a-1daf57ca59d9",{"pageContent":"### Contribute Documentation[​](#contribute-documentation \"Direct link to Contribute Documentation\")\n\nDocs are largely autogenerated by [TypeDoc](https://typedoc.org/) from the code.\n\nFor that reason, we ask that you add good documentation to all classes and methods.\n\nSimilar to linting, we recognize documentation can be annoying. If you do not want to do it, please contact a project maintainer, and they can help you with it. We do not want this to be a blocker for good code getting contributed.\n\nDocumentation and the skeleton lives under the `docs/` folder. Example code is imported from under the `examples/` folder.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-release-process","loc":{"lines":{"from":185,"to":195}}}}],["04519bea-2e17-4aba-a159-1a4c25c9a298",{"pageContent":"### Running examples[​](#running-examples \"Direct link to Running examples\")\n\nIf you add a new major piece of functionality, it is helpful to add an example to showcase how to use it. Most of our users find examples to be the most helpful kind of documentation.\n\nExamples can be added in the `examples/src` directory, e.g. `examples/src/path/to/example` and should export a `run` function. This example can then be invoked with `yarn example path/to/example` at the top level of the repo.\n\nTo run examples that require an environment variable, you'll need to add a `.env` file under `examples/.env`\n\n### Build Documentation Locally[​](#build-documentation-locally \"Direct link to Build Documentation Locally\")\n\nTo generate and view the documentation locally, change to the project root and run `yarn` to ensure dependencies get installed in both the `docs/` and `examples/` workspaces:\n\n```bash\ncd ..  \nyarn  \n```\n\nThen run:\n\n```bash\nyarn docs  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-release-process","loc":{"lines":{"from":195,"to":216}}}}],["5e00e21b-9ca2-49a1-a2be-1598c3377bf4",{"pageContent":"## Advanced[​](#advanced \"Direct link to Advanced\")\n\n**Environment tests** test whether LangChain works across different JS environments, including Node.js (both ESM and CJS), Edge environments (eg. Cloudflare Workers), and browsers (using Webpack).\n\nTo run the environment tests with Docker, run the following command from the project root:\n\n```bash\nyarn test:exports:docker  \n```\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-release-process","loc":{"lines":{"from":218,"to":233}}}}],["4119bb7e-885f-4142-b797-c3f5c710887b",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Contributing to LangChain\n\n👋 Hi there! Thank you for being interested in contributing to LangChain. As an open source project in a rapidly developing field, we are extremely open to contributions, whether it be in the form of a new feature, improved infra, or better documentation.\n\nTo contribute to this project, please follow a [\"fork and pull request\"](https://docs.github.com/en/get-started/quickstart/contributing-to-projects) workflow. Please do not try to push directly to this repo unless you are a maintainer.\n\n## Quick Links[​](#quick-links \"Direct link to Quick Links\")\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#%EF%B8%8F-tooling","loc":{"lines":{"from":1,"to":16}}}}],["14e213ed-72d8-416e-b178-d31ad54a490a",{"pageContent":"### Not sure what to work on?[​](#not-sure-what-to-work-on \"Direct link to Not sure what to work on?\")\n\nIf you are not sure what to work on, we have a few suggestions:\n\n### New abstractions[​](#new-abstractions \"Direct link to New abstractions\")\n\nWe aim to keep the same APIs between the Python and JS versions of LangChain, where possible. As such we ask that if you have an idea for a new abstraction, please open an issue first to discuss it. This will help us make sure that the API is consistent across both versions. If you're not sure what to work on, we recommend looking at the links above first.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#%EF%B8%8F-tooling","loc":{"lines":{"from":16,"to":24}}}}],["32ef7bee-1be4-4a66-8f22-0266003100ee",{"pageContent":"## Want to add a specific integration?[​](#want-to-add-a-specific-integration \"Direct link to Want to add a specific integration?\")\n\nLangChain supports several different types of integrations with third-party providers and frameworks, including LLM providers (e.g. [OpenAI](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/llms/openai.ts)), vector stores (e.g. [FAISS](https://github.com/ewfian/langchainjs/blob/main/langchain/src/vectorstores/faiss.ts)), document loaders (e.g. [Apify](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/document_loaders/web/apify_dataset.ts)) persistent message history stores (e.g. [Redis](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/stores/message/redis.ts)), and more.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#%EF%B8%8F-tooling","loc":{"lines":{"from":24,"to":26}}}}],["2924a1c0-5830-4872-bcd1-950430e8eb15",{"pageContent":"We welcome such contributions, but ask that you read our dedicated [integration contribution guide](https://github.com/langchain-ai/langchainjs/blob/main/.github/contributing/INTEGRATIONS.md) for specific details and patterns to consider before opening a pull request.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#%EF%B8%8F-tooling","loc":{"lines":{"from":28,"to":28}}}}],["28e9dd9b-7686-430d-a164-8673827dadbe",{"pageContent":"### Want to add a feature that's already in Python?[​](#want-to-add-a-feature-thats-already-in-python \"Direct link to Want to add a feature that's already in Python?\")\n\nIf you're interested in contributing a feature that's already in the [LangChain Python repo](https://github.com/langchain-ai/langchain) and you'd like some help getting started, you can try pasting code snippets and classes into the [LangChain Python to JS translator](https://langchain-translator.vercel.app/).\n\nIt's a chat interface wrapping a fine-tuned `gpt-3.5-turbo` instance trained on prior ported features. This allows the model to innately take into account LangChain-specific code style and imports.\n\nIt's an ongoing project, and feedback on runs will be used to improve the [LangSmith dataset](https://smith.langchain.com) for further fine-tuning! Try it out below:\n\n[https://langchain-translator.vercel.app/](https://langchain-translator.vercel.app/)","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#%EF%B8%8F-tooling","loc":{"lines":{"from":30,"to":38}}}}],["017e599e-014f-47f8-9dac-94af9dbfbc94",{"pageContent":"## 🗺️ Contributing Guidelines[​](#️-contributing-guidelines \"Direct link to 🗺️ Contributing Guidelines\")\n\n### 🚩 GitHub Issues[​](#-github-issues \"Direct link to 🚩 GitHub Issues\")\n\nOur [issues](https://github.com/langchain-ai/langchainjs/issues) page contains with bugs, improvements, and feature requests.\n\nIf you start working on an issue, please assign it to yourself.\n\nIf you are adding an issue, please try to keep it focused on a single modular bug/improvement/feature. If the two issues are related, or blocking, please link them rather than keep them as one single one.\n\nWe will try to keep these issues as up to date as possible, though with the rapid rate of develop in this field some may get out of date. If you notice this happening, please just let us know.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#%EF%B8%8F-tooling","loc":{"lines":{"from":40,"to":52}}}}],["89be2cef-2358-410a-ae86-7eb6d8d7d8bc",{"pageContent":"### 🙋 Getting Help[​](#-getting-help \"Direct link to 🙋 Getting Help\")\n\nAlthough we try to have a developer setup to make it as easy as possible for others to contribute (see below) it is possible that some pain point may arise around environment setup, linting, documentation, or other. Should that occur, please contact a maintainer! Not only do we want to help get you unblocked, but we also want to make sure that the process is smooth for future contributors.\n\nIn a similar vein, we do enforce certain linting, formatting, and documentation standards in the codebase. If you are finding these difficult (or even just annoying) to work with, feel free to contact a maintainer for help - we do not want these to get in the way of getting good code into the codebase.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#%EF%B8%8F-tooling","loc":{"lines":{"from":52,"to":58}}}}],["c606a057-e460-4553-81cd-cd493594d6da",{"pageContent":"### 🏭 Release process[​](#-release-process \"Direct link to 🏭 Release process\")\n\nAs of now, LangChain has an ad hoc release process: releases are cut with high frequency via by a developer and published to [npm](https://www.npmjs.com/package/langchain).\n\nLangChain follows the [semver](https://semver.org/) versioning standard. However, as pre-1.0 software, even patch releases may contain [non-backwards-compatible changes](https://semver.org/#spec-item-4).\n\nIf your contribution has made its way into a release, we will want to give you credit on Twitter (only if you want though)! If you have a Twitter account you would like us to mention, please let us know in the PR or in another manner.\n\n### 🛠️ Tooling[​](#️-tooling \"Direct link to 🛠️ Tooling\")\n\nThis project uses the following tools, which are worth getting familiar with if you plan to contribute:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#%EF%B8%8F-tooling","loc":{"lines":{"from":58,"to":68}}}}],["52b93793-1e04-42dd-a2ff-632f5c1b9e63",{"pageContent":"## 🚀 Quick Start[​](#-quick-start \"Direct link to 🚀 Quick Start\")\n\nClone this repo, then cd into it:\n\n```bash\ncd langchainjs  \n```\n\nNext, try running the following common tasks:\n\n## ✅ Common Tasks[​](#-common-tasks \"Direct link to ✅ Common Tasks\")\n\nOur goal is to make it as easy as possible for you to contribute to this project. All of the below commands should be run from within the `langchain/` directory unless otherwise noted.\n\n```bash\ncd langchain  \n```\n\n### Setup[​](#setup \"Direct link to Setup\")\n\nTo get started, you will need to install the dependencies for the project. To do so, run:\n\n```bash\nyarn  \n```\n\n### Linting[​](#linting \"Direct link to Linting\")\n\nWe use [eslint](https://eslint.org/) to enforce standard lint rules. To run the linter, run:\n\n```bash\nyarn lint  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#%EF%B8%8F-tooling","loc":{"lines":{"from":70,"to":104}}}}],["db623bd1-535b-4d3c-8f46-6fc51808aa37",{"pageContent":"### Formatting[​](#formatting \"Direct link to Formatting\")\n\nWe use [prettier](https://prettier.io) to enforce code formatting style. To run the formatter, run:\n\n```bash\nyarn format  \n```\n\nTo just check for formatting differences, without fixing them, run:\n\n```bash\nyarn format:check  \n```\n\n### Testing[​](#testing \"Direct link to Testing\")\n\nIn general, tests should be added within a `tests/` folder alongside the modules they are testing.\n\n**Unit tests** cover modular logic that does not require calls to outside APIs.\n\nIf you add new logic, please add a unit test. Unit tests should be called `*.test.ts`.\n\nTo run only unit tests, run:\n\n```bash\nyarn test  \n```\n\n##","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#%EF%B8%8F-tooling","loc":{"lines":{"from":104,"to":132}}}}],["e07eba7d-4def-40d1-b3b9-1da5cb34fd72",{"pageContent":"#### Running a single test[​](#running-a-single-test \"Direct link to Running a single test\")\n\nTo run a single test, run:\n\n```bash\nyarn test:single /path/to/yourtest.test.ts  \n```\n\nThis is useful for developing individual features.\n\n**Integration tests** cover logic that requires making calls to outside APIs (often integration with other services).\n\nIf you add support for a new external API, please add a new integration test. Integration tests should be called `*.int.test.ts`.\n\nNote that most integration tests require credentials or other setup. You will likely need to set up a `langchain/.env` file like the example [here](https://github.com/langchain-ai/langchainjs/blob/main/langchain/.env.example).\n\nWe generally recommend only running integration tests with `yarn test:single`, but if you want to run all integration tests, run:\n\n```bash\nyarn test:integration  \n```\n\n### Building[​](#building \"Direct link to Building\")\n\nTo build the project, run:\n\n```bash\nyarn build  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#%EF%B8%8F-tooling","loc":{"lines":{"from":132,"to":162}}}}],["5207dba2-3c5e-4fb7-b019-2c6adebdcfe6",{"pageContent":"### Adding an Entrypoint[​](#adding-an-entrypoint \"Direct link to Adding an Entrypoint\")\n\nLangChain exposes multiple subpaths the user can import from, e.g.\n\n```ts\nimport { OpenAI } from \"langchain/llms/openai\";  \n```\n\nWe call these subpaths \"entrypoints\". In general, you should create a new entrypoint if you are adding a new integration with a 3rd party library. If you're adding self-contained functionality without any external dependencies, you can add it to an existing entrypoint.\n\nIn order to declare a new entrypoint that users can import from, you should edit the `langchain/scripts/create-entrypoints.js` script. To add an entrypoint `tools` that imports from `tools/index.ts` you'd add the following to the `entrypoints` variable:\n\n```ts\nconst entrypoints = {  \n  // ...  \n  tools: \"tools/index\",  \n};  \n```\n\nThis will make sure the entrypoint is included in the published package, and in generated documentation.\n\n## Documentation[​](#documentation \"Direct link to Documentation\")\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#%EF%B8%8F-tooling","loc":{"lines":{"from":162,"to":185}}}}],["bd6a85a8-8ee4-4fc3-ab49-d5d87b365167",{"pageContent":"### Contribute Documentation[​](#contribute-documentation \"Direct link to Contribute Documentation\")\n\nDocs are largely autogenerated by [TypeDoc](https://typedoc.org/) from the code.\n\nFor that reason, we ask that you add good documentation to all classes and methods.\n\nSimilar to linting, we recognize documentation can be annoying. If you do not want to do it, please contact a project maintainer, and they can help you with it. We do not want this to be a blocker for good code getting contributed.\n\nDocumentation and the skeleton lives under the `docs/` folder. Example code is imported from under the `examples/` folder.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#%EF%B8%8F-tooling","loc":{"lines":{"from":185,"to":195}}}}],["a3603590-3b0b-4797-880d-2318c84ace11",{"pageContent":"### Running examples[​](#running-examples \"Direct link to Running examples\")\n\nIf you add a new major piece of functionality, it is helpful to add an example to showcase how to use it. Most of our users find examples to be the most helpful kind of documentation.\n\nExamples can be added in the `examples/src` directory, e.g. `examples/src/path/to/example` and should export a `run` function. This example can then be invoked with `yarn example path/to/example` at the top level of the repo.\n\nTo run examples that require an environment variable, you'll need to add a `.env` file under `examples/.env`\n\n### Build Documentation Locally[​](#build-documentation-locally \"Direct link to Build Documentation Locally\")\n\nTo generate and view the documentation locally, change to the project root and run `yarn` to ensure dependencies get installed in both the `docs/` and `examples/` workspaces:\n\n```bash\ncd ..  \nyarn  \n```\n\nThen run:\n\n```bash\nyarn docs  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#%EF%B8%8F-tooling","loc":{"lines":{"from":195,"to":216}}}}],["62d0a7f5-7084-498d-8cba-8ac33e8c9f79",{"pageContent":"## Advanced[​](#advanced \"Direct link to Advanced\")\n\n**Environment tests** test whether LangChain works across different JS environments, including Node.js (both ESM and CJS), Edge environments (eg. Cloudflare Workers), and browsers (using Webpack).\n\nTo run the environment tests with Docker, run the following command from the project root:\n\n```bash\nyarn test:exports:docker  \n```\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#%EF%B8%8F-tooling","loc":{"lines":{"from":218,"to":233}}}}],["b5a49e01-a372-482b-9a1f-2739548ddaed",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Contributing to LangChain\n\n👋 Hi there! Thank you for being interested in contributing to LangChain. As an open source project in a rapidly developing field, we are extremely open to contributions, whether it be in the form of a new feature, improved infra, or better documentation.\n\nTo contribute to this project, please follow a [\"fork and pull request\"](https://docs.github.com/en/get-started/quickstart/contributing-to-projects) workflow. Please do not try to push directly to this repo unless you are a maintainer.\n\n## Quick Links[​](#quick-links \"Direct link to Quick Links\")\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-quick-start","loc":{"lines":{"from":1,"to":16}}}}],["952e4f11-153c-45ed-9fa4-8e8958075328",{"pageContent":"### Not sure what to work on?[​](#not-sure-what-to-work-on \"Direct link to Not sure what to work on?\")\n\nIf you are not sure what to work on, we have a few suggestions:\n\n### New abstractions[​](#new-abstractions \"Direct link to New abstractions\")\n\nWe aim to keep the same APIs between the Python and JS versions of LangChain, where possible. As such we ask that if you have an idea for a new abstraction, please open an issue first to discuss it. This will help us make sure that the API is consistent across both versions. If you're not sure what to work on, we recommend looking at the links above first.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-quick-start","loc":{"lines":{"from":16,"to":24}}}}],["be82e8b7-b2f7-4c29-8ea7-4151e7542188",{"pageContent":"## Want to add a specific integration?[​](#want-to-add-a-specific-integration \"Direct link to Want to add a specific integration?\")\n\nLangChain supports several different types of integrations with third-party providers and frameworks, including LLM providers (e.g. [OpenAI](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/llms/openai.ts)), vector stores (e.g. [FAISS](https://github.com/ewfian/langchainjs/blob/main/langchain/src/vectorstores/faiss.ts)), document loaders (e.g. [Apify](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/document_loaders/web/apify_dataset.ts)) persistent message history stores (e.g. [Redis](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/stores/message/redis.ts)), and more.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-quick-start","loc":{"lines":{"from":24,"to":26}}}}],["33ef1051-d758-464d-ad95-1ce0bbc015cf",{"pageContent":"We welcome such contributions, but ask that you read our dedicated [integration contribution guide](https://github.com/langchain-ai/langchainjs/blob/main/.github/contributing/INTEGRATIONS.md) for specific details and patterns to consider before opening a pull request.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-quick-start","loc":{"lines":{"from":28,"to":28}}}}],["c0b2e188-eded-4a64-b33f-baae9592986d",{"pageContent":"### Want to add a feature that's already in Python?[​](#want-to-add-a-feature-thats-already-in-python \"Direct link to Want to add a feature that's already in Python?\")\n\nIf you're interested in contributing a feature that's already in the [LangChain Python repo](https://github.com/langchain-ai/langchain) and you'd like some help getting started, you can try pasting code snippets and classes into the [LangChain Python to JS translator](https://langchain-translator.vercel.app/).\n\nIt's a chat interface wrapping a fine-tuned `gpt-3.5-turbo` instance trained on prior ported features. This allows the model to innately take into account LangChain-specific code style and imports.\n\nIt's an ongoing project, and feedback on runs will be used to improve the [LangSmith dataset](https://smith.langchain.com) for further fine-tuning! Try it out below:\n\n[https://langchain-translator.vercel.app/](https://langchain-translator.vercel.app/)","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-quick-start","loc":{"lines":{"from":30,"to":38}}}}],["5b984c90-0a86-4a82-916a-121607a47d38",{"pageContent":"## 🗺️ Contributing Guidelines[​](#️-contributing-guidelines \"Direct link to 🗺️ Contributing Guidelines\")\n\n### 🚩 GitHub Issues[​](#-github-issues \"Direct link to 🚩 GitHub Issues\")\n\nOur [issues](https://github.com/langchain-ai/langchainjs/issues) page contains with bugs, improvements, and feature requests.\n\nIf you start working on an issue, please assign it to yourself.\n\nIf you are adding an issue, please try to keep it focused on a single modular bug/improvement/feature. If the two issues are related, or blocking, please link them rather than keep them as one single one.\n\nWe will try to keep these issues as up to date as possible, though with the rapid rate of develop in this field some may get out of date. If you notice this happening, please just let us know.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-quick-start","loc":{"lines":{"from":40,"to":52}}}}],["cdefdbd1-22cc-4a37-8b11-d08db0f6e756",{"pageContent":"### 🙋 Getting Help[​](#-getting-help \"Direct link to 🙋 Getting Help\")\n\nAlthough we try to have a developer setup to make it as easy as possible for others to contribute (see below) it is possible that some pain point may arise around environment setup, linting, documentation, or other. Should that occur, please contact a maintainer! Not only do we want to help get you unblocked, but we also want to make sure that the process is smooth for future contributors.\n\nIn a similar vein, we do enforce certain linting, formatting, and documentation standards in the codebase. If you are finding these difficult (or even just annoying) to work with, feel free to contact a maintainer for help - we do not want these to get in the way of getting good code into the codebase.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-quick-start","loc":{"lines":{"from":52,"to":58}}}}],["5aa31559-a4c4-4e3a-a175-4ea4e9e30b1e",{"pageContent":"### 🏭 Release process[​](#-release-process \"Direct link to 🏭 Release process\")\n\nAs of now, LangChain has an ad hoc release process: releases are cut with high frequency via by a developer and published to [npm](https://www.npmjs.com/package/langchain).\n\nLangChain follows the [semver](https://semver.org/) versioning standard. However, as pre-1.0 software, even patch releases may contain [non-backwards-compatible changes](https://semver.org/#spec-item-4).\n\nIf your contribution has made its way into a release, we will want to give you credit on Twitter (only if you want though)! If you have a Twitter account you would like us to mention, please let us know in the PR or in another manner.\n\n### 🛠️ Tooling[​](#️-tooling \"Direct link to 🛠️ Tooling\")\n\nThis project uses the following tools, which are worth getting familiar with if you plan to contribute:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-quick-start","loc":{"lines":{"from":58,"to":68}}}}],["b35e7991-a3d5-48fa-84c5-558e9b10024c",{"pageContent":"## 🚀 Quick Start[​](#-quick-start \"Direct link to 🚀 Quick Start\")\n\nClone this repo, then cd into it:\n\n```bash\ncd langchainjs  \n```\n\nNext, try running the following common tasks:\n\n## ✅ Common Tasks[​](#-common-tasks \"Direct link to ✅ Common Tasks\")\n\nOur goal is to make it as easy as possible for you to contribute to this project. All of the below commands should be run from within the `langchain/` directory unless otherwise noted.\n\n```bash\ncd langchain  \n```\n\n### Setup[​](#setup \"Direct link to Setup\")\n\nTo get started, you will need to install the dependencies for the project. To do so, run:\n\n```bash\nyarn  \n```\n\n### Linting[​](#linting \"Direct link to Linting\")\n\nWe use [eslint](https://eslint.org/) to enforce standard lint rules. To run the linter, run:\n\n```bash\nyarn lint  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-quick-start","loc":{"lines":{"from":70,"to":104}}}}],["13272490-8541-459d-92a7-0baa17d1e1ed",{"pageContent":"### Formatting[​](#formatting \"Direct link to Formatting\")\n\nWe use [prettier](https://prettier.io) to enforce code formatting style. To run the formatter, run:\n\n```bash\nyarn format  \n```\n\nTo just check for formatting differences, without fixing them, run:\n\n```bash\nyarn format:check  \n```\n\n### Testing[​](#testing \"Direct link to Testing\")\n\nIn general, tests should be added within a `tests/` folder alongside the modules they are testing.\n\n**Unit tests** cover modular logic that does not require calls to outside APIs.\n\nIf you add new logic, please add a unit test. Unit tests should be called `*.test.ts`.\n\nTo run only unit tests, run:\n\n```bash\nyarn test  \n```\n\n##","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-quick-start","loc":{"lines":{"from":104,"to":132}}}}],["d0ef9122-909a-4f29-8e60-ba4064000fdf",{"pageContent":"#### Running a single test[​](#running-a-single-test \"Direct link to Running a single test\")\n\nTo run a single test, run:\n\n```bash\nyarn test:single /path/to/yourtest.test.ts  \n```\n\nThis is useful for developing individual features.\n\n**Integration tests** cover logic that requires making calls to outside APIs (often integration with other services).\n\nIf you add support for a new external API, please add a new integration test. Integration tests should be called `*.int.test.ts`.\n\nNote that most integration tests require credentials or other setup. You will likely need to set up a `langchain/.env` file like the example [here](https://github.com/langchain-ai/langchainjs/blob/main/langchain/.env.example).\n\nWe generally recommend only running integration tests with `yarn test:single`, but if you want to run all integration tests, run:\n\n```bash\nyarn test:integration  \n```\n\n### Building[​](#building \"Direct link to Building\")\n\nTo build the project, run:\n\n```bash\nyarn build  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-quick-start","loc":{"lines":{"from":132,"to":162}}}}],["abd275eb-7fd7-46ce-b85f-864ec3e98023",{"pageContent":"### Adding an Entrypoint[​](#adding-an-entrypoint \"Direct link to Adding an Entrypoint\")\n\nLangChain exposes multiple subpaths the user can import from, e.g.\n\n```ts\nimport { OpenAI } from \"langchain/llms/openai\";  \n```\n\nWe call these subpaths \"entrypoints\". In general, you should create a new entrypoint if you are adding a new integration with a 3rd party library. If you're adding self-contained functionality without any external dependencies, you can add it to an existing entrypoint.\n\nIn order to declare a new entrypoint that users can import from, you should edit the `langchain/scripts/create-entrypoints.js` script. To add an entrypoint `tools` that imports from `tools/index.ts` you'd add the following to the `entrypoints` variable:\n\n```ts\nconst entrypoints = {  \n  // ...  \n  tools: \"tools/index\",  \n};  \n```\n\nThis will make sure the entrypoint is included in the published package, and in generated documentation.\n\n## Documentation[​](#documentation \"Direct link to Documentation\")\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-quick-start","loc":{"lines":{"from":162,"to":185}}}}],["b6987751-74f1-492f-a6d8-2e5c0caaa165",{"pageContent":"### Contribute Documentation[​](#contribute-documentation \"Direct link to Contribute Documentation\")\n\nDocs are largely autogenerated by [TypeDoc](https://typedoc.org/) from the code.\n\nFor that reason, we ask that you add good documentation to all classes and methods.\n\nSimilar to linting, we recognize documentation can be annoying. If you do not want to do it, please contact a project maintainer, and they can help you with it. We do not want this to be a blocker for good code getting contributed.\n\nDocumentation and the skeleton lives under the `docs/` folder. Example code is imported from under the `examples/` folder.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-quick-start","loc":{"lines":{"from":185,"to":195}}}}],["aec73547-f424-4dfc-8dab-a3cafafc59d1",{"pageContent":"### Running examples[​](#running-examples \"Direct link to Running examples\")\n\nIf you add a new major piece of functionality, it is helpful to add an example to showcase how to use it. Most of our users find examples to be the most helpful kind of documentation.\n\nExamples can be added in the `examples/src` directory, e.g. `examples/src/path/to/example` and should export a `run` function. This example can then be invoked with `yarn example path/to/example` at the top level of the repo.\n\nTo run examples that require an environment variable, you'll need to add a `.env` file under `examples/.env`\n\n### Build Documentation Locally[​](#build-documentation-locally \"Direct link to Build Documentation Locally\")\n\nTo generate and view the documentation locally, change to the project root and run `yarn` to ensure dependencies get installed in both the `docs/` and `examples/` workspaces:\n\n```bash\ncd ..  \nyarn  \n```\n\nThen run:\n\n```bash\nyarn docs  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-quick-start","loc":{"lines":{"from":195,"to":216}}}}],["2d2c08b6-4552-4600-8477-ecdb703623bf",{"pageContent":"## Advanced[​](#advanced \"Direct link to Advanced\")\n\n**Environment tests** test whether LangChain works across different JS environments, including Node.js (both ESM and CJS), Edge environments (eg. Cloudflare Workers), and browsers (using Webpack).\n\nTo run the environment tests with Docker, run the following command from the project root:\n\n```bash\nyarn test:exports:docker  \n```\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-quick-start","loc":{"lines":{"from":218,"to":233}}}}],["0a07705f-9805-4d44-93d7-62c45a619b89",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Contributing to LangChain\n\n👋 Hi there! Thank you for being interested in contributing to LangChain. As an open source project in a rapidly developing field, we are extremely open to contributions, whether it be in the form of a new feature, improved infra, or better documentation.\n\nTo contribute to this project, please follow a [\"fork and pull request\"](https://docs.github.com/en/get-started/quickstart/contributing-to-projects) workflow. Please do not try to push directly to this repo unless you are a maintainer.\n\n## Quick Links[​](#quick-links \"Direct link to Quick Links\")\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-common-tasks","loc":{"lines":{"from":1,"to":16}}}}],["bcd6232a-6b0c-42b6-86e3-b83b54ffb39d",{"pageContent":"### Not sure what to work on?[​](#not-sure-what-to-work-on \"Direct link to Not sure what to work on?\")\n\nIf you are not sure what to work on, we have a few suggestions:\n\n### New abstractions[​](#new-abstractions \"Direct link to New abstractions\")\n\nWe aim to keep the same APIs between the Python and JS versions of LangChain, where possible. As such we ask that if you have an idea for a new abstraction, please open an issue first to discuss it. This will help us make sure that the API is consistent across both versions. If you're not sure what to work on, we recommend looking at the links above first.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-common-tasks","loc":{"lines":{"from":16,"to":24}}}}],["6472b93f-c038-4121-b258-6e3f2da45599",{"pageContent":"## Want to add a specific integration?[​](#want-to-add-a-specific-integration \"Direct link to Want to add a specific integration?\")\n\nLangChain supports several different types of integrations with third-party providers and frameworks, including LLM providers (e.g. [OpenAI](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/llms/openai.ts)), vector stores (e.g. [FAISS](https://github.com/ewfian/langchainjs/blob/main/langchain/src/vectorstores/faiss.ts)), document loaders (e.g. [Apify](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/document_loaders/web/apify_dataset.ts)) persistent message history stores (e.g. [Redis](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/stores/message/redis.ts)), and more.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-common-tasks","loc":{"lines":{"from":24,"to":26}}}}],["33c69b2d-ea62-40f5-b1af-63b0e85f33b9",{"pageContent":"We welcome such contributions, but ask that you read our dedicated [integration contribution guide](https://github.com/langchain-ai/langchainjs/blob/main/.github/contributing/INTEGRATIONS.md) for specific details and patterns to consider before opening a pull request.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-common-tasks","loc":{"lines":{"from":28,"to":28}}}}],["17d5451e-50af-4096-964c-d96faa390fc0",{"pageContent":"### Want to add a feature that's already in Python?[​](#want-to-add-a-feature-thats-already-in-python \"Direct link to Want to add a feature that's already in Python?\")\n\nIf you're interested in contributing a feature that's already in the [LangChain Python repo](https://github.com/langchain-ai/langchain) and you'd like some help getting started, you can try pasting code snippets and classes into the [LangChain Python to JS translator](https://langchain-translator.vercel.app/).\n\nIt's a chat interface wrapping a fine-tuned `gpt-3.5-turbo` instance trained on prior ported features. This allows the model to innately take into account LangChain-specific code style and imports.\n\nIt's an ongoing project, and feedback on runs will be used to improve the [LangSmith dataset](https://smith.langchain.com) for further fine-tuning! Try it out below:\n\n[https://langchain-translator.vercel.app/](https://langchain-translator.vercel.app/)","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-common-tasks","loc":{"lines":{"from":30,"to":38}}}}],["292be507-e90f-48f8-a403-4d21f1130e17",{"pageContent":"## 🗺️ Contributing Guidelines[​](#️-contributing-guidelines \"Direct link to 🗺️ Contributing Guidelines\")\n\n### 🚩 GitHub Issues[​](#-github-issues \"Direct link to 🚩 GitHub Issues\")\n\nOur [issues](https://github.com/langchain-ai/langchainjs/issues) page contains with bugs, improvements, and feature requests.\n\nIf you start working on an issue, please assign it to yourself.\n\nIf you are adding an issue, please try to keep it focused on a single modular bug/improvement/feature. If the two issues are related, or blocking, please link them rather than keep them as one single one.\n\nWe will try to keep these issues as up to date as possible, though with the rapid rate of develop in this field some may get out of date. If you notice this happening, please just let us know.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-common-tasks","loc":{"lines":{"from":40,"to":52}}}}],["b3dd73c3-6f28-4077-802d-ef2495836186",{"pageContent":"### 🙋 Getting Help[​](#-getting-help \"Direct link to 🙋 Getting Help\")\n\nAlthough we try to have a developer setup to make it as easy as possible for others to contribute (see below) it is possible that some pain point may arise around environment setup, linting, documentation, or other. Should that occur, please contact a maintainer! Not only do we want to help get you unblocked, but we also want to make sure that the process is smooth for future contributors.\n\nIn a similar vein, we do enforce certain linting, formatting, and documentation standards in the codebase. If you are finding these difficult (or even just annoying) to work with, feel free to contact a maintainer for help - we do not want these to get in the way of getting good code into the codebase.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-common-tasks","loc":{"lines":{"from":52,"to":58}}}}],["1fddf32c-99b9-48eb-a6b2-bc91419b58f0",{"pageContent":"### 🏭 Release process[​](#-release-process \"Direct link to 🏭 Release process\")\n\nAs of now, LangChain has an ad hoc release process: releases are cut with high frequency via by a developer and published to [npm](https://www.npmjs.com/package/langchain).\n\nLangChain follows the [semver](https://semver.org/) versioning standard. However, as pre-1.0 software, even patch releases may contain [non-backwards-compatible changes](https://semver.org/#spec-item-4).\n\nIf your contribution has made its way into a release, we will want to give you credit on Twitter (only if you want though)! If you have a Twitter account you would like us to mention, please let us know in the PR or in another manner.\n\n### 🛠️ Tooling[​](#️-tooling \"Direct link to 🛠️ Tooling\")\n\nThis project uses the following tools, which are worth getting familiar with if you plan to contribute:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-common-tasks","loc":{"lines":{"from":58,"to":68}}}}],["9c7da22b-780c-4bca-a5e6-13b9e9e7d0cc",{"pageContent":"## 🚀 Quick Start[​](#-quick-start \"Direct link to 🚀 Quick Start\")\n\nClone this repo, then cd into it:\n\n```bash\ncd langchainjs  \n```\n\nNext, try running the following common tasks:\n\n## ✅ Common Tasks[​](#-common-tasks \"Direct link to ✅ Common Tasks\")\n\nOur goal is to make it as easy as possible for you to contribute to this project. All of the below commands should be run from within the `langchain/` directory unless otherwise noted.\n\n```bash\ncd langchain  \n```\n\n### Setup[​](#setup \"Direct link to Setup\")\n\nTo get started, you will need to install the dependencies for the project. To do so, run:\n\n```bash\nyarn  \n```\n\n### Linting[​](#linting \"Direct link to Linting\")\n\nWe use [eslint](https://eslint.org/) to enforce standard lint rules. To run the linter, run:\n\n```bash\nyarn lint  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-common-tasks","loc":{"lines":{"from":70,"to":104}}}}],["0b1fe3d7-6787-4b6b-a337-0df7dabb8657",{"pageContent":"### Formatting[​](#formatting \"Direct link to Formatting\")\n\nWe use [prettier](https://prettier.io) to enforce code formatting style. To run the formatter, run:\n\n```bash\nyarn format  \n```\n\nTo just check for formatting differences, without fixing them, run:\n\n```bash\nyarn format:check  \n```\n\n### Testing[​](#testing \"Direct link to Testing\")\n\nIn general, tests should be added within a `tests/` folder alongside the modules they are testing.\n\n**Unit tests** cover modular logic that does not require calls to outside APIs.\n\nIf you add new logic, please add a unit test. Unit tests should be called `*.test.ts`.\n\nTo run only unit tests, run:\n\n```bash\nyarn test  \n```\n\n##","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-common-tasks","loc":{"lines":{"from":104,"to":132}}}}],["fd9151fe-e1d4-4330-8e23-7d01013050c7",{"pageContent":"#### Running a single test[​](#running-a-single-test \"Direct link to Running a single test\")\n\nTo run a single test, run:\n\n```bash\nyarn test:single /path/to/yourtest.test.ts  \n```\n\nThis is useful for developing individual features.\n\n**Integration tests** cover logic that requires making calls to outside APIs (often integration with other services).\n\nIf you add support for a new external API, please add a new integration test. Integration tests should be called `*.int.test.ts`.\n\nNote that most integration tests require credentials or other setup. You will likely need to set up a `langchain/.env` file like the example [here](https://github.com/langchain-ai/langchainjs/blob/main/langchain/.env.example).\n\nWe generally recommend only running integration tests with `yarn test:single`, but if you want to run all integration tests, run:\n\n```bash\nyarn test:integration  \n```\n\n### Building[​](#building \"Direct link to Building\")\n\nTo build the project, run:\n\n```bash\nyarn build  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-common-tasks","loc":{"lines":{"from":132,"to":162}}}}],["0e18e80c-1a89-42d1-a6e4-ef21a4096f04",{"pageContent":"### Adding an Entrypoint[​](#adding-an-entrypoint \"Direct link to Adding an Entrypoint\")\n\nLangChain exposes multiple subpaths the user can import from, e.g.\n\n```ts\nimport { OpenAI } from \"langchain/llms/openai\";  \n```\n\nWe call these subpaths \"entrypoints\". In general, you should create a new entrypoint if you are adding a new integration with a 3rd party library. If you're adding self-contained functionality without any external dependencies, you can add it to an existing entrypoint.\n\nIn order to declare a new entrypoint that users can import from, you should edit the `langchain/scripts/create-entrypoints.js` script. To add an entrypoint `tools` that imports from `tools/index.ts` you'd add the following to the `entrypoints` variable:\n\n```ts\nconst entrypoints = {  \n  // ...  \n  tools: \"tools/index\",  \n};  \n```\n\nThis will make sure the entrypoint is included in the published package, and in generated documentation.\n\n## Documentation[​](#documentation \"Direct link to Documentation\")\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-common-tasks","loc":{"lines":{"from":162,"to":185}}}}],["d299185c-3078-4807-968c-4e1229d0b4ba",{"pageContent":"### Contribute Documentation[​](#contribute-documentation \"Direct link to Contribute Documentation\")\n\nDocs are largely autogenerated by [TypeDoc](https://typedoc.org/) from the code.\n\nFor that reason, we ask that you add good documentation to all classes and methods.\n\nSimilar to linting, we recognize documentation can be annoying. If you do not want to do it, please contact a project maintainer, and they can help you with it. We do not want this to be a blocker for good code getting contributed.\n\nDocumentation and the skeleton lives under the `docs/` folder. Example code is imported from under the `examples/` folder.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-common-tasks","loc":{"lines":{"from":185,"to":195}}}}],["95446c92-d8c3-4989-8318-72d74cf497b6",{"pageContent":"### Running examples[​](#running-examples \"Direct link to Running examples\")\n\nIf you add a new major piece of functionality, it is helpful to add an example to showcase how to use it. Most of our users find examples to be the most helpful kind of documentation.\n\nExamples can be added in the `examples/src` directory, e.g. `examples/src/path/to/example` and should export a `run` function. This example can then be invoked with `yarn example path/to/example` at the top level of the repo.\n\nTo run examples that require an environment variable, you'll need to add a `.env` file under `examples/.env`\n\n### Build Documentation Locally[​](#build-documentation-locally \"Direct link to Build Documentation Locally\")\n\nTo generate and view the documentation locally, change to the project root and run `yarn` to ensure dependencies get installed in both the `docs/` and `examples/` workspaces:\n\n```bash\ncd ..  \nyarn  \n```\n\nThen run:\n\n```bash\nyarn docs  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-common-tasks","loc":{"lines":{"from":195,"to":216}}}}],["0417b6ac-bcc9-4aaa-8807-e13c38b52336",{"pageContent":"## Advanced[​](#advanced \"Direct link to Advanced\")\n\n**Environment tests** test whether LangChain works across different JS environments, including Node.js (both ESM and CJS), Edge environments (eg. Cloudflare Workers), and browsers (using Webpack).\n\nTo run the environment tests with Docker, run the following command from the project root:\n\n```bash\nyarn test:exports:docker  \n```\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#-common-tasks","loc":{"lines":{"from":218,"to":233}}}}],["c3fb636d-4d29-45b3-844c-7d2f74415dfc",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Contributing to LangChain\n\n👋 Hi there! Thank you for being interested in contributing to LangChain. As an open source project in a rapidly developing field, we are extremely open to contributions, whether it be in the form of a new feature, improved infra, or better documentation.\n\nTo contribute to this project, please follow a [\"fork and pull request\"](https://docs.github.com/en/get-started/quickstart/contributing-to-projects) workflow. Please do not try to push directly to this repo unless you are a maintainer.\n\n## Quick Links[​](#quick-links \"Direct link to Quick Links\")\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#setup","loc":{"lines":{"from":1,"to":16}}}}],["a6f77f6c-4bbe-48f6-a8a6-ed9dac901d4d",{"pageContent":"### Not sure what to work on?[​](#not-sure-what-to-work-on \"Direct link to Not sure what to work on?\")\n\nIf you are not sure what to work on, we have a few suggestions:\n\n### New abstractions[​](#new-abstractions \"Direct link to New abstractions\")\n\nWe aim to keep the same APIs between the Python and JS versions of LangChain, where possible. As such we ask that if you have an idea for a new abstraction, please open an issue first to discuss it. This will help us make sure that the API is consistent across both versions. If you're not sure what to work on, we recommend looking at the links above first.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#setup","loc":{"lines":{"from":16,"to":24}}}}],["ed9782a8-cb21-4d61-91e8-e9cac1965e2c",{"pageContent":"## Want to add a specific integration?[​](#want-to-add-a-specific-integration \"Direct link to Want to add a specific integration?\")\n\nLangChain supports several different types of integrations with third-party providers and frameworks, including LLM providers (e.g. [OpenAI](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/llms/openai.ts)), vector stores (e.g. [FAISS](https://github.com/ewfian/langchainjs/blob/main/langchain/src/vectorstores/faiss.ts)), document loaders (e.g. [Apify](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/document_loaders/web/apify_dataset.ts)) persistent message history stores (e.g. [Redis](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/stores/message/redis.ts)), and more.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#setup","loc":{"lines":{"from":24,"to":26}}}}],["8428a977-1c6c-48bf-add2-0230fad453b9",{"pageContent":"We welcome such contributions, but ask that you read our dedicated [integration contribution guide](https://github.com/langchain-ai/langchainjs/blob/main/.github/contributing/INTEGRATIONS.md) for specific details and patterns to consider before opening a pull request.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#setup","loc":{"lines":{"from":28,"to":28}}}}],["988e0259-31be-45fc-a563-59f22fdbd540",{"pageContent":"### Want to add a feature that's already in Python?[​](#want-to-add-a-feature-thats-already-in-python \"Direct link to Want to add a feature that's already in Python?\")\n\nIf you're interested in contributing a feature that's already in the [LangChain Python repo](https://github.com/langchain-ai/langchain) and you'd like some help getting started, you can try pasting code snippets and classes into the [LangChain Python to JS translator](https://langchain-translator.vercel.app/).\n\nIt's a chat interface wrapping a fine-tuned `gpt-3.5-turbo` instance trained on prior ported features. This allows the model to innately take into account LangChain-specific code style and imports.\n\nIt's an ongoing project, and feedback on runs will be used to improve the [LangSmith dataset](https://smith.langchain.com) for further fine-tuning! Try it out below:\n\n[https://langchain-translator.vercel.app/](https://langchain-translator.vercel.app/)","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#setup","loc":{"lines":{"from":30,"to":38}}}}],["b1ed23aa-da8e-48ab-8836-5eb051eb1641",{"pageContent":"## 🗺️ Contributing Guidelines[​](#️-contributing-guidelines \"Direct link to 🗺️ Contributing Guidelines\")\n\n### 🚩 GitHub Issues[​](#-github-issues \"Direct link to 🚩 GitHub Issues\")\n\nOur [issues](https://github.com/langchain-ai/langchainjs/issues) page contains with bugs, improvements, and feature requests.\n\nIf you start working on an issue, please assign it to yourself.\n\nIf you are adding an issue, please try to keep it focused on a single modular bug/improvement/feature. If the two issues are related, or blocking, please link them rather than keep them as one single one.\n\nWe will try to keep these issues as up to date as possible, though with the rapid rate of develop in this field some may get out of date. If you notice this happening, please just let us know.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#setup","loc":{"lines":{"from":40,"to":52}}}}],["3df25ab1-b205-4b29-b88f-5dc47dee6ac9",{"pageContent":"### 🙋 Getting Help[​](#-getting-help \"Direct link to 🙋 Getting Help\")\n\nAlthough we try to have a developer setup to make it as easy as possible for others to contribute (see below) it is possible that some pain point may arise around environment setup, linting, documentation, or other. Should that occur, please contact a maintainer! Not only do we want to help get you unblocked, but we also want to make sure that the process is smooth for future contributors.\n\nIn a similar vein, we do enforce certain linting, formatting, and documentation standards in the codebase. If you are finding these difficult (or even just annoying) to work with, feel free to contact a maintainer for help - we do not want these to get in the way of getting good code into the codebase.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#setup","loc":{"lines":{"from":52,"to":58}}}}],["cb02c4f7-5004-42a0-8a62-a03f849f59dd",{"pageContent":"### 🏭 Release process[​](#-release-process \"Direct link to 🏭 Release process\")\n\nAs of now, LangChain has an ad hoc release process: releases are cut with high frequency via by a developer and published to [npm](https://www.npmjs.com/package/langchain).\n\nLangChain follows the [semver](https://semver.org/) versioning standard. However, as pre-1.0 software, even patch releases may contain [non-backwards-compatible changes](https://semver.org/#spec-item-4).\n\nIf your contribution has made its way into a release, we will want to give you credit on Twitter (only if you want though)! If you have a Twitter account you would like us to mention, please let us know in the PR or in another manner.\n\n### 🛠️ Tooling[​](#️-tooling \"Direct link to 🛠️ Tooling\")\n\nThis project uses the following tools, which are worth getting familiar with if you plan to contribute:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#setup","loc":{"lines":{"from":58,"to":68}}}}],["038d348c-aa3a-450c-9c62-fb9d25547daa",{"pageContent":"## 🚀 Quick Start[​](#-quick-start \"Direct link to 🚀 Quick Start\")\n\nClone this repo, then cd into it:\n\n```bash\ncd langchainjs  \n```\n\nNext, try running the following common tasks:\n\n## ✅ Common Tasks[​](#-common-tasks \"Direct link to ✅ Common Tasks\")\n\nOur goal is to make it as easy as possible for you to contribute to this project. All of the below commands should be run from within the `langchain/` directory unless otherwise noted.\n\n```bash\ncd langchain  \n```\n\n### Setup[​](#setup \"Direct link to Setup\")\n\nTo get started, you will need to install the dependencies for the project. To do so, run:\n\n```bash\nyarn  \n```\n\n### Linting[​](#linting \"Direct link to Linting\")\n\nWe use [eslint](https://eslint.org/) to enforce standard lint rules. To run the linter, run:\n\n```bash\nyarn lint  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#setup","loc":{"lines":{"from":70,"to":104}}}}],["def0ea66-297d-4671-805d-5566328735ab",{"pageContent":"### Formatting[​](#formatting \"Direct link to Formatting\")\n\nWe use [prettier](https://prettier.io) to enforce code formatting style. To run the formatter, run:\n\n```bash\nyarn format  \n```\n\nTo just check for formatting differences, without fixing them, run:\n\n```bash\nyarn format:check  \n```\n\n### Testing[​](#testing \"Direct link to Testing\")\n\nIn general, tests should be added within a `tests/` folder alongside the modules they are testing.\n\n**Unit tests** cover modular logic that does not require calls to outside APIs.\n\nIf you add new logic, please add a unit test. Unit tests should be called `*.test.ts`.\n\nTo run only unit tests, run:\n\n```bash\nyarn test  \n```\n\n##","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#setup","loc":{"lines":{"from":104,"to":132}}}}],["9a04be2d-b046-46b0-a4ac-1969dce31f4e",{"pageContent":"#### Running a single test[​](#running-a-single-test \"Direct link to Running a single test\")\n\nTo run a single test, run:\n\n```bash\nyarn test:single /path/to/yourtest.test.ts  \n```\n\nThis is useful for developing individual features.\n\n**Integration tests** cover logic that requires making calls to outside APIs (often integration with other services).\n\nIf you add support for a new external API, please add a new integration test. Integration tests should be called `*.int.test.ts`.\n\nNote that most integration tests require credentials or other setup. You will likely need to set up a `langchain/.env` file like the example [here](https://github.com/langchain-ai/langchainjs/blob/main/langchain/.env.example).\n\nWe generally recommend only running integration tests with `yarn test:single`, but if you want to run all integration tests, run:\n\n```bash\nyarn test:integration  \n```\n\n### Building[​](#building \"Direct link to Building\")\n\nTo build the project, run:\n\n```bash\nyarn build  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#setup","loc":{"lines":{"from":132,"to":162}}}}],["12ed1e35-a331-4fd7-a992-046917b5770b",{"pageContent":"### Adding an Entrypoint[​](#adding-an-entrypoint \"Direct link to Adding an Entrypoint\")\n\nLangChain exposes multiple subpaths the user can import from, e.g.\n\n```ts\nimport { OpenAI } from \"langchain/llms/openai\";  \n```\n\nWe call these subpaths \"entrypoints\". In general, you should create a new entrypoint if you are adding a new integration with a 3rd party library. If you're adding self-contained functionality without any external dependencies, you can add it to an existing entrypoint.\n\nIn order to declare a new entrypoint that users can import from, you should edit the `langchain/scripts/create-entrypoints.js` script. To add an entrypoint `tools` that imports from `tools/index.ts` you'd add the following to the `entrypoints` variable:\n\n```ts\nconst entrypoints = {  \n  // ...  \n  tools: \"tools/index\",  \n};  \n```\n\nThis will make sure the entrypoint is included in the published package, and in generated documentation.\n\n## Documentation[​](#documentation \"Direct link to Documentation\")\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#setup","loc":{"lines":{"from":162,"to":185}}}}],["00e9b0c0-8e3a-40b5-8dd8-9d983919a649",{"pageContent":"### Contribute Documentation[​](#contribute-documentation \"Direct link to Contribute Documentation\")\n\nDocs are largely autogenerated by [TypeDoc](https://typedoc.org/) from the code.\n\nFor that reason, we ask that you add good documentation to all classes and methods.\n\nSimilar to linting, we recognize documentation can be annoying. If you do not want to do it, please contact a project maintainer, and they can help you with it. We do not want this to be a blocker for good code getting contributed.\n\nDocumentation and the skeleton lives under the `docs/` folder. Example code is imported from under the `examples/` folder.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#setup","loc":{"lines":{"from":185,"to":195}}}}],["506129e8-4f5b-4a5a-8c3b-a4a46f2175fd",{"pageContent":"### Running examples[​](#running-examples \"Direct link to Running examples\")\n\nIf you add a new major piece of functionality, it is helpful to add an example to showcase how to use it. Most of our users find examples to be the most helpful kind of documentation.\n\nExamples can be added in the `examples/src` directory, e.g. `examples/src/path/to/example` and should export a `run` function. This example can then be invoked with `yarn example path/to/example` at the top level of the repo.\n\nTo run examples that require an environment variable, you'll need to add a `.env` file under `examples/.env`\n\n### Build Documentation Locally[​](#build-documentation-locally \"Direct link to Build Documentation Locally\")\n\nTo generate and view the documentation locally, change to the project root and run `yarn` to ensure dependencies get installed in both the `docs/` and `examples/` workspaces:\n\n```bash\ncd ..  \nyarn  \n```\n\nThen run:\n\n```bash\nyarn docs  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#setup","loc":{"lines":{"from":195,"to":216}}}}],["118950bf-696c-4b1e-9691-a8a6c6792258",{"pageContent":"## Advanced[​](#advanced \"Direct link to Advanced\")\n\n**Environment tests** test whether LangChain works across different JS environments, including Node.js (both ESM and CJS), Edge environments (eg. Cloudflare Workers), and browsers (using Webpack).\n\nTo run the environment tests with Docker, run the following command from the project root:\n\n```bash\nyarn test:exports:docker  \n```\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#setup","loc":{"lines":{"from":218,"to":233}}}}],["69e95ae4-13d8-4750-98ae-288607eaf564",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Contributing to LangChain\n\n👋 Hi there! Thank you for being interested in contributing to LangChain. As an open source project in a rapidly developing field, we are extremely open to contributions, whether it be in the form of a new feature, improved infra, or better documentation.\n\nTo contribute to this project, please follow a [\"fork and pull request\"](https://docs.github.com/en/get-started/quickstart/contributing-to-projects) workflow. Please do not try to push directly to this repo unless you are a maintainer.\n\n## Quick Links[​](#quick-links \"Direct link to Quick Links\")\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#linting","loc":{"lines":{"from":1,"to":16}}}}],["10149817-6882-4ed1-b97b-ead9146301de",{"pageContent":"### Not sure what to work on?[​](#not-sure-what-to-work-on \"Direct link to Not sure what to work on?\")\n\nIf you are not sure what to work on, we have a few suggestions:\n\n### New abstractions[​](#new-abstractions \"Direct link to New abstractions\")\n\nWe aim to keep the same APIs between the Python and JS versions of LangChain, where possible. As such we ask that if you have an idea for a new abstraction, please open an issue first to discuss it. This will help us make sure that the API is consistent across both versions. If you're not sure what to work on, we recommend looking at the links above first.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#linting","loc":{"lines":{"from":16,"to":24}}}}],["0c42c598-e792-4491-903f-173ee89283dd",{"pageContent":"## Want to add a specific integration?[​](#want-to-add-a-specific-integration \"Direct link to Want to add a specific integration?\")\n\nLangChain supports several different types of integrations with third-party providers and frameworks, including LLM providers (e.g. [OpenAI](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/llms/openai.ts)), vector stores (e.g. [FAISS](https://github.com/ewfian/langchainjs/blob/main/langchain/src/vectorstores/faiss.ts)), document loaders (e.g. [Apify](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/document_loaders/web/apify_dataset.ts)) persistent message history stores (e.g. [Redis](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/stores/message/redis.ts)), and more.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#linting","loc":{"lines":{"from":24,"to":26}}}}],["5bbb4a4d-4579-4c96-9f97-8b0c801349c6",{"pageContent":"We welcome such contributions, but ask that you read our dedicated [integration contribution guide](https://github.com/langchain-ai/langchainjs/blob/main/.github/contributing/INTEGRATIONS.md) for specific details and patterns to consider before opening a pull request.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#linting","loc":{"lines":{"from":28,"to":28}}}}],["396570c8-f55e-4f1e-b78e-431f0c2d9a98",{"pageContent":"### Want to add a feature that's already in Python?[​](#want-to-add-a-feature-thats-already-in-python \"Direct link to Want to add a feature that's already in Python?\")\n\nIf you're interested in contributing a feature that's already in the [LangChain Python repo](https://github.com/langchain-ai/langchain) and you'd like some help getting started, you can try pasting code snippets and classes into the [LangChain Python to JS translator](https://langchain-translator.vercel.app/).\n\nIt's a chat interface wrapping a fine-tuned `gpt-3.5-turbo` instance trained on prior ported features. This allows the model to innately take into account LangChain-specific code style and imports.\n\nIt's an ongoing project, and feedback on runs will be used to improve the [LangSmith dataset](https://smith.langchain.com) for further fine-tuning! Try it out below:\n\n[https://langchain-translator.vercel.app/](https://langchain-translator.vercel.app/)","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#linting","loc":{"lines":{"from":30,"to":38}}}}],["1473073e-a42d-4583-906a-5a7c7bb92420",{"pageContent":"## 🗺️ Contributing Guidelines[​](#️-contributing-guidelines \"Direct link to 🗺️ Contributing Guidelines\")\n\n### 🚩 GitHub Issues[​](#-github-issues \"Direct link to 🚩 GitHub Issues\")\n\nOur [issues](https://github.com/langchain-ai/langchainjs/issues) page contains with bugs, improvements, and feature requests.\n\nIf you start working on an issue, please assign it to yourself.\n\nIf you are adding an issue, please try to keep it focused on a single modular bug/improvement/feature. If the two issues are related, or blocking, please link them rather than keep them as one single one.\n\nWe will try to keep these issues as up to date as possible, though with the rapid rate of develop in this field some may get out of date. If you notice this happening, please just let us know.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#linting","loc":{"lines":{"from":40,"to":52}}}}],["f71dc1fa-c865-481e-be6c-5d1cdce02a7b",{"pageContent":"### 🙋 Getting Help[​](#-getting-help \"Direct link to 🙋 Getting Help\")\n\nAlthough we try to have a developer setup to make it as easy as possible for others to contribute (see below) it is possible that some pain point may arise around environment setup, linting, documentation, or other. Should that occur, please contact a maintainer! Not only do we want to help get you unblocked, but we also want to make sure that the process is smooth for future contributors.\n\nIn a similar vein, we do enforce certain linting, formatting, and documentation standards in the codebase. If you are finding these difficult (or even just annoying) to work with, feel free to contact a maintainer for help - we do not want these to get in the way of getting good code into the codebase.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#linting","loc":{"lines":{"from":52,"to":58}}}}],["163a5042-d911-4658-882b-8b24276d376f",{"pageContent":"### 🏭 Release process[​](#-release-process \"Direct link to 🏭 Release process\")\n\nAs of now, LangChain has an ad hoc release process: releases are cut with high frequency via by a developer and published to [npm](https://www.npmjs.com/package/langchain).\n\nLangChain follows the [semver](https://semver.org/) versioning standard. However, as pre-1.0 software, even patch releases may contain [non-backwards-compatible changes](https://semver.org/#spec-item-4).\n\nIf your contribution has made its way into a release, we will want to give you credit on Twitter (only if you want though)! If you have a Twitter account you would like us to mention, please let us know in the PR or in another manner.\n\n### 🛠️ Tooling[​](#️-tooling \"Direct link to 🛠️ Tooling\")\n\nThis project uses the following tools, which are worth getting familiar with if you plan to contribute:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#linting","loc":{"lines":{"from":58,"to":68}}}}],["be3b3e08-3364-47d0-a8bf-ac79fa1bfe52",{"pageContent":"## 🚀 Quick Start[​](#-quick-start \"Direct link to 🚀 Quick Start\")\n\nClone this repo, then cd into it:\n\n```bash\ncd langchainjs  \n```\n\nNext, try running the following common tasks:\n\n## ✅ Common Tasks[​](#-common-tasks \"Direct link to ✅ Common Tasks\")\n\nOur goal is to make it as easy as possible for you to contribute to this project. All of the below commands should be run from within the `langchain/` directory unless otherwise noted.\n\n```bash\ncd langchain  \n```\n\n### Setup[​](#setup \"Direct link to Setup\")\n\nTo get started, you will need to install the dependencies for the project. To do so, run:\n\n```bash\nyarn  \n```\n\n### Linting[​](#linting \"Direct link to Linting\")\n\nWe use [eslint](https://eslint.org/) to enforce standard lint rules. To run the linter, run:\n\n```bash\nyarn lint  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#linting","loc":{"lines":{"from":70,"to":104}}}}],["c82221df-4b3d-44e9-9780-95bada4e005c",{"pageContent":"### Formatting[​](#formatting \"Direct link to Formatting\")\n\nWe use [prettier](https://prettier.io) to enforce code formatting style. To run the formatter, run:\n\n```bash\nyarn format  \n```\n\nTo just check for formatting differences, without fixing them, run:\n\n```bash\nyarn format:check  \n```\n\n### Testing[​](#testing \"Direct link to Testing\")\n\nIn general, tests should be added within a `tests/` folder alongside the modules they are testing.\n\n**Unit tests** cover modular logic that does not require calls to outside APIs.\n\nIf you add new logic, please add a unit test. Unit tests should be called `*.test.ts`.\n\nTo run only unit tests, run:\n\n```bash\nyarn test  \n```\n\n##","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#linting","loc":{"lines":{"from":104,"to":132}}}}],["5258bdf7-b47c-4d69-9fc9-1a1bca10e9b0",{"pageContent":"#### Running a single test[​](#running-a-single-test \"Direct link to Running a single test\")\n\nTo run a single test, run:\n\n```bash\nyarn test:single /path/to/yourtest.test.ts  \n```\n\nThis is useful for developing individual features.\n\n**Integration tests** cover logic that requires making calls to outside APIs (often integration with other services).\n\nIf you add support for a new external API, please add a new integration test. Integration tests should be called `*.int.test.ts`.\n\nNote that most integration tests require credentials or other setup. You will likely need to set up a `langchain/.env` file like the example [here](https://github.com/langchain-ai/langchainjs/blob/main/langchain/.env.example).\n\nWe generally recommend only running integration tests with `yarn test:single`, but if you want to run all integration tests, run:\n\n```bash\nyarn test:integration  \n```\n\n### Building[​](#building \"Direct link to Building\")\n\nTo build the project, run:\n\n```bash\nyarn build  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#linting","loc":{"lines":{"from":132,"to":162}}}}],["4ed8cdba-51f0-424f-9921-c15402d769ea",{"pageContent":"### Adding an Entrypoint[​](#adding-an-entrypoint \"Direct link to Adding an Entrypoint\")\n\nLangChain exposes multiple subpaths the user can import from, e.g.\n\n```ts\nimport { OpenAI } from \"langchain/llms/openai\";  \n```\n\nWe call these subpaths \"entrypoints\". In general, you should create a new entrypoint if you are adding a new integration with a 3rd party library. If you're adding self-contained functionality without any external dependencies, you can add it to an existing entrypoint.\n\nIn order to declare a new entrypoint that users can import from, you should edit the `langchain/scripts/create-entrypoints.js` script. To add an entrypoint `tools` that imports from `tools/index.ts` you'd add the following to the `entrypoints` variable:\n\n```ts\nconst entrypoints = {  \n  // ...  \n  tools: \"tools/index\",  \n};  \n```\n\nThis will make sure the entrypoint is included in the published package, and in generated documentation.\n\n## Documentation[​](#documentation \"Direct link to Documentation\")\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#linting","loc":{"lines":{"from":162,"to":185}}}}],["559d8c01-c794-4245-9367-15c2d9bcb4a2",{"pageContent":"### Contribute Documentation[​](#contribute-documentation \"Direct link to Contribute Documentation\")\n\nDocs are largely autogenerated by [TypeDoc](https://typedoc.org/) from the code.\n\nFor that reason, we ask that you add good documentation to all classes and methods.\n\nSimilar to linting, we recognize documentation can be annoying. If you do not want to do it, please contact a project maintainer, and they can help you with it. We do not want this to be a blocker for good code getting contributed.\n\nDocumentation and the skeleton lives under the `docs/` folder. Example code is imported from under the `examples/` folder.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#linting","loc":{"lines":{"from":185,"to":195}}}}],["4d4bfc22-2183-4995-9a6b-73a6004656d4",{"pageContent":"### Running examples[​](#running-examples \"Direct link to Running examples\")\n\nIf you add a new major piece of functionality, it is helpful to add an example to showcase how to use it. Most of our users find examples to be the most helpful kind of documentation.\n\nExamples can be added in the `examples/src` directory, e.g. `examples/src/path/to/example` and should export a `run` function. This example can then be invoked with `yarn example path/to/example` at the top level of the repo.\n\nTo run examples that require an environment variable, you'll need to add a `.env` file under `examples/.env`\n\n### Build Documentation Locally[​](#build-documentation-locally \"Direct link to Build Documentation Locally\")\n\nTo generate and view the documentation locally, change to the project root and run `yarn` to ensure dependencies get installed in both the `docs/` and `examples/` workspaces:\n\n```bash\ncd ..  \nyarn  \n```\n\nThen run:\n\n```bash\nyarn docs  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#linting","loc":{"lines":{"from":195,"to":216}}}}],["c58dc716-e4fe-4f52-b902-2a35b37a99be",{"pageContent":"## Advanced[​](#advanced \"Direct link to Advanced\")\n\n**Environment tests** test whether LangChain works across different JS environments, including Node.js (both ESM and CJS), Edge environments (eg. Cloudflare Workers), and browsers (using Webpack).\n\nTo run the environment tests with Docker, run the following command from the project root:\n\n```bash\nyarn test:exports:docker  \n```\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#linting","loc":{"lines":{"from":218,"to":233}}}}],["aa92ceb1-1792-4136-a6b7-0588a9b04fb2",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Contributing to LangChain\n\n👋 Hi there! Thank you for being interested in contributing to LangChain. As an open source project in a rapidly developing field, we are extremely open to contributions, whether it be in the form of a new feature, improved infra, or better documentation.\n\nTo contribute to this project, please follow a [\"fork and pull request\"](https://docs.github.com/en/get-started/quickstart/contributing-to-projects) workflow. Please do not try to push directly to this repo unless you are a maintainer.\n\n## Quick Links[​](#quick-links \"Direct link to Quick Links\")\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#formatting","loc":{"lines":{"from":1,"to":16}}}}],["258fe772-cdca-4ce4-86f1-d0753e15951f",{"pageContent":"### Not sure what to work on?[​](#not-sure-what-to-work-on \"Direct link to Not sure what to work on?\")\n\nIf you are not sure what to work on, we have a few suggestions:\n\n### New abstractions[​](#new-abstractions \"Direct link to New abstractions\")\n\nWe aim to keep the same APIs between the Python and JS versions of LangChain, where possible. As such we ask that if you have an idea for a new abstraction, please open an issue first to discuss it. This will help us make sure that the API is consistent across both versions. If you're not sure what to work on, we recommend looking at the links above first.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#formatting","loc":{"lines":{"from":16,"to":24}}}}],["181c0013-ee18-4616-bcb9-6f68a95c93ac",{"pageContent":"## Want to add a specific integration?[​](#want-to-add-a-specific-integration \"Direct link to Want to add a specific integration?\")\n\nLangChain supports several different types of integrations with third-party providers and frameworks, including LLM providers (e.g. [OpenAI](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/llms/openai.ts)), vector stores (e.g. [FAISS](https://github.com/ewfian/langchainjs/blob/main/langchain/src/vectorstores/faiss.ts)), document loaders (e.g. [Apify](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/document_loaders/web/apify_dataset.ts)) persistent message history stores (e.g. [Redis](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/stores/message/redis.ts)), and more.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#formatting","loc":{"lines":{"from":24,"to":26}}}}],["180abfde-7d5f-42b1-8c20-8602f93512c8",{"pageContent":"We welcome such contributions, but ask that you read our dedicated [integration contribution guide](https://github.com/langchain-ai/langchainjs/blob/main/.github/contributing/INTEGRATIONS.md) for specific details and patterns to consider before opening a pull request.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#formatting","loc":{"lines":{"from":28,"to":28}}}}],["3a141e35-6f57-47fd-9bb4-e30e196c177f",{"pageContent":"### Want to add a feature that's already in Python?[​](#want-to-add-a-feature-thats-already-in-python \"Direct link to Want to add a feature that's already in Python?\")\n\nIf you're interested in contributing a feature that's already in the [LangChain Python repo](https://github.com/langchain-ai/langchain) and you'd like some help getting started, you can try pasting code snippets and classes into the [LangChain Python to JS translator](https://langchain-translator.vercel.app/).\n\nIt's a chat interface wrapping a fine-tuned `gpt-3.5-turbo` instance trained on prior ported features. This allows the model to innately take into account LangChain-specific code style and imports.\n\nIt's an ongoing project, and feedback on runs will be used to improve the [LangSmith dataset](https://smith.langchain.com) for further fine-tuning! Try it out below:\n\n[https://langchain-translator.vercel.app/](https://langchain-translator.vercel.app/)","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#formatting","loc":{"lines":{"from":30,"to":38}}}}],["f9dd53e0-0509-4847-bf94-afe30fdd772e",{"pageContent":"## 🗺️ Contributing Guidelines[​](#️-contributing-guidelines \"Direct link to 🗺️ Contributing Guidelines\")\n\n### 🚩 GitHub Issues[​](#-github-issues \"Direct link to 🚩 GitHub Issues\")\n\nOur [issues](https://github.com/langchain-ai/langchainjs/issues) page contains with bugs, improvements, and feature requests.\n\nIf you start working on an issue, please assign it to yourself.\n\nIf you are adding an issue, please try to keep it focused on a single modular bug/improvement/feature. If the two issues are related, or blocking, please link them rather than keep them as one single one.\n\nWe will try to keep these issues as up to date as possible, though with the rapid rate of develop in this field some may get out of date. If you notice this happening, please just let us know.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#formatting","loc":{"lines":{"from":40,"to":52}}}}],["d090aa04-15cb-4610-afce-73b9e8563aec",{"pageContent":"### 🙋 Getting Help[​](#-getting-help \"Direct link to 🙋 Getting Help\")\n\nAlthough we try to have a developer setup to make it as easy as possible for others to contribute (see below) it is possible that some pain point may arise around environment setup, linting, documentation, or other. Should that occur, please contact a maintainer! Not only do we want to help get you unblocked, but we also want to make sure that the process is smooth for future contributors.\n\nIn a similar vein, we do enforce certain linting, formatting, and documentation standards in the codebase. If you are finding these difficult (or even just annoying) to work with, feel free to contact a maintainer for help - we do not want these to get in the way of getting good code into the codebase.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#formatting","loc":{"lines":{"from":52,"to":58}}}}],["a0c2f006-870f-4b94-b2f2-be94835d06b0",{"pageContent":"### 🏭 Release process[​](#-release-process \"Direct link to 🏭 Release process\")\n\nAs of now, LangChain has an ad hoc release process: releases are cut with high frequency via by a developer and published to [npm](https://www.npmjs.com/package/langchain).\n\nLangChain follows the [semver](https://semver.org/) versioning standard. However, as pre-1.0 software, even patch releases may contain [non-backwards-compatible changes](https://semver.org/#spec-item-4).\n\nIf your contribution has made its way into a release, we will want to give you credit on Twitter (only if you want though)! If you have a Twitter account you would like us to mention, please let us know in the PR or in another manner.\n\n### 🛠️ Tooling[​](#️-tooling \"Direct link to 🛠️ Tooling\")\n\nThis project uses the following tools, which are worth getting familiar with if you plan to contribute:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#formatting","loc":{"lines":{"from":58,"to":68}}}}],["b2ca3087-c98f-4c09-b634-dc57470ace55",{"pageContent":"## 🚀 Quick Start[​](#-quick-start \"Direct link to 🚀 Quick Start\")\n\nClone this repo, then cd into it:\n\n```bash\ncd langchainjs  \n```\n\nNext, try running the following common tasks:\n\n## ✅ Common Tasks[​](#-common-tasks \"Direct link to ✅ Common Tasks\")\n\nOur goal is to make it as easy as possible for you to contribute to this project. All of the below commands should be run from within the `langchain/` directory unless otherwise noted.\n\n```bash\ncd langchain  \n```\n\n### Setup[​](#setup \"Direct link to Setup\")\n\nTo get started, you will need to install the dependencies for the project. To do so, run:\n\n```bash\nyarn  \n```\n\n### Linting[​](#linting \"Direct link to Linting\")\n\nWe use [eslint](https://eslint.org/) to enforce standard lint rules. To run the linter, run:\n\n```bash\nyarn lint  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#formatting","loc":{"lines":{"from":70,"to":104}}}}],["ebcf60f3-81c1-4e42-9a00-d0729ee3edcb",{"pageContent":"### Formatting[​](#formatting \"Direct link to Formatting\")\n\nWe use [prettier](https://prettier.io) to enforce code formatting style. To run the formatter, run:\n\n```bash\nyarn format  \n```\n\nTo just check for formatting differences, without fixing them, run:\n\n```bash\nyarn format:check  \n```\n\n### Testing[​](#testing \"Direct link to Testing\")\n\nIn general, tests should be added within a `tests/` folder alongside the modules they are testing.\n\n**Unit tests** cover modular logic that does not require calls to outside APIs.\n\nIf you add new logic, please add a unit test. Unit tests should be called `*.test.ts`.\n\nTo run only unit tests, run:\n\n```bash\nyarn test  \n```\n\n##","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#formatting","loc":{"lines":{"from":104,"to":132}}}}],["8960bc82-00d3-49da-a2d4-84d623f5705b",{"pageContent":"#### Running a single test[​](#running-a-single-test \"Direct link to Running a single test\")\n\nTo run a single test, run:\n\n```bash\nyarn test:single /path/to/yourtest.test.ts  \n```\n\nThis is useful for developing individual features.\n\n**Integration tests** cover logic that requires making calls to outside APIs (often integration with other services).\n\nIf you add support for a new external API, please add a new integration test. Integration tests should be called `*.int.test.ts`.\n\nNote that most integration tests require credentials or other setup. You will likely need to set up a `langchain/.env` file like the example [here](https://github.com/langchain-ai/langchainjs/blob/main/langchain/.env.example).\n\nWe generally recommend only running integration tests with `yarn test:single`, but if you want to run all integration tests, run:\n\n```bash\nyarn test:integration  \n```\n\n### Building[​](#building \"Direct link to Building\")\n\nTo build the project, run:\n\n```bash\nyarn build  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#formatting","loc":{"lines":{"from":132,"to":162}}}}],["4fdab9a5-bbdb-410a-a2a5-713beb03e95f",{"pageContent":"### Adding an Entrypoint[​](#adding-an-entrypoint \"Direct link to Adding an Entrypoint\")\n\nLangChain exposes multiple subpaths the user can import from, e.g.\n\n```ts\nimport { OpenAI } from \"langchain/llms/openai\";  \n```\n\nWe call these subpaths \"entrypoints\". In general, you should create a new entrypoint if you are adding a new integration with a 3rd party library. If you're adding self-contained functionality without any external dependencies, you can add it to an existing entrypoint.\n\nIn order to declare a new entrypoint that users can import from, you should edit the `langchain/scripts/create-entrypoints.js` script. To add an entrypoint `tools` that imports from `tools/index.ts` you'd add the following to the `entrypoints` variable:\n\n```ts\nconst entrypoints = {  \n  // ...  \n  tools: \"tools/index\",  \n};  \n```\n\nThis will make sure the entrypoint is included in the published package, and in generated documentation.\n\n## Documentation[​](#documentation \"Direct link to Documentation\")\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#formatting","loc":{"lines":{"from":162,"to":185}}}}],["e072aa29-975c-44ed-ac5b-ab59db3ebecb",{"pageContent":"### Contribute Documentation[​](#contribute-documentation \"Direct link to Contribute Documentation\")\n\nDocs are largely autogenerated by [TypeDoc](https://typedoc.org/) from the code.\n\nFor that reason, we ask that you add good documentation to all classes and methods.\n\nSimilar to linting, we recognize documentation can be annoying. If you do not want to do it, please contact a project maintainer, and they can help you with it. We do not want this to be a blocker for good code getting contributed.\n\nDocumentation and the skeleton lives under the `docs/` folder. Example code is imported from under the `examples/` folder.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#formatting","loc":{"lines":{"from":185,"to":195}}}}],["6da90f5c-2116-4d4e-95f9-a7de500f0292",{"pageContent":"### Running examples[​](#running-examples \"Direct link to Running examples\")\n\nIf you add a new major piece of functionality, it is helpful to add an example to showcase how to use it. Most of our users find examples to be the most helpful kind of documentation.\n\nExamples can be added in the `examples/src` directory, e.g. `examples/src/path/to/example` and should export a `run` function. This example can then be invoked with `yarn example path/to/example` at the top level of the repo.\n\nTo run examples that require an environment variable, you'll need to add a `.env` file under `examples/.env`\n\n### Build Documentation Locally[​](#build-documentation-locally \"Direct link to Build Documentation Locally\")\n\nTo generate and view the documentation locally, change to the project root and run `yarn` to ensure dependencies get installed in both the `docs/` and `examples/` workspaces:\n\n```bash\ncd ..  \nyarn  \n```\n\nThen run:\n\n```bash\nyarn docs  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#formatting","loc":{"lines":{"from":195,"to":216}}}}],["5e49dab9-2ef9-4afc-ae90-2e44bb40f441",{"pageContent":"## Advanced[​](#advanced \"Direct link to Advanced\")\n\n**Environment tests** test whether LangChain works across different JS environments, including Node.js (both ESM and CJS), Edge environments (eg. Cloudflare Workers), and browsers (using Webpack).\n\nTo run the environment tests with Docker, run the following command from the project root:\n\n```bash\nyarn test:exports:docker  \n```\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#formatting","loc":{"lines":{"from":218,"to":233}}}}],["ce83b53c-6629-4096-8a8b-6bd1f199f82c",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Contributing to LangChain\n\n👋 Hi there! Thank you for being interested in contributing to LangChain. As an open source project in a rapidly developing field, we are extremely open to contributions, whether it be in the form of a new feature, improved infra, or better documentation.\n\nTo contribute to this project, please follow a [\"fork and pull request\"](https://docs.github.com/en/get-started/quickstart/contributing-to-projects) workflow. Please do not try to push directly to this repo unless you are a maintainer.\n\n## Quick Links[​](#quick-links \"Direct link to Quick Links\")\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#testing","loc":{"lines":{"from":1,"to":16}}}}],["d84d321b-7bcc-4d92-bae8-34d62177a053",{"pageContent":"### Not sure what to work on?[​](#not-sure-what-to-work-on \"Direct link to Not sure what to work on?\")\n\nIf you are not sure what to work on, we have a few suggestions:\n\n### New abstractions[​](#new-abstractions \"Direct link to New abstractions\")\n\nWe aim to keep the same APIs between the Python and JS versions of LangChain, where possible. As such we ask that if you have an idea for a new abstraction, please open an issue first to discuss it. This will help us make sure that the API is consistent across both versions. If you're not sure what to work on, we recommend looking at the links above first.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#testing","loc":{"lines":{"from":16,"to":24}}}}],["6730a484-1d61-438f-8a08-dbcd3806ac62",{"pageContent":"## Want to add a specific integration?[​](#want-to-add-a-specific-integration \"Direct link to Want to add a specific integration?\")\n\nLangChain supports several different types of integrations with third-party providers and frameworks, including LLM providers (e.g. [OpenAI](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/llms/openai.ts)), vector stores (e.g. [FAISS](https://github.com/ewfian/langchainjs/blob/main/langchain/src/vectorstores/faiss.ts)), document loaders (e.g. [Apify](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/document_loaders/web/apify_dataset.ts)) persistent message history stores (e.g. [Redis](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/stores/message/redis.ts)), and more.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#testing","loc":{"lines":{"from":24,"to":26}}}}],["ea8b9226-c8f6-45f5-8a56-422e505efbf7",{"pageContent":"We welcome such contributions, but ask that you read our dedicated [integration contribution guide](https://github.com/langchain-ai/langchainjs/blob/main/.github/contributing/INTEGRATIONS.md) for specific details and patterns to consider before opening a pull request.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#testing","loc":{"lines":{"from":28,"to":28}}}}],["768eac79-6da7-4fa0-a8de-d3032ef0ac5a",{"pageContent":"### Want to add a feature that's already in Python?[​](#want-to-add-a-feature-thats-already-in-python \"Direct link to Want to add a feature that's already in Python?\")\n\nIf you're interested in contributing a feature that's already in the [LangChain Python repo](https://github.com/langchain-ai/langchain) and you'd like some help getting started, you can try pasting code snippets and classes into the [LangChain Python to JS translator](https://langchain-translator.vercel.app/).\n\nIt's a chat interface wrapping a fine-tuned `gpt-3.5-turbo` instance trained on prior ported features. This allows the model to innately take into account LangChain-specific code style and imports.\n\nIt's an ongoing project, and feedback on runs will be used to improve the [LangSmith dataset](https://smith.langchain.com) for further fine-tuning! Try it out below:\n\n[https://langchain-translator.vercel.app/](https://langchain-translator.vercel.app/)","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#testing","loc":{"lines":{"from":30,"to":38}}}}],["acc05366-9ec3-4507-acf8-d0a349b41cd9",{"pageContent":"## 🗺️ Contributing Guidelines[​](#️-contributing-guidelines \"Direct link to 🗺️ Contributing Guidelines\")\n\n### 🚩 GitHub Issues[​](#-github-issues \"Direct link to 🚩 GitHub Issues\")\n\nOur [issues](https://github.com/langchain-ai/langchainjs/issues) page contains with bugs, improvements, and feature requests.\n\nIf you start working on an issue, please assign it to yourself.\n\nIf you are adding an issue, please try to keep it focused on a single modular bug/improvement/feature. If the two issues are related, or blocking, please link them rather than keep them as one single one.\n\nWe will try to keep these issues as up to date as possible, though with the rapid rate of develop in this field some may get out of date. If you notice this happening, please just let us know.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#testing","loc":{"lines":{"from":40,"to":52}}}}],["2c6042fa-f94d-4e46-8ec1-ef6230d0db31",{"pageContent":"### 🙋 Getting Help[​](#-getting-help \"Direct link to 🙋 Getting Help\")\n\nAlthough we try to have a developer setup to make it as easy as possible for others to contribute (see below) it is possible that some pain point may arise around environment setup, linting, documentation, or other. Should that occur, please contact a maintainer! Not only do we want to help get you unblocked, but we also want to make sure that the process is smooth for future contributors.\n\nIn a similar vein, we do enforce certain linting, formatting, and documentation standards in the codebase. If you are finding these difficult (or even just annoying) to work with, feel free to contact a maintainer for help - we do not want these to get in the way of getting good code into the codebase.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#testing","loc":{"lines":{"from":52,"to":58}}}}],["696fe22f-ca93-4b9a-814e-24fbd53698e5",{"pageContent":"### 🏭 Release process[​](#-release-process \"Direct link to 🏭 Release process\")\n\nAs of now, LangChain has an ad hoc release process: releases are cut with high frequency via by a developer and published to [npm](https://www.npmjs.com/package/langchain).\n\nLangChain follows the [semver](https://semver.org/) versioning standard. However, as pre-1.0 software, even patch releases may contain [non-backwards-compatible changes](https://semver.org/#spec-item-4).\n\nIf your contribution has made its way into a release, we will want to give you credit on Twitter (only if you want though)! If you have a Twitter account you would like us to mention, please let us know in the PR or in another manner.\n\n### 🛠️ Tooling[​](#️-tooling \"Direct link to 🛠️ Tooling\")\n\nThis project uses the following tools, which are worth getting familiar with if you plan to contribute:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#testing","loc":{"lines":{"from":58,"to":68}}}}],["edb0de9c-b829-4195-b832-806fba88e1ac",{"pageContent":"## 🚀 Quick Start[​](#-quick-start \"Direct link to 🚀 Quick Start\")\n\nClone this repo, then cd into it:\n\n```bash\ncd langchainjs  \n```\n\nNext, try running the following common tasks:\n\n## ✅ Common Tasks[​](#-common-tasks \"Direct link to ✅ Common Tasks\")\n\nOur goal is to make it as easy as possible for you to contribute to this project. All of the below commands should be run from within the `langchain/` directory unless otherwise noted.\n\n```bash\ncd langchain  \n```\n\n### Setup[​](#setup \"Direct link to Setup\")\n\nTo get started, you will need to install the dependencies for the project. To do so, run:\n\n```bash\nyarn  \n```\n\n### Linting[​](#linting \"Direct link to Linting\")\n\nWe use [eslint](https://eslint.org/) to enforce standard lint rules. To run the linter, run:\n\n```bash\nyarn lint  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#testing","loc":{"lines":{"from":70,"to":104}}}}],["a21fd8c7-744b-4d6b-b410-d1a5043e924f",{"pageContent":"### Formatting[​](#formatting \"Direct link to Formatting\")\n\nWe use [prettier](https://prettier.io) to enforce code formatting style. To run the formatter, run:\n\n```bash\nyarn format  \n```\n\nTo just check for formatting differences, without fixing them, run:\n\n```bash\nyarn format:check  \n```\n\n### Testing[​](#testing \"Direct link to Testing\")\n\nIn general, tests should be added within a `tests/` folder alongside the modules they are testing.\n\n**Unit tests** cover modular logic that does not require calls to outside APIs.\n\nIf you add new logic, please add a unit test. Unit tests should be called `*.test.ts`.\n\nTo run only unit tests, run:\n\n```bash\nyarn test  \n```\n\n##","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#testing","loc":{"lines":{"from":104,"to":132}}}}],["04d588f9-47d8-452a-9cc2-3ee258004a20",{"pageContent":"#### Running a single test[​](#running-a-single-test \"Direct link to Running a single test\")\n\nTo run a single test, run:\n\n```bash\nyarn test:single /path/to/yourtest.test.ts  \n```\n\nThis is useful for developing individual features.\n\n**Integration tests** cover logic that requires making calls to outside APIs (often integration with other services).\n\nIf you add support for a new external API, please add a new integration test. Integration tests should be called `*.int.test.ts`.\n\nNote that most integration tests require credentials or other setup. You will likely need to set up a `langchain/.env` file like the example [here](https://github.com/langchain-ai/langchainjs/blob/main/langchain/.env.example).\n\nWe generally recommend only running integration tests with `yarn test:single`, but if you want to run all integration tests, run:\n\n```bash\nyarn test:integration  \n```\n\n### Building[​](#building \"Direct link to Building\")\n\nTo build the project, run:\n\n```bash\nyarn build  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#testing","loc":{"lines":{"from":132,"to":162}}}}],["f39fcf46-6de4-4b9d-b8ec-ffd6961a9f14",{"pageContent":"### Adding an Entrypoint[​](#adding-an-entrypoint \"Direct link to Adding an Entrypoint\")\n\nLangChain exposes multiple subpaths the user can import from, e.g.\n\n```ts\nimport { OpenAI } from \"langchain/llms/openai\";  \n```\n\nWe call these subpaths \"entrypoints\". In general, you should create a new entrypoint if you are adding a new integration with a 3rd party library. If you're adding self-contained functionality without any external dependencies, you can add it to an existing entrypoint.\n\nIn order to declare a new entrypoint that users can import from, you should edit the `langchain/scripts/create-entrypoints.js` script. To add an entrypoint `tools` that imports from `tools/index.ts` you'd add the following to the `entrypoints` variable:\n\n```ts\nconst entrypoints = {  \n  // ...  \n  tools: \"tools/index\",  \n};  \n```\n\nThis will make sure the entrypoint is included in the published package, and in generated documentation.\n\n## Documentation[​](#documentation \"Direct link to Documentation\")\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#testing","loc":{"lines":{"from":162,"to":185}}}}],["622b9a08-3a4c-4038-8e1c-a86d013f438d",{"pageContent":"### Contribute Documentation[​](#contribute-documentation \"Direct link to Contribute Documentation\")\n\nDocs are largely autogenerated by [TypeDoc](https://typedoc.org/) from the code.\n\nFor that reason, we ask that you add good documentation to all classes and methods.\n\nSimilar to linting, we recognize documentation can be annoying. If you do not want to do it, please contact a project maintainer, and they can help you with it. We do not want this to be a blocker for good code getting contributed.\n\nDocumentation and the skeleton lives under the `docs/` folder. Example code is imported from under the `examples/` folder.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#testing","loc":{"lines":{"from":185,"to":195}}}}],["409290f4-20ea-48fb-8d70-ba167ec2d9f3",{"pageContent":"### Running examples[​](#running-examples \"Direct link to Running examples\")\n\nIf you add a new major piece of functionality, it is helpful to add an example to showcase how to use it. Most of our users find examples to be the most helpful kind of documentation.\n\nExamples can be added in the `examples/src` directory, e.g. `examples/src/path/to/example` and should export a `run` function. This example can then be invoked with `yarn example path/to/example` at the top level of the repo.\n\nTo run examples that require an environment variable, you'll need to add a `.env` file under `examples/.env`\n\n### Build Documentation Locally[​](#build-documentation-locally \"Direct link to Build Documentation Locally\")\n\nTo generate and view the documentation locally, change to the project root and run `yarn` to ensure dependencies get installed in both the `docs/` and `examples/` workspaces:\n\n```bash\ncd ..  \nyarn  \n```\n\nThen run:\n\n```bash\nyarn docs  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#testing","loc":{"lines":{"from":195,"to":216}}}}],["ff26c544-c872-4776-a282-2e5ecb399531",{"pageContent":"## Advanced[​](#advanced \"Direct link to Advanced\")\n\n**Environment tests** test whether LangChain works across different JS environments, including Node.js (both ESM and CJS), Edge environments (eg. Cloudflare Workers), and browsers (using Webpack).\n\nTo run the environment tests with Docker, run the following command from the project root:\n\n```bash\nyarn test:exports:docker  \n```\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#testing","loc":{"lines":{"from":218,"to":233}}}}],["0472f915-a185-49fe-9dac-79f873bc0879",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Contributing to LangChain\n\n👋 Hi there! Thank you for being interested in contributing to LangChain. As an open source project in a rapidly developing field, we are extremely open to contributions, whether it be in the form of a new feature, improved infra, or better documentation.\n\nTo contribute to this project, please follow a [\"fork and pull request\"](https://docs.github.com/en/get-started/quickstart/contributing-to-projects) workflow. Please do not try to push directly to this repo unless you are a maintainer.\n\n## Quick Links[​](#quick-links \"Direct link to Quick Links\")\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#running-a-single-test","loc":{"lines":{"from":1,"to":16}}}}],["43a09602-972e-4f15-ac6a-5d35e85b9596",{"pageContent":"### Not sure what to work on?[​](#not-sure-what-to-work-on \"Direct link to Not sure what to work on?\")\n\nIf you are not sure what to work on, we have a few suggestions:\n\n### New abstractions[​](#new-abstractions \"Direct link to New abstractions\")\n\nWe aim to keep the same APIs between the Python and JS versions of LangChain, where possible. As such we ask that if you have an idea for a new abstraction, please open an issue first to discuss it. This will help us make sure that the API is consistent across both versions. If you're not sure what to work on, we recommend looking at the links above first.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#running-a-single-test","loc":{"lines":{"from":16,"to":24}}}}],["99ad5f62-3e2e-4d68-b4ab-89bb8fdbfe79",{"pageContent":"## Want to add a specific integration?[​](#want-to-add-a-specific-integration \"Direct link to Want to add a specific integration?\")\n\nLangChain supports several different types of integrations with third-party providers and frameworks, including LLM providers (e.g. [OpenAI](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/llms/openai.ts)), vector stores (e.g. [FAISS](https://github.com/ewfian/langchainjs/blob/main/langchain/src/vectorstores/faiss.ts)), document loaders (e.g. [Apify](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/document_loaders/web/apify_dataset.ts)) persistent message history stores (e.g. [Redis](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/stores/message/redis.ts)), and more.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#running-a-single-test","loc":{"lines":{"from":24,"to":26}}}}],["7fa67578-83dc-43e9-bc74-3c4319ab0cf0",{"pageContent":"We welcome such contributions, but ask that you read our dedicated [integration contribution guide](https://github.com/langchain-ai/langchainjs/blob/main/.github/contributing/INTEGRATIONS.md) for specific details and patterns to consider before opening a pull request.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#running-a-single-test","loc":{"lines":{"from":28,"to":28}}}}],["be8441d2-1aae-4ae9-82ef-3dc5ee059de9",{"pageContent":"### Want to add a feature that's already in Python?[​](#want-to-add-a-feature-thats-already-in-python \"Direct link to Want to add a feature that's already in Python?\")\n\nIf you're interested in contributing a feature that's already in the [LangChain Python repo](https://github.com/langchain-ai/langchain) and you'd like some help getting started, you can try pasting code snippets and classes into the [LangChain Python to JS translator](https://langchain-translator.vercel.app/).\n\nIt's a chat interface wrapping a fine-tuned `gpt-3.5-turbo` instance trained on prior ported features. This allows the model to innately take into account LangChain-specific code style and imports.\n\nIt's an ongoing project, and feedback on runs will be used to improve the [LangSmith dataset](https://smith.langchain.com) for further fine-tuning! Try it out below:\n\n[https://langchain-translator.vercel.app/](https://langchain-translator.vercel.app/)","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#running-a-single-test","loc":{"lines":{"from":30,"to":38}}}}],["74cbf862-d27a-43e1-bb41-2fbdafbb8d76",{"pageContent":"## 🗺️ Contributing Guidelines[​](#️-contributing-guidelines \"Direct link to 🗺️ Contributing Guidelines\")\n\n### 🚩 GitHub Issues[​](#-github-issues \"Direct link to 🚩 GitHub Issues\")\n\nOur [issues](https://github.com/langchain-ai/langchainjs/issues) page contains with bugs, improvements, and feature requests.\n\nIf you start working on an issue, please assign it to yourself.\n\nIf you are adding an issue, please try to keep it focused on a single modular bug/improvement/feature. If the two issues are related, or blocking, please link them rather than keep them as one single one.\n\nWe will try to keep these issues as up to date as possible, though with the rapid rate of develop in this field some may get out of date. If you notice this happening, please just let us know.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#running-a-single-test","loc":{"lines":{"from":40,"to":52}}}}],["47ba064a-6591-4795-96cf-cae61dddd280",{"pageContent":"### 🙋 Getting Help[​](#-getting-help \"Direct link to 🙋 Getting Help\")\n\nAlthough we try to have a developer setup to make it as easy as possible for others to contribute (see below) it is possible that some pain point may arise around environment setup, linting, documentation, or other. Should that occur, please contact a maintainer! Not only do we want to help get you unblocked, but we also want to make sure that the process is smooth for future contributors.\n\nIn a similar vein, we do enforce certain linting, formatting, and documentation standards in the codebase. If you are finding these difficult (or even just annoying) to work with, feel free to contact a maintainer for help - we do not want these to get in the way of getting good code into the codebase.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#running-a-single-test","loc":{"lines":{"from":52,"to":58}}}}],["7b17639e-3f2b-4dbe-b1d0-c6241227bb16",{"pageContent":"### 🏭 Release process[​](#-release-process \"Direct link to 🏭 Release process\")\n\nAs of now, LangChain has an ad hoc release process: releases are cut with high frequency via by a developer and published to [npm](https://www.npmjs.com/package/langchain).\n\nLangChain follows the [semver](https://semver.org/) versioning standard. However, as pre-1.0 software, even patch releases may contain [non-backwards-compatible changes](https://semver.org/#spec-item-4).\n\nIf your contribution has made its way into a release, we will want to give you credit on Twitter (only if you want though)! If you have a Twitter account you would like us to mention, please let us know in the PR or in another manner.\n\n### 🛠️ Tooling[​](#️-tooling \"Direct link to 🛠️ Tooling\")\n\nThis project uses the following tools, which are worth getting familiar with if you plan to contribute:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#running-a-single-test","loc":{"lines":{"from":58,"to":68}}}}],["67aa7bc1-590f-4216-8796-330cbb9a884a",{"pageContent":"## 🚀 Quick Start[​](#-quick-start \"Direct link to 🚀 Quick Start\")\n\nClone this repo, then cd into it:\n\n```bash\ncd langchainjs  \n```\n\nNext, try running the following common tasks:\n\n## ✅ Common Tasks[​](#-common-tasks \"Direct link to ✅ Common Tasks\")\n\nOur goal is to make it as easy as possible for you to contribute to this project. All of the below commands should be run from within the `langchain/` directory unless otherwise noted.\n\n```bash\ncd langchain  \n```\n\n### Setup[​](#setup \"Direct link to Setup\")\n\nTo get started, you will need to install the dependencies for the project. To do so, run:\n\n```bash\nyarn  \n```\n\n### Linting[​](#linting \"Direct link to Linting\")\n\nWe use [eslint](https://eslint.org/) to enforce standard lint rules. To run the linter, run:\n\n```bash\nyarn lint  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#running-a-single-test","loc":{"lines":{"from":70,"to":104}}}}],["b68a5545-381b-4e3f-8106-7f173a7481a1",{"pageContent":"### Formatting[​](#formatting \"Direct link to Formatting\")\n\nWe use [prettier](https://prettier.io) to enforce code formatting style. To run the formatter, run:\n\n```bash\nyarn format  \n```\n\nTo just check for formatting differences, without fixing them, run:\n\n```bash\nyarn format:check  \n```\n\n### Testing[​](#testing \"Direct link to Testing\")\n\nIn general, tests should be added within a `tests/` folder alongside the modules they are testing.\n\n**Unit tests** cover modular logic that does not require calls to outside APIs.\n\nIf you add new logic, please add a unit test. Unit tests should be called `*.test.ts`.\n\nTo run only unit tests, run:\n\n```bash\nyarn test  \n```\n\n##","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#running-a-single-test","loc":{"lines":{"from":104,"to":132}}}}],["935a932e-701d-4ce7-9189-5e12b42aece8",{"pageContent":"#### Running a single test[​](#running-a-single-test \"Direct link to Running a single test\")\n\nTo run a single test, run:\n\n```bash\nyarn test:single /path/to/yourtest.test.ts  \n```\n\nThis is useful for developing individual features.\n\n**Integration tests** cover logic that requires making calls to outside APIs (often integration with other services).\n\nIf you add support for a new external API, please add a new integration test. Integration tests should be called `*.int.test.ts`.\n\nNote that most integration tests require credentials or other setup. You will likely need to set up a `langchain/.env` file like the example [here](https://github.com/langchain-ai/langchainjs/blob/main/langchain/.env.example).\n\nWe generally recommend only running integration tests with `yarn test:single`, but if you want to run all integration tests, run:\n\n```bash\nyarn test:integration  \n```\n\n### Building[​](#building \"Direct link to Building\")\n\nTo build the project, run:\n\n```bash\nyarn build  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#running-a-single-test","loc":{"lines":{"from":132,"to":162}}}}],["93b5e254-036f-4cf6-bcbd-6d6bd7215c13",{"pageContent":"### Adding an Entrypoint[​](#adding-an-entrypoint \"Direct link to Adding an Entrypoint\")\n\nLangChain exposes multiple subpaths the user can import from, e.g.\n\n```ts\nimport { OpenAI } from \"langchain/llms/openai\";  \n```\n\nWe call these subpaths \"entrypoints\". In general, you should create a new entrypoint if you are adding a new integration with a 3rd party library. If you're adding self-contained functionality without any external dependencies, you can add it to an existing entrypoint.\n\nIn order to declare a new entrypoint that users can import from, you should edit the `langchain/scripts/create-entrypoints.js` script. To add an entrypoint `tools` that imports from `tools/index.ts` you'd add the following to the `entrypoints` variable:\n\n```ts\nconst entrypoints = {  \n  // ...  \n  tools: \"tools/index\",  \n};  \n```\n\nThis will make sure the entrypoint is included in the published package, and in generated documentation.\n\n## Documentation[​](#documentation \"Direct link to Documentation\")\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#running-a-single-test","loc":{"lines":{"from":162,"to":185}}}}],["0c2686be-df4e-4e1b-9d80-944b995d2483",{"pageContent":"### Contribute Documentation[​](#contribute-documentation \"Direct link to Contribute Documentation\")\n\nDocs are largely autogenerated by [TypeDoc](https://typedoc.org/) from the code.\n\nFor that reason, we ask that you add good documentation to all classes and methods.\n\nSimilar to linting, we recognize documentation can be annoying. If you do not want to do it, please contact a project maintainer, and they can help you with it. We do not want this to be a blocker for good code getting contributed.\n\nDocumentation and the skeleton lives under the `docs/` folder. Example code is imported from under the `examples/` folder.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#running-a-single-test","loc":{"lines":{"from":185,"to":195}}}}],["411e31e3-86f0-493f-9943-86abeb0c437f",{"pageContent":"### Running examples[​](#running-examples \"Direct link to Running examples\")\n\nIf you add a new major piece of functionality, it is helpful to add an example to showcase how to use it. Most of our users find examples to be the most helpful kind of documentation.\n\nExamples can be added in the `examples/src` directory, e.g. `examples/src/path/to/example` and should export a `run` function. This example can then be invoked with `yarn example path/to/example` at the top level of the repo.\n\nTo run examples that require an environment variable, you'll need to add a `.env` file under `examples/.env`\n\n### Build Documentation Locally[​](#build-documentation-locally \"Direct link to Build Documentation Locally\")\n\nTo generate and view the documentation locally, change to the project root and run `yarn` to ensure dependencies get installed in both the `docs/` and `examples/` workspaces:\n\n```bash\ncd ..  \nyarn  \n```\n\nThen run:\n\n```bash\nyarn docs  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#running-a-single-test","loc":{"lines":{"from":195,"to":216}}}}],["c3f39d9a-ad81-4b5f-b9f6-50cd5140bb57",{"pageContent":"## Advanced[​](#advanced \"Direct link to Advanced\")\n\n**Environment tests** test whether LangChain works across different JS environments, including Node.js (both ESM and CJS), Edge environments (eg. Cloudflare Workers), and browsers (using Webpack).\n\nTo run the environment tests with Docker, run the following command from the project root:\n\n```bash\nyarn test:exports:docker  \n```\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#running-a-single-test","loc":{"lines":{"from":218,"to":233}}}}],["b664b258-4d60-4e60-82a7-75e9d13d4b3f",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Contributing to LangChain\n\n👋 Hi there! Thank you for being interested in contributing to LangChain. As an open source project in a rapidly developing field, we are extremely open to contributions, whether it be in the form of a new feature, improved infra, or better documentation.\n\nTo contribute to this project, please follow a [\"fork and pull request\"](https://docs.github.com/en/get-started/quickstart/contributing-to-projects) workflow. Please do not try to push directly to this repo unless you are a maintainer.\n\n## Quick Links[​](#quick-links \"Direct link to Quick Links\")\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#building","loc":{"lines":{"from":1,"to":16}}}}],["812508bc-a5bc-43ef-af98-d8f2f223f492",{"pageContent":"### Not sure what to work on?[​](#not-sure-what-to-work-on \"Direct link to Not sure what to work on?\")\n\nIf you are not sure what to work on, we have a few suggestions:\n\n### New abstractions[​](#new-abstractions \"Direct link to New abstractions\")\n\nWe aim to keep the same APIs between the Python and JS versions of LangChain, where possible. As such we ask that if you have an idea for a new abstraction, please open an issue first to discuss it. This will help us make sure that the API is consistent across both versions. If you're not sure what to work on, we recommend looking at the links above first.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#building","loc":{"lines":{"from":16,"to":24}}}}],["c0f4dbd5-7e6f-4f15-8b92-9b9a3c1e545e",{"pageContent":"## Want to add a specific integration?[​](#want-to-add-a-specific-integration \"Direct link to Want to add a specific integration?\")\n\nLangChain supports several different types of integrations with third-party providers and frameworks, including LLM providers (e.g. [OpenAI](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/llms/openai.ts)), vector stores (e.g. [FAISS](https://github.com/ewfian/langchainjs/blob/main/langchain/src/vectorstores/faiss.ts)), document loaders (e.g. [Apify](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/document_loaders/web/apify_dataset.ts)) persistent message history stores (e.g. [Redis](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/stores/message/redis.ts)), and more.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#building","loc":{"lines":{"from":24,"to":26}}}}],["2309108f-986a-408c-a8ab-0cb514629ef0",{"pageContent":"We welcome such contributions, but ask that you read our dedicated [integration contribution guide](https://github.com/langchain-ai/langchainjs/blob/main/.github/contributing/INTEGRATIONS.md) for specific details and patterns to consider before opening a pull request.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#building","loc":{"lines":{"from":28,"to":28}}}}],["af170cd1-f384-4e3e-8d44-eaa95b0c36c4",{"pageContent":"### Want to add a feature that's already in Python?[​](#want-to-add-a-feature-thats-already-in-python \"Direct link to Want to add a feature that's already in Python?\")\n\nIf you're interested in contributing a feature that's already in the [LangChain Python repo](https://github.com/langchain-ai/langchain) and you'd like some help getting started, you can try pasting code snippets and classes into the [LangChain Python to JS translator](https://langchain-translator.vercel.app/).\n\nIt's a chat interface wrapping a fine-tuned `gpt-3.5-turbo` instance trained on prior ported features. This allows the model to innately take into account LangChain-specific code style and imports.\n\nIt's an ongoing project, and feedback on runs will be used to improve the [LangSmith dataset](https://smith.langchain.com) for further fine-tuning! Try it out below:\n\n[https://langchain-translator.vercel.app/](https://langchain-translator.vercel.app/)","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#building","loc":{"lines":{"from":30,"to":38}}}}],["f225adcf-b639-4df5-9740-f53b6d18994d",{"pageContent":"## 🗺️ Contributing Guidelines[​](#️-contributing-guidelines \"Direct link to 🗺️ Contributing Guidelines\")\n\n### 🚩 GitHub Issues[​](#-github-issues \"Direct link to 🚩 GitHub Issues\")\n\nOur [issues](https://github.com/langchain-ai/langchainjs/issues) page contains with bugs, improvements, and feature requests.\n\nIf you start working on an issue, please assign it to yourself.\n\nIf you are adding an issue, please try to keep it focused on a single modular bug/improvement/feature. If the two issues are related, or blocking, please link them rather than keep them as one single one.\n\nWe will try to keep these issues as up to date as possible, though with the rapid rate of develop in this field some may get out of date. If you notice this happening, please just let us know.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#building","loc":{"lines":{"from":40,"to":52}}}}],["df5fb317-9de6-4e40-9464-b3105b39d44d",{"pageContent":"### 🙋 Getting Help[​](#-getting-help \"Direct link to 🙋 Getting Help\")\n\nAlthough we try to have a developer setup to make it as easy as possible for others to contribute (see below) it is possible that some pain point may arise around environment setup, linting, documentation, or other. Should that occur, please contact a maintainer! Not only do we want to help get you unblocked, but we also want to make sure that the process is smooth for future contributors.\n\nIn a similar vein, we do enforce certain linting, formatting, and documentation standards in the codebase. If you are finding these difficult (or even just annoying) to work with, feel free to contact a maintainer for help - we do not want these to get in the way of getting good code into the codebase.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#building","loc":{"lines":{"from":52,"to":58}}}}],["0e240b42-2d40-4230-998f-f9600922359f",{"pageContent":"### 🏭 Release process[​](#-release-process \"Direct link to 🏭 Release process\")\n\nAs of now, LangChain has an ad hoc release process: releases are cut with high frequency via by a developer and published to [npm](https://www.npmjs.com/package/langchain).\n\nLangChain follows the [semver](https://semver.org/) versioning standard. However, as pre-1.0 software, even patch releases may contain [non-backwards-compatible changes](https://semver.org/#spec-item-4).\n\nIf your contribution has made its way into a release, we will want to give you credit on Twitter (only if you want though)! If you have a Twitter account you would like us to mention, please let us know in the PR or in another manner.\n\n### 🛠️ Tooling[​](#️-tooling \"Direct link to 🛠️ Tooling\")\n\nThis project uses the following tools, which are worth getting familiar with if you plan to contribute:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#building","loc":{"lines":{"from":58,"to":68}}}}],["79f09260-4efe-455a-9fe5-0a1a6587b69a",{"pageContent":"## 🚀 Quick Start[​](#-quick-start \"Direct link to 🚀 Quick Start\")\n\nClone this repo, then cd into it:\n\n```bash\ncd langchainjs  \n```\n\nNext, try running the following common tasks:\n\n## ✅ Common Tasks[​](#-common-tasks \"Direct link to ✅ Common Tasks\")\n\nOur goal is to make it as easy as possible for you to contribute to this project. All of the below commands should be run from within the `langchain/` directory unless otherwise noted.\n\n```bash\ncd langchain  \n```\n\n### Setup[​](#setup \"Direct link to Setup\")\n\nTo get started, you will need to install the dependencies for the project. To do so, run:\n\n```bash\nyarn  \n```\n\n### Linting[​](#linting \"Direct link to Linting\")\n\nWe use [eslint](https://eslint.org/) to enforce standard lint rules. To run the linter, run:\n\n```bash\nyarn lint  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#building","loc":{"lines":{"from":70,"to":104}}}}],["e83571ba-cd64-401c-92cf-3afc5f18d2de",{"pageContent":"### Formatting[​](#formatting \"Direct link to Formatting\")\n\nWe use [prettier](https://prettier.io) to enforce code formatting style. To run the formatter, run:\n\n```bash\nyarn format  \n```\n\nTo just check for formatting differences, without fixing them, run:\n\n```bash\nyarn format:check  \n```\n\n### Testing[​](#testing \"Direct link to Testing\")\n\nIn general, tests should be added within a `tests/` folder alongside the modules they are testing.\n\n**Unit tests** cover modular logic that does not require calls to outside APIs.\n\nIf you add new logic, please add a unit test. Unit tests should be called `*.test.ts`.\n\nTo run only unit tests, run:\n\n```bash\nyarn test  \n```\n\n##","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#building","loc":{"lines":{"from":104,"to":132}}}}],["cc1fcdc9-70bd-4d12-a45d-31b517dc7d2c",{"pageContent":"#### Running a single test[​](#running-a-single-test \"Direct link to Running a single test\")\n\nTo run a single test, run:\n\n```bash\nyarn test:single /path/to/yourtest.test.ts  \n```\n\nThis is useful for developing individual features.\n\n**Integration tests** cover logic that requires making calls to outside APIs (often integration with other services).\n\nIf you add support for a new external API, please add a new integration test. Integration tests should be called `*.int.test.ts`.\n\nNote that most integration tests require credentials or other setup. You will likely need to set up a `langchain/.env` file like the example [here](https://github.com/langchain-ai/langchainjs/blob/main/langchain/.env.example).\n\nWe generally recommend only running integration tests with `yarn test:single`, but if you want to run all integration tests, run:\n\n```bash\nyarn test:integration  \n```\n\n### Building[​](#building \"Direct link to Building\")\n\nTo build the project, run:\n\n```bash\nyarn build  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#building","loc":{"lines":{"from":132,"to":162}}}}],["2a9f8613-a44b-4864-a047-73215a5e12c5",{"pageContent":"### Adding an Entrypoint[​](#adding-an-entrypoint \"Direct link to Adding an Entrypoint\")\n\nLangChain exposes multiple subpaths the user can import from, e.g.\n\n```ts\nimport { OpenAI } from \"langchain/llms/openai\";  \n```\n\nWe call these subpaths \"entrypoints\". In general, you should create a new entrypoint if you are adding a new integration with a 3rd party library. If you're adding self-contained functionality without any external dependencies, you can add it to an existing entrypoint.\n\nIn order to declare a new entrypoint that users can import from, you should edit the `langchain/scripts/create-entrypoints.js` script. To add an entrypoint `tools` that imports from `tools/index.ts` you'd add the following to the `entrypoints` variable:\n\n```ts\nconst entrypoints = {  \n  // ...  \n  tools: \"tools/index\",  \n};  \n```\n\nThis will make sure the entrypoint is included in the published package, and in generated documentation.\n\n## Documentation[​](#documentation \"Direct link to Documentation\")\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#building","loc":{"lines":{"from":162,"to":185}}}}],["ac09ba43-01ee-48ac-a621-274e3e11e14d",{"pageContent":"### Contribute Documentation[​](#contribute-documentation \"Direct link to Contribute Documentation\")\n\nDocs are largely autogenerated by [TypeDoc](https://typedoc.org/) from the code.\n\nFor that reason, we ask that you add good documentation to all classes and methods.\n\nSimilar to linting, we recognize documentation can be annoying. If you do not want to do it, please contact a project maintainer, and they can help you with it. We do not want this to be a blocker for good code getting contributed.\n\nDocumentation and the skeleton lives under the `docs/` folder. Example code is imported from under the `examples/` folder.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#building","loc":{"lines":{"from":185,"to":195}}}}],["7d6a68f6-f773-4145-a88e-ebf270fee515",{"pageContent":"### Running examples[​](#running-examples \"Direct link to Running examples\")\n\nIf you add a new major piece of functionality, it is helpful to add an example to showcase how to use it. Most of our users find examples to be the most helpful kind of documentation.\n\nExamples can be added in the `examples/src` directory, e.g. `examples/src/path/to/example` and should export a `run` function. This example can then be invoked with `yarn example path/to/example` at the top level of the repo.\n\nTo run examples that require an environment variable, you'll need to add a `.env` file under `examples/.env`\n\n### Build Documentation Locally[​](#build-documentation-locally \"Direct link to Build Documentation Locally\")\n\nTo generate and view the documentation locally, change to the project root and run `yarn` to ensure dependencies get installed in both the `docs/` and `examples/` workspaces:\n\n```bash\ncd ..  \nyarn  \n```\n\nThen run:\n\n```bash\nyarn docs  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#building","loc":{"lines":{"from":195,"to":216}}}}],["a6d8b4ab-bf37-46d2-9032-c8958287eda7",{"pageContent":"## Advanced[​](#advanced \"Direct link to Advanced\")\n\n**Environment tests** test whether LangChain works across different JS environments, including Node.js (both ESM and CJS), Edge environments (eg. Cloudflare Workers), and browsers (using Webpack).\n\nTo run the environment tests with Docker, run the following command from the project root:\n\n```bash\nyarn test:exports:docker  \n```\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#building","loc":{"lines":{"from":218,"to":233}}}}],["90795ce8-9f35-4d80-a315-940f25147cba",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Contributing to LangChain\n\n👋 Hi there! Thank you for being interested in contributing to LangChain. As an open source project in a rapidly developing field, we are extremely open to contributions, whether it be in the form of a new feature, improved infra, or better documentation.\n\nTo contribute to this project, please follow a [\"fork and pull request\"](https://docs.github.com/en/get-started/quickstart/contributing-to-projects) workflow. Please do not try to push directly to this repo unless you are a maintainer.\n\n## Quick Links[​](#quick-links \"Direct link to Quick Links\")\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#adding-an-entrypoint","loc":{"lines":{"from":1,"to":16}}}}],["4f938cd0-58cf-4d0c-a1ad-916397d75d08",{"pageContent":"### Not sure what to work on?[​](#not-sure-what-to-work-on \"Direct link to Not sure what to work on?\")\n\nIf you are not sure what to work on, we have a few suggestions:\n\n### New abstractions[​](#new-abstractions \"Direct link to New abstractions\")\n\nWe aim to keep the same APIs between the Python and JS versions of LangChain, where possible. As such we ask that if you have an idea for a new abstraction, please open an issue first to discuss it. This will help us make sure that the API is consistent across both versions. If you're not sure what to work on, we recommend looking at the links above first.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#adding-an-entrypoint","loc":{"lines":{"from":16,"to":24}}}}],["8ee74d40-dc01-4c83-8fb6-df0480deca1f",{"pageContent":"## Want to add a specific integration?[​](#want-to-add-a-specific-integration \"Direct link to Want to add a specific integration?\")\n\nLangChain supports several different types of integrations with third-party providers and frameworks, including LLM providers (e.g. [OpenAI](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/llms/openai.ts)), vector stores (e.g. [FAISS](https://github.com/ewfian/langchainjs/blob/main/langchain/src/vectorstores/faiss.ts)), document loaders (e.g. [Apify](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/document_loaders/web/apify_dataset.ts)) persistent message history stores (e.g. [Redis](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/stores/message/redis.ts)), and more.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#adding-an-entrypoint","loc":{"lines":{"from":24,"to":26}}}}],["f45451d7-f56f-42f2-8730-59b57afd8888",{"pageContent":"We welcome such contributions, but ask that you read our dedicated [integration contribution guide](https://github.com/langchain-ai/langchainjs/blob/main/.github/contributing/INTEGRATIONS.md) for specific details and patterns to consider before opening a pull request.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#adding-an-entrypoint","loc":{"lines":{"from":28,"to":28}}}}],["f4070bd3-4713-4b1b-9a5d-5b99e4185bec",{"pageContent":"### Want to add a feature that's already in Python?[​](#want-to-add-a-feature-thats-already-in-python \"Direct link to Want to add a feature that's already in Python?\")\n\nIf you're interested in contributing a feature that's already in the [LangChain Python repo](https://github.com/langchain-ai/langchain) and you'd like some help getting started, you can try pasting code snippets and classes into the [LangChain Python to JS translator](https://langchain-translator.vercel.app/).\n\nIt's a chat interface wrapping a fine-tuned `gpt-3.5-turbo` instance trained on prior ported features. This allows the model to innately take into account LangChain-specific code style and imports.\n\nIt's an ongoing project, and feedback on runs will be used to improve the [LangSmith dataset](https://smith.langchain.com) for further fine-tuning! Try it out below:\n\n[https://langchain-translator.vercel.app/](https://langchain-translator.vercel.app/)","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#adding-an-entrypoint","loc":{"lines":{"from":30,"to":38}}}}],["b608b42d-8f85-4b06-9aa4-627b9cc82127",{"pageContent":"## 🗺️ Contributing Guidelines[​](#️-contributing-guidelines \"Direct link to 🗺️ Contributing Guidelines\")\n\n### 🚩 GitHub Issues[​](#-github-issues \"Direct link to 🚩 GitHub Issues\")\n\nOur [issues](https://github.com/langchain-ai/langchainjs/issues) page contains with bugs, improvements, and feature requests.\n\nIf you start working on an issue, please assign it to yourself.\n\nIf you are adding an issue, please try to keep it focused on a single modular bug/improvement/feature. If the two issues are related, or blocking, please link them rather than keep them as one single one.\n\nWe will try to keep these issues as up to date as possible, though with the rapid rate of develop in this field some may get out of date. If you notice this happening, please just let us know.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#adding-an-entrypoint","loc":{"lines":{"from":40,"to":52}}}}],["bf443064-c11d-45de-ac1b-523a869d5b41",{"pageContent":"### 🙋 Getting Help[​](#-getting-help \"Direct link to 🙋 Getting Help\")\n\nAlthough we try to have a developer setup to make it as easy as possible for others to contribute (see below) it is possible that some pain point may arise around environment setup, linting, documentation, or other. Should that occur, please contact a maintainer! Not only do we want to help get you unblocked, but we also want to make sure that the process is smooth for future contributors.\n\nIn a similar vein, we do enforce certain linting, formatting, and documentation standards in the codebase. If you are finding these difficult (or even just annoying) to work with, feel free to contact a maintainer for help - we do not want these to get in the way of getting good code into the codebase.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#adding-an-entrypoint","loc":{"lines":{"from":52,"to":58}}}}],["9eaca7f1-ea7a-4b2a-9099-2cb3e37bef70",{"pageContent":"### 🏭 Release process[​](#-release-process \"Direct link to 🏭 Release process\")\n\nAs of now, LangChain has an ad hoc release process: releases are cut with high frequency via by a developer and published to [npm](https://www.npmjs.com/package/langchain).\n\nLangChain follows the [semver](https://semver.org/) versioning standard. However, as pre-1.0 software, even patch releases may contain [non-backwards-compatible changes](https://semver.org/#spec-item-4).\n\nIf your contribution has made its way into a release, we will want to give you credit on Twitter (only if you want though)! If you have a Twitter account you would like us to mention, please let us know in the PR or in another manner.\n\n### 🛠️ Tooling[​](#️-tooling \"Direct link to 🛠️ Tooling\")\n\nThis project uses the following tools, which are worth getting familiar with if you plan to contribute:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#adding-an-entrypoint","loc":{"lines":{"from":58,"to":68}}}}],["e4a8f377-b4a1-4d8b-a572-844f5ec0e49f",{"pageContent":"## 🚀 Quick Start[​](#-quick-start \"Direct link to 🚀 Quick Start\")\n\nClone this repo, then cd into it:\n\n```bash\ncd langchainjs  \n```\n\nNext, try running the following common tasks:\n\n## ✅ Common Tasks[​](#-common-tasks \"Direct link to ✅ Common Tasks\")\n\nOur goal is to make it as easy as possible for you to contribute to this project. All of the below commands should be run from within the `langchain/` directory unless otherwise noted.\n\n```bash\ncd langchain  \n```\n\n### Setup[​](#setup \"Direct link to Setup\")\n\nTo get started, you will need to install the dependencies for the project. To do so, run:\n\n```bash\nyarn  \n```\n\n### Linting[​](#linting \"Direct link to Linting\")\n\nWe use [eslint](https://eslint.org/) to enforce standard lint rules. To run the linter, run:\n\n```bash\nyarn lint  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#adding-an-entrypoint","loc":{"lines":{"from":70,"to":104}}}}],["5aba1173-1e03-4fcc-8195-115846c94113",{"pageContent":"### Formatting[​](#formatting \"Direct link to Formatting\")\n\nWe use [prettier](https://prettier.io) to enforce code formatting style. To run the formatter, run:\n\n```bash\nyarn format  \n```\n\nTo just check for formatting differences, without fixing them, run:\n\n```bash\nyarn format:check  \n```\n\n### Testing[​](#testing \"Direct link to Testing\")\n\nIn general, tests should be added within a `tests/` folder alongside the modules they are testing.\n\n**Unit tests** cover modular logic that does not require calls to outside APIs.\n\nIf you add new logic, please add a unit test. Unit tests should be called `*.test.ts`.\n\nTo run only unit tests, run:\n\n```bash\nyarn test  \n```\n\n##","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#adding-an-entrypoint","loc":{"lines":{"from":104,"to":132}}}}],["cef2cc36-021f-4347-a5c8-1a15467a399a",{"pageContent":"#### Running a single test[​](#running-a-single-test \"Direct link to Running a single test\")\n\nTo run a single test, run:\n\n```bash\nyarn test:single /path/to/yourtest.test.ts  \n```\n\nThis is useful for developing individual features.\n\n**Integration tests** cover logic that requires making calls to outside APIs (often integration with other services).\n\nIf you add support for a new external API, please add a new integration test. Integration tests should be called `*.int.test.ts`.\n\nNote that most integration tests require credentials or other setup. You will likely need to set up a `langchain/.env` file like the example [here](https://github.com/langchain-ai/langchainjs/blob/main/langchain/.env.example).\n\nWe generally recommend only running integration tests with `yarn test:single`, but if you want to run all integration tests, run:\n\n```bash\nyarn test:integration  \n```\n\n### Building[​](#building \"Direct link to Building\")\n\nTo build the project, run:\n\n```bash\nyarn build  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#adding-an-entrypoint","loc":{"lines":{"from":132,"to":162}}}}],["12fa292e-d4cb-45d8-92c3-4514c0286339",{"pageContent":"### Adding an Entrypoint[​](#adding-an-entrypoint \"Direct link to Adding an Entrypoint\")\n\nLangChain exposes multiple subpaths the user can import from, e.g.\n\n```ts\nimport { OpenAI } from \"langchain/llms/openai\";  \n```\n\nWe call these subpaths \"entrypoints\". In general, you should create a new entrypoint if you are adding a new integration with a 3rd party library. If you're adding self-contained functionality without any external dependencies, you can add it to an existing entrypoint.\n\nIn order to declare a new entrypoint that users can import from, you should edit the `langchain/scripts/create-entrypoints.js` script. To add an entrypoint `tools` that imports from `tools/index.ts` you'd add the following to the `entrypoints` variable:\n\n```ts\nconst entrypoints = {  \n  // ...  \n  tools: \"tools/index\",  \n};  \n```\n\nThis will make sure the entrypoint is included in the published package, and in generated documentation.\n\n## Documentation[​](#documentation \"Direct link to Documentation\")\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#adding-an-entrypoint","loc":{"lines":{"from":162,"to":185}}}}],["9c328579-445b-43f0-9c21-6a627827e664",{"pageContent":"### Contribute Documentation[​](#contribute-documentation \"Direct link to Contribute Documentation\")\n\nDocs are largely autogenerated by [TypeDoc](https://typedoc.org/) from the code.\n\nFor that reason, we ask that you add good documentation to all classes and methods.\n\nSimilar to linting, we recognize documentation can be annoying. If you do not want to do it, please contact a project maintainer, and they can help you with it. We do not want this to be a blocker for good code getting contributed.\n\nDocumentation and the skeleton lives under the `docs/` folder. Example code is imported from under the `examples/` folder.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#adding-an-entrypoint","loc":{"lines":{"from":185,"to":195}}}}],["83a4febd-d846-43fa-a16e-47ea1f44b619",{"pageContent":"### Running examples[​](#running-examples \"Direct link to Running examples\")\n\nIf you add a new major piece of functionality, it is helpful to add an example to showcase how to use it. Most of our users find examples to be the most helpful kind of documentation.\n\nExamples can be added in the `examples/src` directory, e.g. `examples/src/path/to/example` and should export a `run` function. This example can then be invoked with `yarn example path/to/example` at the top level of the repo.\n\nTo run examples that require an environment variable, you'll need to add a `.env` file under `examples/.env`\n\n### Build Documentation Locally[​](#build-documentation-locally \"Direct link to Build Documentation Locally\")\n\nTo generate and view the documentation locally, change to the project root and run `yarn` to ensure dependencies get installed in both the `docs/` and `examples/` workspaces:\n\n```bash\ncd ..  \nyarn  \n```\n\nThen run:\n\n```bash\nyarn docs  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#adding-an-entrypoint","loc":{"lines":{"from":195,"to":216}}}}],["68166df0-a61f-457c-86de-c1a99e2ac9b1",{"pageContent":"## Advanced[​](#advanced \"Direct link to Advanced\")\n\n**Environment tests** test whether LangChain works across different JS environments, including Node.js (both ESM and CJS), Edge environments (eg. Cloudflare Workers), and browsers (using Webpack).\n\nTo run the environment tests with Docker, run the following command from the project root:\n\n```bash\nyarn test:exports:docker  \n```\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#adding-an-entrypoint","loc":{"lines":{"from":218,"to":233}}}}],["5034eb10-f702-4d67-b6bc-a1fc8e88abcd",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Contributing to LangChain\n\n👋 Hi there! Thank you for being interested in contributing to LangChain. As an open source project in a rapidly developing field, we are extremely open to contributions, whether it be in the form of a new feature, improved infra, or better documentation.\n\nTo contribute to this project, please follow a [\"fork and pull request\"](https://docs.github.com/en/get-started/quickstart/contributing-to-projects) workflow. Please do not try to push directly to this repo unless you are a maintainer.\n\n## Quick Links[​](#quick-links \"Direct link to Quick Links\")\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#documentation","loc":{"lines":{"from":1,"to":16}}}}],["1894090c-761a-4276-9a6e-eef389e427f1",{"pageContent":"### Not sure what to work on?[​](#not-sure-what-to-work-on \"Direct link to Not sure what to work on?\")\n\nIf you are not sure what to work on, we have a few suggestions:\n\n### New abstractions[​](#new-abstractions \"Direct link to New abstractions\")\n\nWe aim to keep the same APIs between the Python and JS versions of LangChain, where possible. As such we ask that if you have an idea for a new abstraction, please open an issue first to discuss it. This will help us make sure that the API is consistent across both versions. If you're not sure what to work on, we recommend looking at the links above first.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#documentation","loc":{"lines":{"from":16,"to":24}}}}],["c2c9374b-9a07-4f1a-aef0-aad1fb9ac25a",{"pageContent":"## Want to add a specific integration?[​](#want-to-add-a-specific-integration \"Direct link to Want to add a specific integration?\")\n\nLangChain supports several different types of integrations with third-party providers and frameworks, including LLM providers (e.g. [OpenAI](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/llms/openai.ts)), vector stores (e.g. [FAISS](https://github.com/ewfian/langchainjs/blob/main/langchain/src/vectorstores/faiss.ts)), document loaders (e.g. [Apify](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/document_loaders/web/apify_dataset.ts)) persistent message history stores (e.g. [Redis](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/stores/message/redis.ts)), and more.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#documentation","loc":{"lines":{"from":24,"to":26}}}}],["8caa15cf-ffac-430a-bc2f-a7dea5e27f24",{"pageContent":"We welcome such contributions, but ask that you read our dedicated [integration contribution guide](https://github.com/langchain-ai/langchainjs/blob/main/.github/contributing/INTEGRATIONS.md) for specific details and patterns to consider before opening a pull request.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#documentation","loc":{"lines":{"from":28,"to":28}}}}],["d36c9a28-ebf1-4249-af5e-f4d50f21dd6a",{"pageContent":"### Want to add a feature that's already in Python?[​](#want-to-add-a-feature-thats-already-in-python \"Direct link to Want to add a feature that's already in Python?\")\n\nIf you're interested in contributing a feature that's already in the [LangChain Python repo](https://github.com/langchain-ai/langchain) and you'd like some help getting started, you can try pasting code snippets and classes into the [LangChain Python to JS translator](https://langchain-translator.vercel.app/).\n\nIt's a chat interface wrapping a fine-tuned `gpt-3.5-turbo` instance trained on prior ported features. This allows the model to innately take into account LangChain-specific code style and imports.\n\nIt's an ongoing project, and feedback on runs will be used to improve the [LangSmith dataset](https://smith.langchain.com) for further fine-tuning! Try it out below:\n\n[https://langchain-translator.vercel.app/](https://langchain-translator.vercel.app/)","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#documentation","loc":{"lines":{"from":30,"to":38}}}}],["8a5ca25a-6363-486a-b019-2cb540238994",{"pageContent":"## 🗺️ Contributing Guidelines[​](#️-contributing-guidelines \"Direct link to 🗺️ Contributing Guidelines\")\n\n### 🚩 GitHub Issues[​](#-github-issues \"Direct link to 🚩 GitHub Issues\")\n\nOur [issues](https://github.com/langchain-ai/langchainjs/issues) page contains with bugs, improvements, and feature requests.\n\nIf you start working on an issue, please assign it to yourself.\n\nIf you are adding an issue, please try to keep it focused on a single modular bug/improvement/feature. If the two issues are related, or blocking, please link them rather than keep them as one single one.\n\nWe will try to keep these issues as up to date as possible, though with the rapid rate of develop in this field some may get out of date. If you notice this happening, please just let us know.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#documentation","loc":{"lines":{"from":40,"to":52}}}}],["bd720a3c-207c-4bb8-8367-5b96cf26db0d",{"pageContent":"### 🙋 Getting Help[​](#-getting-help \"Direct link to 🙋 Getting Help\")\n\nAlthough we try to have a developer setup to make it as easy as possible for others to contribute (see below) it is possible that some pain point may arise around environment setup, linting, documentation, or other. Should that occur, please contact a maintainer! Not only do we want to help get you unblocked, but we also want to make sure that the process is smooth for future contributors.\n\nIn a similar vein, we do enforce certain linting, formatting, and documentation standards in the codebase. If you are finding these difficult (or even just annoying) to work with, feel free to contact a maintainer for help - we do not want these to get in the way of getting good code into the codebase.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#documentation","loc":{"lines":{"from":52,"to":58}}}}],["2ab9d867-786c-42f8-aabd-606167566106",{"pageContent":"### 🏭 Release process[​](#-release-process \"Direct link to 🏭 Release process\")\n\nAs of now, LangChain has an ad hoc release process: releases are cut with high frequency via by a developer and published to [npm](https://www.npmjs.com/package/langchain).\n\nLangChain follows the [semver](https://semver.org/) versioning standard. However, as pre-1.0 software, even patch releases may contain [non-backwards-compatible changes](https://semver.org/#spec-item-4).\n\nIf your contribution has made its way into a release, we will want to give you credit on Twitter (only if you want though)! If you have a Twitter account you would like us to mention, please let us know in the PR or in another manner.\n\n### 🛠️ Tooling[​](#️-tooling \"Direct link to 🛠️ Tooling\")\n\nThis project uses the following tools, which are worth getting familiar with if you plan to contribute:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#documentation","loc":{"lines":{"from":58,"to":68}}}}],["5a02f306-e714-4f5b-a3a4-53397edf3af3",{"pageContent":"## 🚀 Quick Start[​](#-quick-start \"Direct link to 🚀 Quick Start\")\n\nClone this repo, then cd into it:\n\n```bash\ncd langchainjs  \n```\n\nNext, try running the following common tasks:\n\n## ✅ Common Tasks[​](#-common-tasks \"Direct link to ✅ Common Tasks\")\n\nOur goal is to make it as easy as possible for you to contribute to this project. All of the below commands should be run from within the `langchain/` directory unless otherwise noted.\n\n```bash\ncd langchain  \n```\n\n### Setup[​](#setup \"Direct link to Setup\")\n\nTo get started, you will need to install the dependencies for the project. To do so, run:\n\n```bash\nyarn  \n```\n\n### Linting[​](#linting \"Direct link to Linting\")\n\nWe use [eslint](https://eslint.org/) to enforce standard lint rules. To run the linter, run:\n\n```bash\nyarn lint  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#documentation","loc":{"lines":{"from":70,"to":104}}}}],["aecd853d-c3fa-4115-9c7e-5534b466332a",{"pageContent":"### Formatting[​](#formatting \"Direct link to Formatting\")\n\nWe use [prettier](https://prettier.io) to enforce code formatting style. To run the formatter, run:\n\n```bash\nyarn format  \n```\n\nTo just check for formatting differences, without fixing them, run:\n\n```bash\nyarn format:check  \n```\n\n### Testing[​](#testing \"Direct link to Testing\")\n\nIn general, tests should be added within a `tests/` folder alongside the modules they are testing.\n\n**Unit tests** cover modular logic that does not require calls to outside APIs.\n\nIf you add new logic, please add a unit test. Unit tests should be called `*.test.ts`.\n\nTo run only unit tests, run:\n\n```bash\nyarn test  \n```\n\n##","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#documentation","loc":{"lines":{"from":104,"to":132}}}}],["cb411fb1-a390-423a-b285-96e7b65bb5e9",{"pageContent":"#### Running a single test[​](#running-a-single-test \"Direct link to Running a single test\")\n\nTo run a single test, run:\n\n```bash\nyarn test:single /path/to/yourtest.test.ts  \n```\n\nThis is useful for developing individual features.\n\n**Integration tests** cover logic that requires making calls to outside APIs (often integration with other services).\n\nIf you add support for a new external API, please add a new integration test. Integration tests should be called `*.int.test.ts`.\n\nNote that most integration tests require credentials or other setup. You will likely need to set up a `langchain/.env` file like the example [here](https://github.com/langchain-ai/langchainjs/blob/main/langchain/.env.example).\n\nWe generally recommend only running integration tests with `yarn test:single`, but if you want to run all integration tests, run:\n\n```bash\nyarn test:integration  \n```\n\n### Building[​](#building \"Direct link to Building\")\n\nTo build the project, run:\n\n```bash\nyarn build  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#documentation","loc":{"lines":{"from":132,"to":162}}}}],["93c84fa9-80a8-4377-990e-6e167b411136",{"pageContent":"### Adding an Entrypoint[​](#adding-an-entrypoint \"Direct link to Adding an Entrypoint\")\n\nLangChain exposes multiple subpaths the user can import from, e.g.\n\n```ts\nimport { OpenAI } from \"langchain/llms/openai\";  \n```\n\nWe call these subpaths \"entrypoints\". In general, you should create a new entrypoint if you are adding a new integration with a 3rd party library. If you're adding self-contained functionality without any external dependencies, you can add it to an existing entrypoint.\n\nIn order to declare a new entrypoint that users can import from, you should edit the `langchain/scripts/create-entrypoints.js` script. To add an entrypoint `tools` that imports from `tools/index.ts` you'd add the following to the `entrypoints` variable:\n\n```ts\nconst entrypoints = {  \n  // ...  \n  tools: \"tools/index\",  \n};  \n```\n\nThis will make sure the entrypoint is included in the published package, and in generated documentation.\n\n## Documentation[​](#documentation \"Direct link to Documentation\")\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#documentation","loc":{"lines":{"from":162,"to":185}}}}],["eae684b8-aa22-49d6-bf37-a8866ba1cda1",{"pageContent":"### Contribute Documentation[​](#contribute-documentation \"Direct link to Contribute Documentation\")\n\nDocs are largely autogenerated by [TypeDoc](https://typedoc.org/) from the code.\n\nFor that reason, we ask that you add good documentation to all classes and methods.\n\nSimilar to linting, we recognize documentation can be annoying. If you do not want to do it, please contact a project maintainer, and they can help you with it. We do not want this to be a blocker for good code getting contributed.\n\nDocumentation and the skeleton lives under the `docs/` folder. Example code is imported from under the `examples/` folder.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#documentation","loc":{"lines":{"from":185,"to":195}}}}],["705a8fde-4f98-4bf5-a92e-cb434771d7c4",{"pageContent":"### Running examples[​](#running-examples \"Direct link to Running examples\")\n\nIf you add a new major piece of functionality, it is helpful to add an example to showcase how to use it. Most of our users find examples to be the most helpful kind of documentation.\n\nExamples can be added in the `examples/src` directory, e.g. `examples/src/path/to/example` and should export a `run` function. This example can then be invoked with `yarn example path/to/example` at the top level of the repo.\n\nTo run examples that require an environment variable, you'll need to add a `.env` file under `examples/.env`\n\n### Build Documentation Locally[​](#build-documentation-locally \"Direct link to Build Documentation Locally\")\n\nTo generate and view the documentation locally, change to the project root and run `yarn` to ensure dependencies get installed in both the `docs/` and `examples/` workspaces:\n\n```bash\ncd ..  \nyarn  \n```\n\nThen run:\n\n```bash\nyarn docs  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#documentation","loc":{"lines":{"from":195,"to":216}}}}],["f6e32f22-c0bf-4bdb-ab07-54693eb05c5a",{"pageContent":"## Advanced[​](#advanced \"Direct link to Advanced\")\n\n**Environment tests** test whether LangChain works across different JS environments, including Node.js (both ESM and CJS), Edge environments (eg. Cloudflare Workers), and browsers (using Webpack).\n\nTo run the environment tests with Docker, run the following command from the project root:\n\n```bash\nyarn test:exports:docker  \n```\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#documentation","loc":{"lines":{"from":218,"to":233}}}}],["3ad0bf04-6be5-4a34-9f71-244039bca5d0",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Contributing to LangChain\n\n👋 Hi there! Thank you for being interested in contributing to LangChain. As an open source project in a rapidly developing field, we are extremely open to contributions, whether it be in the form of a new feature, improved infra, or better documentation.\n\nTo contribute to this project, please follow a [\"fork and pull request\"](https://docs.github.com/en/get-started/quickstart/contributing-to-projects) workflow. Please do not try to push directly to this repo unless you are a maintainer.\n\n## Quick Links[​](#quick-links \"Direct link to Quick Links\")\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#contribute-documentation","loc":{"lines":{"from":1,"to":16}}}}],["deec9c26-5985-445d-b5c7-75496d2c8251",{"pageContent":"### Not sure what to work on?[​](#not-sure-what-to-work-on \"Direct link to Not sure what to work on?\")\n\nIf you are not sure what to work on, we have a few suggestions:\n\n### New abstractions[​](#new-abstractions \"Direct link to New abstractions\")\n\nWe aim to keep the same APIs between the Python and JS versions of LangChain, where possible. As such we ask that if you have an idea for a new abstraction, please open an issue first to discuss it. This will help us make sure that the API is consistent across both versions. If you're not sure what to work on, we recommend looking at the links above first.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#contribute-documentation","loc":{"lines":{"from":16,"to":24}}}}],["f239e749-1f82-4008-b45a-c5f06143b69d",{"pageContent":"## Want to add a specific integration?[​](#want-to-add-a-specific-integration \"Direct link to Want to add a specific integration?\")\n\nLangChain supports several different types of integrations with third-party providers and frameworks, including LLM providers (e.g. [OpenAI](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/llms/openai.ts)), vector stores (e.g. [FAISS](https://github.com/ewfian/langchainjs/blob/main/langchain/src/vectorstores/faiss.ts)), document loaders (e.g. [Apify](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/document_loaders/web/apify_dataset.ts)) persistent message history stores (e.g. [Redis](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/stores/message/redis.ts)), and more.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#contribute-documentation","loc":{"lines":{"from":24,"to":26}}}}],["e5f0be3e-686d-475e-9575-3283a9ac142a",{"pageContent":"We welcome such contributions, but ask that you read our dedicated [integration contribution guide](https://github.com/langchain-ai/langchainjs/blob/main/.github/contributing/INTEGRATIONS.md) for specific details and patterns to consider before opening a pull request.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#contribute-documentation","loc":{"lines":{"from":28,"to":28}}}}],["834561f4-cee3-4795-b556-e2e27be77e18",{"pageContent":"### Want to add a feature that's already in Python?[​](#want-to-add-a-feature-thats-already-in-python \"Direct link to Want to add a feature that's already in Python?\")\n\nIf you're interested in contributing a feature that's already in the [LangChain Python repo](https://github.com/langchain-ai/langchain) and you'd like some help getting started, you can try pasting code snippets and classes into the [LangChain Python to JS translator](https://langchain-translator.vercel.app/).\n\nIt's a chat interface wrapping a fine-tuned `gpt-3.5-turbo` instance trained on prior ported features. This allows the model to innately take into account LangChain-specific code style and imports.\n\nIt's an ongoing project, and feedback on runs will be used to improve the [LangSmith dataset](https://smith.langchain.com) for further fine-tuning! Try it out below:\n\n[https://langchain-translator.vercel.app/](https://langchain-translator.vercel.app/)","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#contribute-documentation","loc":{"lines":{"from":30,"to":38}}}}],["74b0b9ed-9757-4150-9892-b869b7221192",{"pageContent":"## 🗺️ Contributing Guidelines[​](#️-contributing-guidelines \"Direct link to 🗺️ Contributing Guidelines\")\n\n### 🚩 GitHub Issues[​](#-github-issues \"Direct link to 🚩 GitHub Issues\")\n\nOur [issues](https://github.com/langchain-ai/langchainjs/issues) page contains with bugs, improvements, and feature requests.\n\nIf you start working on an issue, please assign it to yourself.\n\nIf you are adding an issue, please try to keep it focused on a single modular bug/improvement/feature. If the two issues are related, or blocking, please link them rather than keep them as one single one.\n\nWe will try to keep these issues as up to date as possible, though with the rapid rate of develop in this field some may get out of date. If you notice this happening, please just let us know.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#contribute-documentation","loc":{"lines":{"from":40,"to":52}}}}],["d97eab7a-1284-4223-bb75-6f8a6f68ab9e",{"pageContent":"### 🙋 Getting Help[​](#-getting-help \"Direct link to 🙋 Getting Help\")\n\nAlthough we try to have a developer setup to make it as easy as possible for others to contribute (see below) it is possible that some pain point may arise around environment setup, linting, documentation, or other. Should that occur, please contact a maintainer! Not only do we want to help get you unblocked, but we also want to make sure that the process is smooth for future contributors.\n\nIn a similar vein, we do enforce certain linting, formatting, and documentation standards in the codebase. If you are finding these difficult (or even just annoying) to work with, feel free to contact a maintainer for help - we do not want these to get in the way of getting good code into the codebase.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#contribute-documentation","loc":{"lines":{"from":52,"to":58}}}}],["dc7f4fbd-ab9f-4039-a607-ddf592936334",{"pageContent":"### 🏭 Release process[​](#-release-process \"Direct link to 🏭 Release process\")\n\nAs of now, LangChain has an ad hoc release process: releases are cut with high frequency via by a developer and published to [npm](https://www.npmjs.com/package/langchain).\n\nLangChain follows the [semver](https://semver.org/) versioning standard. However, as pre-1.0 software, even patch releases may contain [non-backwards-compatible changes](https://semver.org/#spec-item-4).\n\nIf your contribution has made its way into a release, we will want to give you credit on Twitter (only if you want though)! If you have a Twitter account you would like us to mention, please let us know in the PR or in another manner.\n\n### 🛠️ Tooling[​](#️-tooling \"Direct link to 🛠️ Tooling\")\n\nThis project uses the following tools, which are worth getting familiar with if you plan to contribute:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#contribute-documentation","loc":{"lines":{"from":58,"to":68}}}}],["0ff25ada-a471-49e0-a936-25fd71a1d76d",{"pageContent":"## 🚀 Quick Start[​](#-quick-start \"Direct link to 🚀 Quick Start\")\n\nClone this repo, then cd into it:\n\n```bash\ncd langchainjs  \n```\n\nNext, try running the following common tasks:\n\n## ✅ Common Tasks[​](#-common-tasks \"Direct link to ✅ Common Tasks\")\n\nOur goal is to make it as easy as possible for you to contribute to this project. All of the below commands should be run from within the `langchain/` directory unless otherwise noted.\n\n```bash\ncd langchain  \n```\n\n### Setup[​](#setup \"Direct link to Setup\")\n\nTo get started, you will need to install the dependencies for the project. To do so, run:\n\n```bash\nyarn  \n```\n\n### Linting[​](#linting \"Direct link to Linting\")\n\nWe use [eslint](https://eslint.org/) to enforce standard lint rules. To run the linter, run:\n\n```bash\nyarn lint  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#contribute-documentation","loc":{"lines":{"from":70,"to":104}}}}],["b7d9ab22-3750-4f9e-a1ac-16ca8b178687",{"pageContent":"### Formatting[​](#formatting \"Direct link to Formatting\")\n\nWe use [prettier](https://prettier.io) to enforce code formatting style. To run the formatter, run:\n\n```bash\nyarn format  \n```\n\nTo just check for formatting differences, without fixing them, run:\n\n```bash\nyarn format:check  \n```\n\n### Testing[​](#testing \"Direct link to Testing\")\n\nIn general, tests should be added within a `tests/` folder alongside the modules they are testing.\n\n**Unit tests** cover modular logic that does not require calls to outside APIs.\n\nIf you add new logic, please add a unit test. Unit tests should be called `*.test.ts`.\n\nTo run only unit tests, run:\n\n```bash\nyarn test  \n```\n\n##","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#contribute-documentation","loc":{"lines":{"from":104,"to":132}}}}],["2b869757-a549-450e-95fc-7758a3958472",{"pageContent":"#### Running a single test[​](#running-a-single-test \"Direct link to Running a single test\")\n\nTo run a single test, run:\n\n```bash\nyarn test:single /path/to/yourtest.test.ts  \n```\n\nThis is useful for developing individual features.\n\n**Integration tests** cover logic that requires making calls to outside APIs (often integration with other services).\n\nIf you add support for a new external API, please add a new integration test. Integration tests should be called `*.int.test.ts`.\n\nNote that most integration tests require credentials or other setup. You will likely need to set up a `langchain/.env` file like the example [here](https://github.com/langchain-ai/langchainjs/blob/main/langchain/.env.example).\n\nWe generally recommend only running integration tests with `yarn test:single`, but if you want to run all integration tests, run:\n\n```bash\nyarn test:integration  \n```\n\n### Building[​](#building \"Direct link to Building\")\n\nTo build the project, run:\n\n```bash\nyarn build  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#contribute-documentation","loc":{"lines":{"from":132,"to":162}}}}],["ed329b86-4a38-4289-b463-76d660c66632",{"pageContent":"### Adding an Entrypoint[​](#adding-an-entrypoint \"Direct link to Adding an Entrypoint\")\n\nLangChain exposes multiple subpaths the user can import from, e.g.\n\n```ts\nimport { OpenAI } from \"langchain/llms/openai\";  \n```\n\nWe call these subpaths \"entrypoints\". In general, you should create a new entrypoint if you are adding a new integration with a 3rd party library. If you're adding self-contained functionality without any external dependencies, you can add it to an existing entrypoint.\n\nIn order to declare a new entrypoint that users can import from, you should edit the `langchain/scripts/create-entrypoints.js` script. To add an entrypoint `tools` that imports from `tools/index.ts` you'd add the following to the `entrypoints` variable:\n\n```ts\nconst entrypoints = {  \n  // ...  \n  tools: \"tools/index\",  \n};  \n```\n\nThis will make sure the entrypoint is included in the published package, and in generated documentation.\n\n## Documentation[​](#documentation \"Direct link to Documentation\")\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#contribute-documentation","loc":{"lines":{"from":162,"to":185}}}}],["96ab4308-8b0d-4783-9e5b-2cc9054833c5",{"pageContent":"### Contribute Documentation[​](#contribute-documentation \"Direct link to Contribute Documentation\")\n\nDocs are largely autogenerated by [TypeDoc](https://typedoc.org/) from the code.\n\nFor that reason, we ask that you add good documentation to all classes and methods.\n\nSimilar to linting, we recognize documentation can be annoying. If you do not want to do it, please contact a project maintainer, and they can help you with it. We do not want this to be a blocker for good code getting contributed.\n\nDocumentation and the skeleton lives under the `docs/` folder. Example code is imported from under the `examples/` folder.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#contribute-documentation","loc":{"lines":{"from":185,"to":195}}}}],["5ab88156-33bf-4035-8878-f056c033ad47",{"pageContent":"### Running examples[​](#running-examples \"Direct link to Running examples\")\n\nIf you add a new major piece of functionality, it is helpful to add an example to showcase how to use it. Most of our users find examples to be the most helpful kind of documentation.\n\nExamples can be added in the `examples/src` directory, e.g. `examples/src/path/to/example` and should export a `run` function. This example can then be invoked with `yarn example path/to/example` at the top level of the repo.\n\nTo run examples that require an environment variable, you'll need to add a `.env` file under `examples/.env`\n\n### Build Documentation Locally[​](#build-documentation-locally \"Direct link to Build Documentation Locally\")\n\nTo generate and view the documentation locally, change to the project root and run `yarn` to ensure dependencies get installed in both the `docs/` and `examples/` workspaces:\n\n```bash\ncd ..  \nyarn  \n```\n\nThen run:\n\n```bash\nyarn docs  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#contribute-documentation","loc":{"lines":{"from":195,"to":216}}}}],["edb4ca5e-72cb-411f-a0f8-dff94fe8de89",{"pageContent":"## Advanced[​](#advanced \"Direct link to Advanced\")\n\n**Environment tests** test whether LangChain works across different JS environments, including Node.js (both ESM and CJS), Edge environments (eg. Cloudflare Workers), and browsers (using Webpack).\n\nTo run the environment tests with Docker, run the following command from the project root:\n\n```bash\nyarn test:exports:docker  \n```\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#contribute-documentation","loc":{"lines":{"from":218,"to":233}}}}],["565ab4b4-3942-4e25-b7cb-f735f5476260",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Contributing to LangChain\n\n👋 Hi there! Thank you for being interested in contributing to LangChain. As an open source project in a rapidly developing field, we are extremely open to contributions, whether it be in the form of a new feature, improved infra, or better documentation.\n\nTo contribute to this project, please follow a [\"fork and pull request\"](https://docs.github.com/en/get-started/quickstart/contributing-to-projects) workflow. Please do not try to push directly to this repo unless you are a maintainer.\n\n## Quick Links[​](#quick-links \"Direct link to Quick Links\")\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#running-examples","loc":{"lines":{"from":1,"to":16}}}}],["b18ad869-18eb-412e-aacf-5afa2d9a7c74",{"pageContent":"### Not sure what to work on?[​](#not-sure-what-to-work-on \"Direct link to Not sure what to work on?\")\n\nIf you are not sure what to work on, we have a few suggestions:\n\n### New abstractions[​](#new-abstractions \"Direct link to New abstractions\")\n\nWe aim to keep the same APIs between the Python and JS versions of LangChain, where possible. As such we ask that if you have an idea for a new abstraction, please open an issue first to discuss it. This will help us make sure that the API is consistent across both versions. If you're not sure what to work on, we recommend looking at the links above first.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#running-examples","loc":{"lines":{"from":16,"to":24}}}}],["76516c15-1a8e-4d6f-8314-5d37f4a6db02",{"pageContent":"## Want to add a specific integration?[​](#want-to-add-a-specific-integration \"Direct link to Want to add a specific integration?\")\n\nLangChain supports several different types of integrations with third-party providers and frameworks, including LLM providers (e.g. [OpenAI](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/llms/openai.ts)), vector stores (e.g. [FAISS](https://github.com/ewfian/langchainjs/blob/main/langchain/src/vectorstores/faiss.ts)), document loaders (e.g. [Apify](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/document_loaders/web/apify_dataset.ts)) persistent message history stores (e.g. [Redis](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/stores/message/redis.ts)), and more.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#running-examples","loc":{"lines":{"from":24,"to":26}}}}],["6d099ff8-da1e-46c2-bb94-cc6e865f3d03",{"pageContent":"We welcome such contributions, but ask that you read our dedicated [integration contribution guide](https://github.com/langchain-ai/langchainjs/blob/main/.github/contributing/INTEGRATIONS.md) for specific details and patterns to consider before opening a pull request.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#running-examples","loc":{"lines":{"from":28,"to":28}}}}],["91c9db9f-52d4-4a44-8bf3-823a6173211d",{"pageContent":"### Want to add a feature that's already in Python?[​](#want-to-add-a-feature-thats-already-in-python \"Direct link to Want to add a feature that's already in Python?\")\n\nIf you're interested in contributing a feature that's already in the [LangChain Python repo](https://github.com/langchain-ai/langchain) and you'd like some help getting started, you can try pasting code snippets and classes into the [LangChain Python to JS translator](https://langchain-translator.vercel.app/).\n\nIt's a chat interface wrapping a fine-tuned `gpt-3.5-turbo` instance trained on prior ported features. This allows the model to innately take into account LangChain-specific code style and imports.\n\nIt's an ongoing project, and feedback on runs will be used to improve the [LangSmith dataset](https://smith.langchain.com) for further fine-tuning! Try it out below:\n\n[https://langchain-translator.vercel.app/](https://langchain-translator.vercel.app/)","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#running-examples","loc":{"lines":{"from":30,"to":38}}}}],["01757f70-a193-430f-88f7-57678a7f26b3",{"pageContent":"## 🗺️ Contributing Guidelines[​](#️-contributing-guidelines \"Direct link to 🗺️ Contributing Guidelines\")\n\n### 🚩 GitHub Issues[​](#-github-issues \"Direct link to 🚩 GitHub Issues\")\n\nOur [issues](https://github.com/langchain-ai/langchainjs/issues) page contains with bugs, improvements, and feature requests.\n\nIf you start working on an issue, please assign it to yourself.\n\nIf you are adding an issue, please try to keep it focused on a single modular bug/improvement/feature. If the two issues are related, or blocking, please link them rather than keep them as one single one.\n\nWe will try to keep these issues as up to date as possible, though with the rapid rate of develop in this field some may get out of date. If you notice this happening, please just let us know.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#running-examples","loc":{"lines":{"from":40,"to":52}}}}],["d6fda163-0aef-4abb-8898-103d5376e501",{"pageContent":"### 🙋 Getting Help[​](#-getting-help \"Direct link to 🙋 Getting Help\")\n\nAlthough we try to have a developer setup to make it as easy as possible for others to contribute (see below) it is possible that some pain point may arise around environment setup, linting, documentation, or other. Should that occur, please contact a maintainer! Not only do we want to help get you unblocked, but we also want to make sure that the process is smooth for future contributors.\n\nIn a similar vein, we do enforce certain linting, formatting, and documentation standards in the codebase. If you are finding these difficult (or even just annoying) to work with, feel free to contact a maintainer for help - we do not want these to get in the way of getting good code into the codebase.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#running-examples","loc":{"lines":{"from":52,"to":58}}}}],["3eb33b9b-717e-4b84-beb6-874a39f3035f",{"pageContent":"### 🏭 Release process[​](#-release-process \"Direct link to 🏭 Release process\")\n\nAs of now, LangChain has an ad hoc release process: releases are cut with high frequency via by a developer and published to [npm](https://www.npmjs.com/package/langchain).\n\nLangChain follows the [semver](https://semver.org/) versioning standard. However, as pre-1.0 software, even patch releases may contain [non-backwards-compatible changes](https://semver.org/#spec-item-4).\n\nIf your contribution has made its way into a release, we will want to give you credit on Twitter (only if you want though)! If you have a Twitter account you would like us to mention, please let us know in the PR or in another manner.\n\n### 🛠️ Tooling[​](#️-tooling \"Direct link to 🛠️ Tooling\")\n\nThis project uses the following tools, which are worth getting familiar with if you plan to contribute:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#running-examples","loc":{"lines":{"from":58,"to":68}}}}],["78962e9b-1af0-410c-b925-e39e4b545350",{"pageContent":"## 🚀 Quick Start[​](#-quick-start \"Direct link to 🚀 Quick Start\")\n\nClone this repo, then cd into it:\n\n```bash\ncd langchainjs  \n```\n\nNext, try running the following common tasks:\n\n## ✅ Common Tasks[​](#-common-tasks \"Direct link to ✅ Common Tasks\")\n\nOur goal is to make it as easy as possible for you to contribute to this project. All of the below commands should be run from within the `langchain/` directory unless otherwise noted.\n\n```bash\ncd langchain  \n```\n\n### Setup[​](#setup \"Direct link to Setup\")\n\nTo get started, you will need to install the dependencies for the project. To do so, run:\n\n```bash\nyarn  \n```\n\n### Linting[​](#linting \"Direct link to Linting\")\n\nWe use [eslint](https://eslint.org/) to enforce standard lint rules. To run the linter, run:\n\n```bash\nyarn lint  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#running-examples","loc":{"lines":{"from":70,"to":104}}}}],["3e04d6ce-b34d-4dca-b505-709a44223121",{"pageContent":"### Formatting[​](#formatting \"Direct link to Formatting\")\n\nWe use [prettier](https://prettier.io) to enforce code formatting style. To run the formatter, run:\n\n```bash\nyarn format  \n```\n\nTo just check for formatting differences, without fixing them, run:\n\n```bash\nyarn format:check  \n```\n\n### Testing[​](#testing \"Direct link to Testing\")\n\nIn general, tests should be added within a `tests/` folder alongside the modules they are testing.\n\n**Unit tests** cover modular logic that does not require calls to outside APIs.\n\nIf you add new logic, please add a unit test. Unit tests should be called `*.test.ts`.\n\nTo run only unit tests, run:\n\n```bash\nyarn test  \n```\n\n##","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#running-examples","loc":{"lines":{"from":104,"to":132}}}}],["291782a1-5f8d-450f-9db7-a407986a76af",{"pageContent":"#### Running a single test[​](#running-a-single-test \"Direct link to Running a single test\")\n\nTo run a single test, run:\n\n```bash\nyarn test:single /path/to/yourtest.test.ts  \n```\n\nThis is useful for developing individual features.\n\n**Integration tests** cover logic that requires making calls to outside APIs (often integration with other services).\n\nIf you add support for a new external API, please add a new integration test. Integration tests should be called `*.int.test.ts`.\n\nNote that most integration tests require credentials or other setup. You will likely need to set up a `langchain/.env` file like the example [here](https://github.com/langchain-ai/langchainjs/blob/main/langchain/.env.example).\n\nWe generally recommend only running integration tests with `yarn test:single`, but if you want to run all integration tests, run:\n\n```bash\nyarn test:integration  \n```\n\n### Building[​](#building \"Direct link to Building\")\n\nTo build the project, run:\n\n```bash\nyarn build  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#running-examples","loc":{"lines":{"from":132,"to":162}}}}],["d951b50e-d322-4765-93fa-eb32c43c9869",{"pageContent":"### Adding an Entrypoint[​](#adding-an-entrypoint \"Direct link to Adding an Entrypoint\")\n\nLangChain exposes multiple subpaths the user can import from, e.g.\n\n```ts\nimport { OpenAI } from \"langchain/llms/openai\";  \n```\n\nWe call these subpaths \"entrypoints\". In general, you should create a new entrypoint if you are adding a new integration with a 3rd party library. If you're adding self-contained functionality without any external dependencies, you can add it to an existing entrypoint.\n\nIn order to declare a new entrypoint that users can import from, you should edit the `langchain/scripts/create-entrypoints.js` script. To add an entrypoint `tools` that imports from `tools/index.ts` you'd add the following to the `entrypoints` variable:\n\n```ts\nconst entrypoints = {  \n  // ...  \n  tools: \"tools/index\",  \n};  \n```\n\nThis will make sure the entrypoint is included in the published package, and in generated documentation.\n\n## Documentation[​](#documentation \"Direct link to Documentation\")\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#running-examples","loc":{"lines":{"from":162,"to":185}}}}],["baff8d27-cd05-41d9-b040-0d200bfdff2d",{"pageContent":"### Contribute Documentation[​](#contribute-documentation \"Direct link to Contribute Documentation\")\n\nDocs are largely autogenerated by [TypeDoc](https://typedoc.org/) from the code.\n\nFor that reason, we ask that you add good documentation to all classes and methods.\n\nSimilar to linting, we recognize documentation can be annoying. If you do not want to do it, please contact a project maintainer, and they can help you with it. We do not want this to be a blocker for good code getting contributed.\n\nDocumentation and the skeleton lives under the `docs/` folder. Example code is imported from under the `examples/` folder.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#running-examples","loc":{"lines":{"from":185,"to":195}}}}],["131983d9-f5c3-48fb-8113-27051f4da8f6",{"pageContent":"### Running examples[​](#running-examples \"Direct link to Running examples\")\n\nIf you add a new major piece of functionality, it is helpful to add an example to showcase how to use it. Most of our users find examples to be the most helpful kind of documentation.\n\nExamples can be added in the `examples/src` directory, e.g. `examples/src/path/to/example` and should export a `run` function. This example can then be invoked with `yarn example path/to/example` at the top level of the repo.\n\nTo run examples that require an environment variable, you'll need to add a `.env` file under `examples/.env`\n\n### Build Documentation Locally[​](#build-documentation-locally \"Direct link to Build Documentation Locally\")\n\nTo generate and view the documentation locally, change to the project root and run `yarn` to ensure dependencies get installed in both the `docs/` and `examples/` workspaces:\n\n```bash\ncd ..  \nyarn  \n```\n\nThen run:\n\n```bash\nyarn docs  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#running-examples","loc":{"lines":{"from":195,"to":216}}}}],["9c486fad-3291-42c7-b4ee-6c488a407971",{"pageContent":"## Advanced[​](#advanced \"Direct link to Advanced\")\n\n**Environment tests** test whether LangChain works across different JS environments, including Node.js (both ESM and CJS), Edge environments (eg. Cloudflare Workers), and browsers (using Webpack).\n\nTo run the environment tests with Docker, run the following command from the project root:\n\n```bash\nyarn test:exports:docker  \n```\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#running-examples","loc":{"lines":{"from":218,"to":233}}}}],["f45e264d-b408-4994-858e-bbe2aacb5781",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Contributing to LangChain\n\n👋 Hi there! Thank you for being interested in contributing to LangChain. As an open source project in a rapidly developing field, we are extremely open to contributions, whether it be in the form of a new feature, improved infra, or better documentation.\n\nTo contribute to this project, please follow a [\"fork and pull request\"](https://docs.github.com/en/get-started/quickstart/contributing-to-projects) workflow. Please do not try to push directly to this repo unless you are a maintainer.\n\n## Quick Links[​](#quick-links \"Direct link to Quick Links\")\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#build-documentation-locally","loc":{"lines":{"from":1,"to":16}}}}],["fe508b33-513b-42f2-b5ee-0bd56cc170a2",{"pageContent":"### Not sure what to work on?[​](#not-sure-what-to-work-on \"Direct link to Not sure what to work on?\")\n\nIf you are not sure what to work on, we have a few suggestions:\n\n### New abstractions[​](#new-abstractions \"Direct link to New abstractions\")\n\nWe aim to keep the same APIs between the Python and JS versions of LangChain, where possible. As such we ask that if you have an idea for a new abstraction, please open an issue first to discuss it. This will help us make sure that the API is consistent across both versions. If you're not sure what to work on, we recommend looking at the links above first.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#build-documentation-locally","loc":{"lines":{"from":16,"to":24}}}}],["5192906a-b0f7-4239-ad26-99e641420d30",{"pageContent":"## Want to add a specific integration?[​](#want-to-add-a-specific-integration \"Direct link to Want to add a specific integration?\")\n\nLangChain supports several different types of integrations with third-party providers and frameworks, including LLM providers (e.g. [OpenAI](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/llms/openai.ts)), vector stores (e.g. [FAISS](https://github.com/ewfian/langchainjs/blob/main/langchain/src/vectorstores/faiss.ts)), document loaders (e.g. [Apify](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/document_loaders/web/apify_dataset.ts)) persistent message history stores (e.g. [Redis](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/stores/message/redis.ts)), and more.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#build-documentation-locally","loc":{"lines":{"from":24,"to":26}}}}],["76201547-99eb-4532-8730-453f898ceaad",{"pageContent":"We welcome such contributions, but ask that you read our dedicated [integration contribution guide](https://github.com/langchain-ai/langchainjs/blob/main/.github/contributing/INTEGRATIONS.md) for specific details and patterns to consider before opening a pull request.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#build-documentation-locally","loc":{"lines":{"from":28,"to":28}}}}],["ce1b80ed-f185-4ffa-a891-043b59844f71",{"pageContent":"### Want to add a feature that's already in Python?[​](#want-to-add-a-feature-thats-already-in-python \"Direct link to Want to add a feature that's already in Python?\")\n\nIf you're interested in contributing a feature that's already in the [LangChain Python repo](https://github.com/langchain-ai/langchain) and you'd like some help getting started, you can try pasting code snippets and classes into the [LangChain Python to JS translator](https://langchain-translator.vercel.app/).\n\nIt's a chat interface wrapping a fine-tuned `gpt-3.5-turbo` instance trained on prior ported features. This allows the model to innately take into account LangChain-specific code style and imports.\n\nIt's an ongoing project, and feedback on runs will be used to improve the [LangSmith dataset](https://smith.langchain.com) for further fine-tuning! Try it out below:\n\n[https://langchain-translator.vercel.app/](https://langchain-translator.vercel.app/)","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#build-documentation-locally","loc":{"lines":{"from":30,"to":38}}}}],["23be043b-7bf1-4c6c-993d-63963911df68",{"pageContent":"## 🗺️ Contributing Guidelines[​](#️-contributing-guidelines \"Direct link to 🗺️ Contributing Guidelines\")\n\n### 🚩 GitHub Issues[​](#-github-issues \"Direct link to 🚩 GitHub Issues\")\n\nOur [issues](https://github.com/langchain-ai/langchainjs/issues) page contains with bugs, improvements, and feature requests.\n\nIf you start working on an issue, please assign it to yourself.\n\nIf you are adding an issue, please try to keep it focused on a single modular bug/improvement/feature. If the two issues are related, or blocking, please link them rather than keep them as one single one.\n\nWe will try to keep these issues as up to date as possible, though with the rapid rate of develop in this field some may get out of date. If you notice this happening, please just let us know.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#build-documentation-locally","loc":{"lines":{"from":40,"to":52}}}}],["c3f17d50-4f00-4ab1-a95c-e7dde42b0241",{"pageContent":"### 🙋 Getting Help[​](#-getting-help \"Direct link to 🙋 Getting Help\")\n\nAlthough we try to have a developer setup to make it as easy as possible for others to contribute (see below) it is possible that some pain point may arise around environment setup, linting, documentation, or other. Should that occur, please contact a maintainer! Not only do we want to help get you unblocked, but we also want to make sure that the process is smooth for future contributors.\n\nIn a similar vein, we do enforce certain linting, formatting, and documentation standards in the codebase. If you are finding these difficult (or even just annoying) to work with, feel free to contact a maintainer for help - we do not want these to get in the way of getting good code into the codebase.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#build-documentation-locally","loc":{"lines":{"from":52,"to":58}}}}],["24c5879b-5565-4da3-8edc-bb94087bba1f",{"pageContent":"### 🏭 Release process[​](#-release-process \"Direct link to 🏭 Release process\")\n\nAs of now, LangChain has an ad hoc release process: releases are cut with high frequency via by a developer and published to [npm](https://www.npmjs.com/package/langchain).\n\nLangChain follows the [semver](https://semver.org/) versioning standard. However, as pre-1.0 software, even patch releases may contain [non-backwards-compatible changes](https://semver.org/#spec-item-4).\n\nIf your contribution has made its way into a release, we will want to give you credit on Twitter (only if you want though)! If you have a Twitter account you would like us to mention, please let us know in the PR or in another manner.\n\n### 🛠️ Tooling[​](#️-tooling \"Direct link to 🛠️ Tooling\")\n\nThis project uses the following tools, which are worth getting familiar with if you plan to contribute:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#build-documentation-locally","loc":{"lines":{"from":58,"to":68}}}}],["2dc156f5-d5af-4708-868b-b93a0890c3fa",{"pageContent":"## 🚀 Quick Start[​](#-quick-start \"Direct link to 🚀 Quick Start\")\n\nClone this repo, then cd into it:\n\n```bash\ncd langchainjs  \n```\n\nNext, try running the following common tasks:\n\n## ✅ Common Tasks[​](#-common-tasks \"Direct link to ✅ Common Tasks\")\n\nOur goal is to make it as easy as possible for you to contribute to this project. All of the below commands should be run from within the `langchain/` directory unless otherwise noted.\n\n```bash\ncd langchain  \n```\n\n### Setup[​](#setup \"Direct link to Setup\")\n\nTo get started, you will need to install the dependencies for the project. To do so, run:\n\n```bash\nyarn  \n```\n\n### Linting[​](#linting \"Direct link to Linting\")\n\nWe use [eslint](https://eslint.org/) to enforce standard lint rules. To run the linter, run:\n\n```bash\nyarn lint  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#build-documentation-locally","loc":{"lines":{"from":70,"to":104}}}}],["f585a955-ca61-4354-915a-a7b352533c8c",{"pageContent":"### Formatting[​](#formatting \"Direct link to Formatting\")\n\nWe use [prettier](https://prettier.io) to enforce code formatting style. To run the formatter, run:\n\n```bash\nyarn format  \n```\n\nTo just check for formatting differences, without fixing them, run:\n\n```bash\nyarn format:check  \n```\n\n### Testing[​](#testing \"Direct link to Testing\")\n\nIn general, tests should be added within a `tests/` folder alongside the modules they are testing.\n\n**Unit tests** cover modular logic that does not require calls to outside APIs.\n\nIf you add new logic, please add a unit test. Unit tests should be called `*.test.ts`.\n\nTo run only unit tests, run:\n\n```bash\nyarn test  \n```\n\n##","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#build-documentation-locally","loc":{"lines":{"from":104,"to":132}}}}],["d7bbac2e-cf16-4350-a213-4cfef855424d",{"pageContent":"#### Running a single test[​](#running-a-single-test \"Direct link to Running a single test\")\n\nTo run a single test, run:\n\n```bash\nyarn test:single /path/to/yourtest.test.ts  \n```\n\nThis is useful for developing individual features.\n\n**Integration tests** cover logic that requires making calls to outside APIs (often integration with other services).\n\nIf you add support for a new external API, please add a new integration test. Integration tests should be called `*.int.test.ts`.\n\nNote that most integration tests require credentials or other setup. You will likely need to set up a `langchain/.env` file like the example [here](https://github.com/langchain-ai/langchainjs/blob/main/langchain/.env.example).\n\nWe generally recommend only running integration tests with `yarn test:single`, but if you want to run all integration tests, run:\n\n```bash\nyarn test:integration  \n```\n\n### Building[​](#building \"Direct link to Building\")\n\nTo build the project, run:\n\n```bash\nyarn build  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#build-documentation-locally","loc":{"lines":{"from":132,"to":162}}}}],["58d2c77a-ccb9-42ef-babd-46ad7d476469",{"pageContent":"### Adding an Entrypoint[​](#adding-an-entrypoint \"Direct link to Adding an Entrypoint\")\n\nLangChain exposes multiple subpaths the user can import from, e.g.\n\n```ts\nimport { OpenAI } from \"langchain/llms/openai\";  \n```\n\nWe call these subpaths \"entrypoints\". In general, you should create a new entrypoint if you are adding a new integration with a 3rd party library. If you're adding self-contained functionality without any external dependencies, you can add it to an existing entrypoint.\n\nIn order to declare a new entrypoint that users can import from, you should edit the `langchain/scripts/create-entrypoints.js` script. To add an entrypoint `tools` that imports from `tools/index.ts` you'd add the following to the `entrypoints` variable:\n\n```ts\nconst entrypoints = {  \n  // ...  \n  tools: \"tools/index\",  \n};  \n```\n\nThis will make sure the entrypoint is included in the published package, and in generated documentation.\n\n## Documentation[​](#documentation \"Direct link to Documentation\")\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#build-documentation-locally","loc":{"lines":{"from":162,"to":185}}}}],["3e113e5b-c775-450d-a1c3-206110788f10",{"pageContent":"### Contribute Documentation[​](#contribute-documentation \"Direct link to Contribute Documentation\")\n\nDocs are largely autogenerated by [TypeDoc](https://typedoc.org/) from the code.\n\nFor that reason, we ask that you add good documentation to all classes and methods.\n\nSimilar to linting, we recognize documentation can be annoying. If you do not want to do it, please contact a project maintainer, and they can help you with it. We do not want this to be a blocker for good code getting contributed.\n\nDocumentation and the skeleton lives under the `docs/` folder. Example code is imported from under the `examples/` folder.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#build-documentation-locally","loc":{"lines":{"from":185,"to":195}}}}],["d27e42ce-afd9-4be0-b3be-1f5809a76245",{"pageContent":"### Running examples[​](#running-examples \"Direct link to Running examples\")\n\nIf you add a new major piece of functionality, it is helpful to add an example to showcase how to use it. Most of our users find examples to be the most helpful kind of documentation.\n\nExamples can be added in the `examples/src` directory, e.g. `examples/src/path/to/example` and should export a `run` function. This example can then be invoked with `yarn example path/to/example` at the top level of the repo.\n\nTo run examples that require an environment variable, you'll need to add a `.env` file under `examples/.env`\n\n### Build Documentation Locally[​](#build-documentation-locally \"Direct link to Build Documentation Locally\")\n\nTo generate and view the documentation locally, change to the project root and run `yarn` to ensure dependencies get installed in both the `docs/` and `examples/` workspaces:\n\n```bash\ncd ..  \nyarn  \n```\n\nThen run:\n\n```bash\nyarn docs  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#build-documentation-locally","loc":{"lines":{"from":195,"to":216}}}}],["e6013a3d-95a7-42c3-a846-7c2609fe9021",{"pageContent":"## Advanced[​](#advanced \"Direct link to Advanced\")\n\n**Environment tests** test whether LangChain works across different JS environments, including Node.js (both ESM and CJS), Edge environments (eg. Cloudflare Workers), and browsers (using Webpack).\n\nTo run the environment tests with Docker, run the following command from the project root:\n\n```bash\nyarn test:exports:docker  \n```\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#build-documentation-locally","loc":{"lines":{"from":218,"to":233}}}}],["5ea46563-35d6-4d03-b5de-7b3da5766d99",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Contributing to LangChain\n\n👋 Hi there! Thank you for being interested in contributing to LangChain. As an open source project in a rapidly developing field, we are extremely open to contributions, whether it be in the form of a new feature, improved infra, or better documentation.\n\nTo contribute to this project, please follow a [\"fork and pull request\"](https://docs.github.com/en/get-started/quickstart/contributing-to-projects) workflow. Please do not try to push directly to this repo unless you are a maintainer.\n\n## Quick Links[​](#quick-links \"Direct link to Quick Links\")\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#advanced","loc":{"lines":{"from":1,"to":16}}}}],["01f6646a-b542-4305-b848-d6ecc15bffe2",{"pageContent":"### Not sure what to work on?[​](#not-sure-what-to-work-on \"Direct link to Not sure what to work on?\")\n\nIf you are not sure what to work on, we have a few suggestions:\n\n### New abstractions[​](#new-abstractions \"Direct link to New abstractions\")\n\nWe aim to keep the same APIs between the Python and JS versions of LangChain, where possible. As such we ask that if you have an idea for a new abstraction, please open an issue first to discuss it. This will help us make sure that the API is consistent across both versions. If you're not sure what to work on, we recommend looking at the links above first.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#advanced","loc":{"lines":{"from":16,"to":24}}}}],["8e69c8b9-3b11-4e81-8302-a8c9b3a26bf6",{"pageContent":"## Want to add a specific integration?[​](#want-to-add-a-specific-integration \"Direct link to Want to add a specific integration?\")\n\nLangChain supports several different types of integrations with third-party providers and frameworks, including LLM providers (e.g. [OpenAI](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/llms/openai.ts)), vector stores (e.g. [FAISS](https://github.com/ewfian/langchainjs/blob/main/langchain/src/vectorstores/faiss.ts)), document loaders (e.g. [Apify](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/document_loaders/web/apify_dataset.ts)) persistent message history stores (e.g. [Redis](https://github.com/langchain-ai/langchainjs/blob/main/langchain/src/stores/message/redis.ts)), and more.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#advanced","loc":{"lines":{"from":24,"to":26}}}}],["bb2d6f38-ffac-4762-868d-87c97f8ba110",{"pageContent":"We welcome such contributions, but ask that you read our dedicated [integration contribution guide](https://github.com/langchain-ai/langchainjs/blob/main/.github/contributing/INTEGRATIONS.md) for specific details and patterns to consider before opening a pull request.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#advanced","loc":{"lines":{"from":28,"to":28}}}}],["a5c564ca-83c3-42b2-a818-2f3c86da18d7",{"pageContent":"### Want to add a feature that's already in Python?[​](#want-to-add-a-feature-thats-already-in-python \"Direct link to Want to add a feature that's already in Python?\")\n\nIf you're interested in contributing a feature that's already in the [LangChain Python repo](https://github.com/langchain-ai/langchain) and you'd like some help getting started, you can try pasting code snippets and classes into the [LangChain Python to JS translator](https://langchain-translator.vercel.app/).\n\nIt's a chat interface wrapping a fine-tuned `gpt-3.5-turbo` instance trained on prior ported features. This allows the model to innately take into account LangChain-specific code style and imports.\n\nIt's an ongoing project, and feedback on runs will be used to improve the [LangSmith dataset](https://smith.langchain.com) for further fine-tuning! Try it out below:\n\n[https://langchain-translator.vercel.app/](https://langchain-translator.vercel.app/)","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#advanced","loc":{"lines":{"from":30,"to":38}}}}],["8be29b92-ebf0-4651-bb39-aa619990cef5",{"pageContent":"## 🗺️ Contributing Guidelines[​](#️-contributing-guidelines \"Direct link to 🗺️ Contributing Guidelines\")\n\n### 🚩 GitHub Issues[​](#-github-issues \"Direct link to 🚩 GitHub Issues\")\n\nOur [issues](https://github.com/langchain-ai/langchainjs/issues) page contains with bugs, improvements, and feature requests.\n\nIf you start working on an issue, please assign it to yourself.\n\nIf you are adding an issue, please try to keep it focused on a single modular bug/improvement/feature. If the two issues are related, or blocking, please link them rather than keep them as one single one.\n\nWe will try to keep these issues as up to date as possible, though with the rapid rate of develop in this field some may get out of date. If you notice this happening, please just let us know.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#advanced","loc":{"lines":{"from":40,"to":52}}}}],["229c78fb-1cb8-4bf5-ac85-f43cfd5a56af",{"pageContent":"### 🙋 Getting Help[​](#-getting-help \"Direct link to 🙋 Getting Help\")\n\nAlthough we try to have a developer setup to make it as easy as possible for others to contribute (see below) it is possible that some pain point may arise around environment setup, linting, documentation, or other. Should that occur, please contact a maintainer! Not only do we want to help get you unblocked, but we also want to make sure that the process is smooth for future contributors.\n\nIn a similar vein, we do enforce certain linting, formatting, and documentation standards in the codebase. If you are finding these difficult (or even just annoying) to work with, feel free to contact a maintainer for help - we do not want these to get in the way of getting good code into the codebase.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#advanced","loc":{"lines":{"from":52,"to":58}}}}],["01a9d9e3-f2f5-4747-ba4a-989346300a5c",{"pageContent":"### 🏭 Release process[​](#-release-process \"Direct link to 🏭 Release process\")\n\nAs of now, LangChain has an ad hoc release process: releases are cut with high frequency via by a developer and published to [npm](https://www.npmjs.com/package/langchain).\n\nLangChain follows the [semver](https://semver.org/) versioning standard. However, as pre-1.0 software, even patch releases may contain [non-backwards-compatible changes](https://semver.org/#spec-item-4).\n\nIf your contribution has made its way into a release, we will want to give you credit on Twitter (only if you want though)! If you have a Twitter account you would like us to mention, please let us know in the PR or in another manner.\n\n### 🛠️ Tooling[​](#️-tooling \"Direct link to 🛠️ Tooling\")\n\nThis project uses the following tools, which are worth getting familiar with if you plan to contribute:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#advanced","loc":{"lines":{"from":58,"to":68}}}}],["35d9f414-c09b-4774-ab09-063340001afc",{"pageContent":"## 🚀 Quick Start[​](#-quick-start \"Direct link to 🚀 Quick Start\")\n\nClone this repo, then cd into it:\n\n```bash\ncd langchainjs  \n```\n\nNext, try running the following common tasks:\n\n## ✅ Common Tasks[​](#-common-tasks \"Direct link to ✅ Common Tasks\")\n\nOur goal is to make it as easy as possible for you to contribute to this project. All of the below commands should be run from within the `langchain/` directory unless otherwise noted.\n\n```bash\ncd langchain  \n```\n\n### Setup[​](#setup \"Direct link to Setup\")\n\nTo get started, you will need to install the dependencies for the project. To do so, run:\n\n```bash\nyarn  \n```\n\n### Linting[​](#linting \"Direct link to Linting\")\n\nWe use [eslint](https://eslint.org/) to enforce standard lint rules. To run the linter, run:\n\n```bash\nyarn lint  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#advanced","loc":{"lines":{"from":70,"to":104}}}}],["fae2b89b-a814-453e-ac3d-3adf01469cce",{"pageContent":"### Formatting[​](#formatting \"Direct link to Formatting\")\n\nWe use [prettier](https://prettier.io) to enforce code formatting style. To run the formatter, run:\n\n```bash\nyarn format  \n```\n\nTo just check for formatting differences, without fixing them, run:\n\n```bash\nyarn format:check  \n```\n\n### Testing[​](#testing \"Direct link to Testing\")\n\nIn general, tests should be added within a `tests/` folder alongside the modules they are testing.\n\n**Unit tests** cover modular logic that does not require calls to outside APIs.\n\nIf you add new logic, please add a unit test. Unit tests should be called `*.test.ts`.\n\nTo run only unit tests, run:\n\n```bash\nyarn test  \n```\n\n##","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#advanced","loc":{"lines":{"from":104,"to":132}}}}],["958393c7-3cc0-4beb-9519-93fb3d7ae0b2",{"pageContent":"#### Running a single test[​](#running-a-single-test \"Direct link to Running a single test\")\n\nTo run a single test, run:\n\n```bash\nyarn test:single /path/to/yourtest.test.ts  \n```\n\nThis is useful for developing individual features.\n\n**Integration tests** cover logic that requires making calls to outside APIs (often integration with other services).\n\nIf you add support for a new external API, please add a new integration test. Integration tests should be called `*.int.test.ts`.\n\nNote that most integration tests require credentials or other setup. You will likely need to set up a `langchain/.env` file like the example [here](https://github.com/langchain-ai/langchainjs/blob/main/langchain/.env.example).\n\nWe generally recommend only running integration tests with `yarn test:single`, but if you want to run all integration tests, run:\n\n```bash\nyarn test:integration  \n```\n\n### Building[​](#building \"Direct link to Building\")\n\nTo build the project, run:\n\n```bash\nyarn build  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#advanced","loc":{"lines":{"from":132,"to":162}}}}],["7867e3dc-67f5-4ce1-acc0-bc8ac716ab78",{"pageContent":"### Adding an Entrypoint[​](#adding-an-entrypoint \"Direct link to Adding an Entrypoint\")\n\nLangChain exposes multiple subpaths the user can import from, e.g.\n\n```ts\nimport { OpenAI } from \"langchain/llms/openai\";  \n```\n\nWe call these subpaths \"entrypoints\". In general, you should create a new entrypoint if you are adding a new integration with a 3rd party library. If you're adding self-contained functionality without any external dependencies, you can add it to an existing entrypoint.\n\nIn order to declare a new entrypoint that users can import from, you should edit the `langchain/scripts/create-entrypoints.js` script. To add an entrypoint `tools` that imports from `tools/index.ts` you'd add the following to the `entrypoints` variable:\n\n```ts\nconst entrypoints = {  \n  // ...  \n  tools: \"tools/index\",  \n};  \n```\n\nThis will make sure the entrypoint is included in the published package, and in generated documentation.\n\n## Documentation[​](#documentation \"Direct link to Documentation\")\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#advanced","loc":{"lines":{"from":162,"to":185}}}}],["43568367-3772-4815-9ab4-e9a84f401c23",{"pageContent":"### Contribute Documentation[​](#contribute-documentation \"Direct link to Contribute Documentation\")\n\nDocs are largely autogenerated by [TypeDoc](https://typedoc.org/) from the code.\n\nFor that reason, we ask that you add good documentation to all classes and methods.\n\nSimilar to linting, we recognize documentation can be annoying. If you do not want to do it, please contact a project maintainer, and they can help you with it. We do not want this to be a blocker for good code getting contributed.\n\nDocumentation and the skeleton lives under the `docs/` folder. Example code is imported from under the `examples/` folder.\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#advanced","loc":{"lines":{"from":185,"to":195}}}}],["f11df58c-9cbb-4652-bf5b-6a4f1d4d501a",{"pageContent":"### Running examples[​](#running-examples \"Direct link to Running examples\")\n\nIf you add a new major piece of functionality, it is helpful to add an example to showcase how to use it. Most of our users find examples to be the most helpful kind of documentation.\n\nExamples can be added in the `examples/src` directory, e.g. `examples/src/path/to/example` and should export a `run` function. This example can then be invoked with `yarn example path/to/example` at the top level of the repo.\n\nTo run examples that require an environment variable, you'll need to add a `.env` file under `examples/.env`\n\n### Build Documentation Locally[​](#build-documentation-locally \"Direct link to Build Documentation Locally\")\n\nTo generate and view the documentation locally, change to the project root and run `yarn` to ensure dependencies get installed in both the `docs/` and `examples/` workspaces:\n\n```bash\ncd ..  \nyarn  \n```\n\nThen run:\n\n```bash\nyarn docs  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#advanced","loc":{"lines":{"from":195,"to":216}}}}],["ae9763fc-8284-438b-9788-e4beada97aa4",{"pageContent":"## Advanced[​](#advanced \"Direct link to Advanced\")\n\n**Environment tests** test whether LangChain works across different JS environments, including Node.js (both ESM and CJS), Edge environments (eg. Cloudflare Workers), and browsers (using Webpack).\n\nTo run the environment tests with Docker, run the following command from the project root:\n\n```bash\nyarn test:exports:docker  \n```\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/contributing#advanced","loc":{"lines":{"from":218,"to":233}}}}],["49a6d0e8-7492-442e-b1c4-e3e0e261da98",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n[## 🗃️ Deployment\n\n2 items](/docs/guides/deployment/)[## 🗃️ Evaluation\n\n4 items](/docs/guides/evaluation/)[## 📄️ Fallbacks\n\nWhen working with language models, you may often encounter issues from the underlying APIs, e.g. rate limits or downtime.](/docs/guides/fallbacks)[Previous\n\nSecurity](/docs/security)[Next\n\nDeployment](/docs/guides/deployment/)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/guides/","loc":{"lines":{"from":1,"to":25}}}}],["15d318a8-601a-421a-b8ea-e9f0e9513ca6",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n[## 🗃️ Deployment\n\n2 items](/docs/guides/deployment/)[## 🗃️ Evaluation\n\n4 items](/docs/guides/evaluation/)[## 📄️ Fallbacks\n\nWhen working with language models, you may often encounter issues from the underlying APIs, e.g. rate limits or downtime.](/docs/guides/fallbacks)[Previous\n\nSecurity](/docs/security)[Next\n\nDeployment](/docs/guides/deployment/)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/guides/#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":1,"to":25}}}}],["be86ca73-8543-42bf-80b2-d3a29a738c6d",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n[## 🗃️ Deployment\n\n2 items](/docs/guides/deployment/)[## 🗃️ Evaluation\n\n4 items](/docs/guides/evaluation/)[## 📄️ Fallbacks\n\nWhen working with language models, you may often encounter issues from the underlying APIs, e.g. rate limits or downtime.](/docs/guides/fallbacks)[Previous\n\nSecurity](/docs/security)[Next\n\nDeployment](/docs/guides/deployment/)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/guides/#","loc":{"lines":{"from":1,"to":25}}}}],["bdffae9d-396b-4279-b6f4-4c79e78907f0",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n[## 📄️ Introduction\n\nLangChain is a framework for developing applications powered by language models. It enables applications that:](/docs/get_started/introduction)[## 📄️ Installation\n\nUpdating from <0.0.52? See this section for instructions.](/docs/get_started/installation)[## 📄️ Quickstart\n\nInstallation](/docs/get_started/quickstart)[Next\n\nIntroduction](/docs/get_started/introduction)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started","loc":{"lines":{"from":1,"to":23}}}}],["fb46212a-9bd6-42d2-988b-c594d02b2005",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n[## 📄️ Introduction\n\nLangChain is a framework for developing applications powered by language models. It enables applications that:](/docs/get_started/introduction)[## 📄️ Installation\n\nUpdating from <0.0.52? See this section for instructions.](/docs/get_started/installation)[## 📄️ Quickstart\n\nInstallation](/docs/get_started/quickstart)[Next\n\nIntroduction](/docs/get_started/introduction)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":1,"to":23}}}}],["8783d7fb-9891-4be7-85ae-bf232214b0a7",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n[## 📄️ Introduction\n\nLangChain is a framework for developing applications powered by language models. It enables applications that:](/docs/get_started/introduction)[## 📄️ Installation\n\nUpdating from <0.0.52? See this section for instructions.](/docs/get_started/installation)[## 📄️ Quickstart\n\nInstallation](/docs/get_started/quickstart)[Next\n\nIntroduction](/docs/get_started/introduction)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started#","loc":{"lines":{"from":1,"to":23}}}}],["64e77839-1275-4f7c-8bc4-b71800dfc08e",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Installation\n\ninfo\n\nUpdating from <0.0.52? See [this section](#updating-from-0052) for instructions.\n\n## Supported Environments[​](#supported-environments \"Direct link to Supported Environments\")\n\nLangChain is written in TypeScript and can be used in:\n\n* Node.js (ESM and CommonJS) - 18.x, 19.x, 20.x\n* Cloudflare Workers\n* Vercel / Next.js (Browser, Serverless and Edge functions)\n* Supabase Edge Functions\n* Browser\n* Deno\n* Bun\n\n## Installation[​](#installation-1 \"Direct link to Installation\")\n\nTo get started, install LangChain with the following command:\n\n* npm\n* Yarn\n* pnpm\n\n```bash\nnpm install -S langchain  \n```\n\n```bash\nyarn add langchain  \n```\n\n```bash\npnpm add langchain  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/installation","loc":{"lines":{"from":1,"to":46}}}}],["6d90f1df-77be-4d3f-96a3-d87cb87222df",{"pageContent":"### TypeScript[​](#typescript \"Direct link to TypeScript\")\n\nLangChain is written in TypeScript and provides type definitions for all of its public APIs.\n\n## Loading the library[​](#loading-the-library \"Direct link to Loading the library\")\n\n### ESM[​](#esm \"Direct link to ESM\")\n\nLangChain provides an ESM build targeting Node.js environments. You can import it using the following syntax:\n\n```typescript\nimport { OpenAI } from \"langchain/llms/openai\";  \n```\n\nIf you are using TypeScript in an ESM project we suggest updating your `tsconfig.json` to include the following:\n\ntsconfig.json\n\n```json\n{  \n  \"compilerOptions\": {  \n    ...  \n    \"target\": \"ES2020\", // or higher  \n    \"module\": \"nodenext\",  \n  }  \n}  \n```\n\n### CommonJS[​](#commonjs \"Direct link to CommonJS\")\n\nLangChain provides a CommonJS build targeting Node.js environments. You can import it using the following syntax:\n\n```typescript\nconst { OpenAI } = require(\"langchain/llms/openai\");  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/installation","loc":{"lines":{"from":46,"to":82}}}}],["7bef4cc0-6921-4ee6-b0cf-0f253682191e",{"pageContent":"### Cloudflare Workers[​](#cloudflare-workers \"Direct link to Cloudflare Workers\")\n\nLangChain can be used in Cloudflare Workers. You can import it using the following syntax:\n\n```typescript\nimport { OpenAI } from \"langchain/llms/openai\";  \n```\n\n### Vercel / Next.js[​](#vercel--nextjs \"Direct link to Vercel / Next.js\")\n\nLangChain can be used in Vercel / Next.js. We support using LangChain in frontend components, in Serverless functions and in Edge functions. You can import it using the following syntax:\n\n```typescript\nimport { OpenAI } from \"langchain/llms/openai\";  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/installation","loc":{"lines":{"from":82,"to":98}}}}],["3a48ed61-16b4-419a-9f20-9b2771d0e923",{"pageContent":"### Deno / Supabase Edge Functions[​](#deno--supabase-edge-functions \"Direct link to Deno / Supabase Edge Functions\")\n\nLangChain can be used in Deno / Supabase Edge Functions. You can import it using the following syntax:\n\n```typescript\nimport { OpenAI } from \"https://esm.sh/langchain/llms/openai\";  \n```\n\nWe recommend looking at our [Supabase Template](https://github.com/langchain-ai/langchain-template-supabase) for an example of how to use LangChain in Supabase Edge Functions.\n\n### Browser[​](#browser \"Direct link to Browser\")\n\nLangChain can be used in the browser. In our CI we test bundling LangChain with Webpack and Vite, but other bundlers should work too. You can import it using the following syntax:\n\n```typescript\nimport { OpenAI } from \"langchain/llms/openai\";  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/installation","loc":{"lines":{"from":98,"to":114}}}}],["a6dc5ae6-2575-45ad-b304-fdde36aa8a69",{"pageContent":"## Updating from <0.0.52[​](#updating-from-0052 \"Direct link to Updating from <0.0.52\")\n\nIf you are updating from a version of LangChain prior to 0.0.52, you will need to update your imports to use the new path structure.\n\nFor example, if you were previously doing\n\n```typescript\nimport { OpenAI } from \"langchain/llms\";  \n```\n\nyou will now need to do\n\n```typescript\nimport { OpenAI } from \"langchain/llms/openai\";  \n```\n\nThis applies to all imports from the following 6 modules, which have been split into submodules for each integration. The combined modules are deprecated, do not work outside of Node.js, and will be removed in a future version.\n\nOther modules are not affected by this change, and you can continue to import them from the same path.\n\nAdditionally, there are some breaking changes that were needed to support new environments:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/installation","loc":{"lines":{"from":116,"to":136}}}}],["5c37d912-7a5e-42c4-a7c6-132fd4cf7112",{"pageContent":"* `import { Calculator } from \"langchain/tools\";` now moved to\n  * `import { Calculator } from \"langchain/tools/calculator\";`\n* `import { loadLLM } from \"langchain/llms\";` now moved to\n  * `import { loadLLM } from \"langchain/llms/load\";`\n* `import { loadAgent } from \"langchain/agents\";` now moved to\n  * `import { loadAgent } from \"langchain/agents/load\";`\n* `import { loadPrompt } from \"langchain/prompts\";` now moved to\n  * `import { loadPrompt } from \"langchain/prompts/load\";`\n* `import { loadChain } from \"langchain/chains\";` now moved to\n  * `import { loadChain } from \"langchain/chains/load\";`","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/installation","loc":{"lines":{"from":138,"to":147}}}}],["5d52b593-9953-4258-8965-3edd2107d3d3",{"pageContent":"## Unsupported: Node.js 16[​](#unsupported-nodejs-16 \"Direct link to Unsupported: Node.js 16\")\n\nWe do not support Node.js 16, but if you still want to run LangChain on Node.js 16, you will need to follow the instructions in this section. We do not guarantee that these instructions will continue to work in the future.\n\nYou will have to make `fetch` available globally, either:\n\nYou'll also need to [polyfill `ReadableStream`](https://www.npmjs.com/package/web-streams-polyfill) by installing:\n\n* npm\n* Yarn\n* pnpm\n\n```bash\nnpm i web-streams-polyfill  \n```\n\n```bash\nyarn add web-streams-polyfill  \n```\n\n```bash\npnpm add web-streams-polyfill  \n```\n\nAnd then adding it to the global namespace in your main entrypoint:\n\n```typescript\nimport \"web-streams-polyfill/es6\";  \n```\n\nAdditionally you'll have to polyfill `structuredClone`, eg. by installing `core-js` and following the instructions [here](https://github.com/zloirock/core-js).","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/installation","loc":{"lines":{"from":149,"to":179}}}}],["101a40ed-2bc6-4d12-8421-f56d8572e5de",{"pageContent":"If you are running Node.js 18+, you do not need to do anything.[Previous\n\nIntroduction](/docs/get_started/introduction)[Next\n\nQuickstart](/docs/get_started/quickstart)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/installation","loc":{"lines":{"from":181,"to":192}}}}],["e61d951c-38b8-46d8-8e5b-4e4ccbee940b",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Installation\n\ninfo\n\nUpdating from <0.0.52? See [this section](#updating-from-0052) for instructions.\n\n## Supported Environments[​](#supported-environments \"Direct link to Supported Environments\")\n\nLangChain is written in TypeScript and can be used in:\n\n* Node.js (ESM and CommonJS) - 18.x, 19.x, 20.x\n* Cloudflare Workers\n* Vercel / Next.js (Browser, Serverless and Edge functions)\n* Supabase Edge Functions\n* Browser\n* Deno\n* Bun\n\n## Installation[​](#installation-1 \"Direct link to Installation\")\n\nTo get started, install LangChain with the following command:\n\n* npm\n* Yarn\n* pnpm\n\n```bash\nnpm install -S langchain  \n```\n\n```bash\nyarn add langchain  \n```\n\n```bash\npnpm add langchain  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/installation#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":1,"to":46}}}}],["64e9d50e-4a18-4e20-998d-7d6f231847d5",{"pageContent":"### TypeScript[​](#typescript \"Direct link to TypeScript\")\n\nLangChain is written in TypeScript and provides type definitions for all of its public APIs.\n\n## Loading the library[​](#loading-the-library \"Direct link to Loading the library\")\n\n### ESM[​](#esm \"Direct link to ESM\")\n\nLangChain provides an ESM build targeting Node.js environments. You can import it using the following syntax:\n\n```typescript\nimport { OpenAI } from \"langchain/llms/openai\";  \n```\n\nIf you are using TypeScript in an ESM project we suggest updating your `tsconfig.json` to include the following:\n\ntsconfig.json\n\n```json\n{  \n  \"compilerOptions\": {  \n    ...  \n    \"target\": \"ES2020\", // or higher  \n    \"module\": \"nodenext\",  \n  }  \n}  \n```\n\n### CommonJS[​](#commonjs \"Direct link to CommonJS\")\n\nLangChain provides a CommonJS build targeting Node.js environments. You can import it using the following syntax:\n\n```typescript\nconst { OpenAI } = require(\"langchain/llms/openai\");  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/installation#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":46,"to":82}}}}],["e4c5569d-99eb-4487-9a89-20831ced8799",{"pageContent":"### Cloudflare Workers[​](#cloudflare-workers \"Direct link to Cloudflare Workers\")\n\nLangChain can be used in Cloudflare Workers. You can import it using the following syntax:\n\n```typescript\nimport { OpenAI } from \"langchain/llms/openai\";  \n```\n\n### Vercel / Next.js[​](#vercel--nextjs \"Direct link to Vercel / Next.js\")\n\nLangChain can be used in Vercel / Next.js. We support using LangChain in frontend components, in Serverless functions and in Edge functions. You can import it using the following syntax:\n\n```typescript\nimport { OpenAI } from \"langchain/llms/openai\";  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/installation#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":82,"to":98}}}}],["649af1d6-db1f-4d0f-a5ab-d2596440eee1",{"pageContent":"### Deno / Supabase Edge Functions[​](#deno--supabase-edge-functions \"Direct link to Deno / Supabase Edge Functions\")\n\nLangChain can be used in Deno / Supabase Edge Functions. You can import it using the following syntax:\n\n```typescript\nimport { OpenAI } from \"https://esm.sh/langchain/llms/openai\";  \n```\n\nWe recommend looking at our [Supabase Template](https://github.com/langchain-ai/langchain-template-supabase) for an example of how to use LangChain in Supabase Edge Functions.\n\n### Browser[​](#browser \"Direct link to Browser\")\n\nLangChain can be used in the browser. In our CI we test bundling LangChain with Webpack and Vite, but other bundlers should work too. You can import it using the following syntax:\n\n```typescript\nimport { OpenAI } from \"langchain/llms/openai\";  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/installation#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":98,"to":114}}}}],["4cb2057a-9474-49f0-a5d9-9ff42c67afb1",{"pageContent":"## Updating from <0.0.52[​](#updating-from-0052 \"Direct link to Updating from <0.0.52\")\n\nIf you are updating from a version of LangChain prior to 0.0.52, you will need to update your imports to use the new path structure.\n\nFor example, if you were previously doing\n\n```typescript\nimport { OpenAI } from \"langchain/llms\";  \n```\n\nyou will now need to do\n\n```typescript\nimport { OpenAI } from \"langchain/llms/openai\";  \n```\n\nThis applies to all imports from the following 6 modules, which have been split into submodules for each integration. The combined modules are deprecated, do not work outside of Node.js, and will be removed in a future version.\n\nOther modules are not affected by this change, and you can continue to import them from the same path.\n\nAdditionally, there are some breaking changes that were needed to support new environments:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/installation#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":116,"to":136}}}}],["e3b746b9-9688-41b7-8373-e59d810632b5",{"pageContent":"* `import { Calculator } from \"langchain/tools\";` now moved to\n  * `import { Calculator } from \"langchain/tools/calculator\";`\n* `import { loadLLM } from \"langchain/llms\";` now moved to\n  * `import { loadLLM } from \"langchain/llms/load\";`\n* `import { loadAgent } from \"langchain/agents\";` now moved to\n  * `import { loadAgent } from \"langchain/agents/load\";`\n* `import { loadPrompt } from \"langchain/prompts\";` now moved to\n  * `import { loadPrompt } from \"langchain/prompts/load\";`\n* `import { loadChain } from \"langchain/chains\";` now moved to\n  * `import { loadChain } from \"langchain/chains/load\";`","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/installation#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":138,"to":147}}}}],["9928f197-176a-4e3e-8fab-5c7556d999e4",{"pageContent":"## Unsupported: Node.js 16[​](#unsupported-nodejs-16 \"Direct link to Unsupported: Node.js 16\")\n\nWe do not support Node.js 16, but if you still want to run LangChain on Node.js 16, you will need to follow the instructions in this section. We do not guarantee that these instructions will continue to work in the future.\n\nYou will have to make `fetch` available globally, either:\n\nYou'll also need to [polyfill `ReadableStream`](https://www.npmjs.com/package/web-streams-polyfill) by installing:\n\n* npm\n* Yarn\n* pnpm\n\n```bash\nnpm i web-streams-polyfill  \n```\n\n```bash\nyarn add web-streams-polyfill  \n```\n\n```bash\npnpm add web-streams-polyfill  \n```\n\nAnd then adding it to the global namespace in your main entrypoint:\n\n```typescript\nimport \"web-streams-polyfill/es6\";  \n```\n\nAdditionally you'll have to polyfill `structuredClone`, eg. by installing `core-js` and following the instructions [here](https://github.com/zloirock/core-js).","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/installation#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":149,"to":179}}}}],["476e2912-94eb-4cbd-ba0b-321f751d64e6",{"pageContent":"If you are running Node.js 18+, you do not need to do anything.[Previous\n\nIntroduction](/docs/get_started/introduction)[Next\n\nQuickstart](/docs/get_started/quickstart)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/installation#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":181,"to":192}}}}],["7c5fcfea-54b8-4282-a2b7-7fde798d8791",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Installation\n\ninfo\n\nUpdating from <0.0.52? See [this section](#updating-from-0052) for instructions.\n\n## Supported Environments[​](#supported-environments \"Direct link to Supported Environments\")\n\nLangChain is written in TypeScript and can be used in:\n\n* Node.js (ESM and CommonJS) - 18.x, 19.x, 20.x\n* Cloudflare Workers\n* Vercel / Next.js (Browser, Serverless and Edge functions)\n* Supabase Edge Functions\n* Browser\n* Deno\n* Bun\n\n## Installation[​](#installation-1 \"Direct link to Installation\")\n\nTo get started, install LangChain with the following command:\n\n* npm\n* Yarn\n* pnpm\n\n```bash\nnpm install -S langchain  \n```\n\n```bash\nyarn add langchain  \n```\n\n```bash\npnpm add langchain  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/installation#","loc":{"lines":{"from":1,"to":46}}}}],["f76f8391-dcba-4314-8a3e-b01307e940ec",{"pageContent":"### TypeScript[​](#typescript \"Direct link to TypeScript\")\n\nLangChain is written in TypeScript and provides type definitions for all of its public APIs.\n\n## Loading the library[​](#loading-the-library \"Direct link to Loading the library\")\n\n### ESM[​](#esm \"Direct link to ESM\")\n\nLangChain provides an ESM build targeting Node.js environments. You can import it using the following syntax:\n\n```typescript\nimport { OpenAI } from \"langchain/llms/openai\";  \n```\n\nIf you are using TypeScript in an ESM project we suggest updating your `tsconfig.json` to include the following:\n\ntsconfig.json\n\n```json\n{  \n  \"compilerOptions\": {  \n    ...  \n    \"target\": \"ES2020\", // or higher  \n    \"module\": \"nodenext\",  \n  }  \n}  \n```\n\n### CommonJS[​](#commonjs \"Direct link to CommonJS\")\n\nLangChain provides a CommonJS build targeting Node.js environments. You can import it using the following syntax:\n\n```typescript\nconst { OpenAI } = require(\"langchain/llms/openai\");  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/installation#","loc":{"lines":{"from":46,"to":82}}}}],["1b1e8793-d75f-4bfb-ba19-046052d95e35",{"pageContent":"### Cloudflare Workers[​](#cloudflare-workers \"Direct link to Cloudflare Workers\")\n\nLangChain can be used in Cloudflare Workers. You can import it using the following syntax:\n\n```typescript\nimport { OpenAI } from \"langchain/llms/openai\";  \n```\n\n### Vercel / Next.js[​](#vercel--nextjs \"Direct link to Vercel / Next.js\")\n\nLangChain can be used in Vercel / Next.js. We support using LangChain in frontend components, in Serverless functions and in Edge functions. You can import it using the following syntax:\n\n```typescript\nimport { OpenAI } from \"langchain/llms/openai\";  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/installation#","loc":{"lines":{"from":82,"to":98}}}}],["6308894b-e894-433e-a38c-2ab0a09dfd8b",{"pageContent":"### Deno / Supabase Edge Functions[​](#deno--supabase-edge-functions \"Direct link to Deno / Supabase Edge Functions\")\n\nLangChain can be used in Deno / Supabase Edge Functions. You can import it using the following syntax:\n\n```typescript\nimport { OpenAI } from \"https://esm.sh/langchain/llms/openai\";  \n```\n\nWe recommend looking at our [Supabase Template](https://github.com/langchain-ai/langchain-template-supabase) for an example of how to use LangChain in Supabase Edge Functions.\n\n### Browser[​](#browser \"Direct link to Browser\")\n\nLangChain can be used in the browser. In our CI we test bundling LangChain with Webpack and Vite, but other bundlers should work too. You can import it using the following syntax:\n\n```typescript\nimport { OpenAI } from \"langchain/llms/openai\";  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/installation#","loc":{"lines":{"from":98,"to":114}}}}],["bef96624-9fd5-4bad-a98a-5470b52a1e9e",{"pageContent":"## Updating from <0.0.52[​](#updating-from-0052 \"Direct link to Updating from <0.0.52\")\n\nIf you are updating from a version of LangChain prior to 0.0.52, you will need to update your imports to use the new path structure.\n\nFor example, if you were previously doing\n\n```typescript\nimport { OpenAI } from \"langchain/llms\";  \n```\n\nyou will now need to do\n\n```typescript\nimport { OpenAI } from \"langchain/llms/openai\";  \n```\n\nThis applies to all imports from the following 6 modules, which have been split into submodules for each integration. The combined modules are deprecated, do not work outside of Node.js, and will be removed in a future version.\n\nOther modules are not affected by this change, and you can continue to import them from the same path.\n\nAdditionally, there are some breaking changes that were needed to support new environments:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/installation#","loc":{"lines":{"from":116,"to":136}}}}],["547d5090-1867-4549-95cd-c2f17c580c84",{"pageContent":"* `import { Calculator } from \"langchain/tools\";` now moved to\n  * `import { Calculator } from \"langchain/tools/calculator\";`\n* `import { loadLLM } from \"langchain/llms\";` now moved to\n  * `import { loadLLM } from \"langchain/llms/load\";`\n* `import { loadAgent } from \"langchain/agents\";` now moved to\n  * `import { loadAgent } from \"langchain/agents/load\";`\n* `import { loadPrompt } from \"langchain/prompts\";` now moved to\n  * `import { loadPrompt } from \"langchain/prompts/load\";`\n* `import { loadChain } from \"langchain/chains\";` now moved to\n  * `import { loadChain } from \"langchain/chains/load\";`","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/installation#","loc":{"lines":{"from":138,"to":147}}}}],["ce10cea2-a2c0-4420-9765-b630f0e9cafc",{"pageContent":"## Unsupported: Node.js 16[​](#unsupported-nodejs-16 \"Direct link to Unsupported: Node.js 16\")\n\nWe do not support Node.js 16, but if you still want to run LangChain on Node.js 16, you will need to follow the instructions in this section. We do not guarantee that these instructions will continue to work in the future.\n\nYou will have to make `fetch` available globally, either:\n\nYou'll also need to [polyfill `ReadableStream`](https://www.npmjs.com/package/web-streams-polyfill) by installing:\n\n* npm\n* Yarn\n* pnpm\n\n```bash\nnpm i web-streams-polyfill  \n```\n\n```bash\nyarn add web-streams-polyfill  \n```\n\n```bash\npnpm add web-streams-polyfill  \n```\n\nAnd then adding it to the global namespace in your main entrypoint:\n\n```typescript\nimport \"web-streams-polyfill/es6\";  \n```\n\nAdditionally you'll have to polyfill `structuredClone`, eg. by installing `core-js` and following the instructions [here](https://github.com/zloirock/core-js).","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/installation#","loc":{"lines":{"from":149,"to":179}}}}],["ae046097-c0fc-49e8-9824-c3d014d10389",{"pageContent":"If you are running Node.js 18+, you do not need to do anything.[Previous\n\nIntroduction](/docs/get_started/introduction)[Next\n\nQuickstart](/docs/get_started/quickstart)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/installation#","loc":{"lines":{"from":181,"to":192}}}}],["4aeee2d7-aa15-468b-8e84-6cb7a250b314",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Quickstart\n\n## Installation[​](#installation \"Direct link to Installation\")\n\nTo install LangChain run:\n\n* npm\n* Yarn\n* pnpm\n\n```bash\nnpm install -S langchain  \n```\n\n```bash\nyarn add langchain  \n```\n\n```bash\npnpm add langchain  \n```\n\nFor more details, see our [Installation guide](/docs/get_started/installation).","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/quickstart","loc":{"lines":{"from":1,"to":30}}}}],["3bb98952-5977-4a5c-acdf-d18f3db33ae6",{"pageContent":"## Environment setup[​](#environment-setup \"Direct link to Environment setup\")\n\nUsing LangChain will usually require integrations with one or more model providers, data stores, APIs, etc. For this example, we'll use OpenAI's model APIs.\n\nAccessing their API requires an API key, which you can get by creating an account and heading [here](https://platform.openai.com/account/api-keys). Once we have a key we'll want to set it as an environment variable by running:\n\n```bash\nexport OPENAI_API_KEY=\"...\"  \n```\n\nIf you'd prefer not to set an environment variable you can pass the key in directly via the `openAIApiKey` parameter when initializing the OpenAI LLM class:\n\n```typescript\nimport { OpenAI } from \"langchain/llms/openai\";  \n  \nconst llm = new OpenAI({  \n  openAIApiKey: \"YOUR_KEY_HERE\",  \n});  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/quickstart","loc":{"lines":{"from":32,"to":50}}}}],["ab9926b8-cc7f-4eb2-8d6a-e2f607bbdab7",{"pageContent":"## Building an application[​](#building-an-application \"Direct link to Building an application\")\n\nNow we can start building our language model application. LangChain provides many modules that can be used to build language model applications. Modules can be used as stand-alones in simple applications and they can be combined for more complex use cases.\n\nThe most common and most important chain that LangChain helps create contains three things:\n\n* LLM: The language model is the core reasoning engine here. In order to work with LangChain, you need to understand the different types of language models and how to work with them.\n* Prompt Templates: This provides instructions to the language model. This controls what the language model outputs, so understanding how to construct prompts and different prompting strategies is crucial.\n* Output Parsers: These translate the raw response from the LLM to a more workable format, making it easy to use the output downstream.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/quickstart","loc":{"lines":{"from":52,"to":60}}}}],["251ae79c-278a-46b2-95cb-5de88722de32",{"pageContent":"In this getting started guide we will cover those three components by themselves, and then go over how to combine all of them. Understanding these concepts will set you up well for being able to use and customize LangChain applications. Most LangChain applications allow you to configure the LLM and/or the prompt used, so knowing how to take advantage of this will be a big enabler.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/quickstart","loc":{"lines":{"from":62,"to":62}}}}],["ba2fc997-1644-45a8-82f8-d3fb3a6d87e3",{"pageContent":"## LLMs[​](#llms \"Direct link to LLMs\")\n\nThere are two types of language models, which in LangChain are called:\n\n* LLMs: this is a language model which takes a string as input and returns a string\n* ChatModels: this is a language model which takes a list of messages as input and returns a message\n\nThe input/output for LLMs is simple and easy to understand - a string. But what about ChatModels? The input there is a list of `ChatMessage`s, and the output is a single `ChatMessage`. A `ChatMessage` has two required components:\n\n* `content`: This is the content of the message.\n* `role`: This is the role of the entity from which the `ChatMessage` is coming from.\n\nLangChain provides several objects to easily distinguish between different roles:\n\n* `HumanMessage`: A `ChatMessage` coming from a human/user.\n* `AIMessage`: A `ChatMessage` coming from an AI/assistant.\n* `SystemMessage`: A `ChatMessage` coming from the system.\n* `FunctionMessage`: A `ChatMessage` coming from a function call.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/quickstart","loc":{"lines":{"from":64,"to":81}}}}],["33ca720b-b294-4809-b090-00b52e8b787c",{"pageContent":"If none of those roles sound right, there is also a `ChatMessage` class where you can specify the role manually. For more information on how to use these different messages most effectively, see our prompting guide.\n\nLangChain provides a standard interface for both, but it's useful to understand this difference in order to construct prompts for a given language model. The standard interface that LangChain provides has two methods:\n\n* `predict`: Takes in a string, returns a string\n* `predictMessages`: Takes in a list of messages, returns a message.\n\nLet's see how to work with these different types of models and these different types of inputs. First, let's import an LLM and a ChatModel and call `predict`.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/quickstart","loc":{"lines":{"from":83,"to":90}}}}],["8fd5f406-506a-4d92-a7a0-dd5502b1bb43",{"pageContent":"```typescript\nimport { OpenAI } from \"langchain/llms/openai\";  \nimport { ChatOpenAI } from \"langchain/chat_models/openai\";  \n  \nconst llm = new OpenAI({  \n  temperature: 0.9,  \n});  \n  \nconst chatModel = new ChatOpenAI();  \n  \nconst text =  \n  \"What would be a good company name for a company that makes colorful socks?\";  \n  \nconst llmResult = await llm.predict(text);  \n/*  \n  \"Feetful of Fun\"  \n*/  \n  \nconst chatModelResult = await chatModel.predict(text);  \n/*  \n  \"Socks O'Color\"  \n*/  \n```\n\nThe `OpenAI` and `ChatOpenAI` objects are basically just configuration objects. You can initialize them with parameters like temperature and others, and pass them around.\n\nNext, let's use the `predictMessages` method to run over a list of messages.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/quickstart","loc":{"lines":{"from":92,"to":118}}}}],["5a76ca38-5774-4cdc-affd-e0876a34b251",{"pageContent":"```typescript\nimport { HumanMessage } from \"langchain/schema\";  \n  \nconst text =  \n  \"What would be a good company name for a company that makes colorful socks?\";  \n  \nconst messages = [new HumanMessage({ content: text })];  \n  \nconst llmResult = await llm.predictMessages(messages);  \n/*  \n  AIMessage {  \n    content: \"Feetful of Fun\"  \n  }  \n*/  \n  \nconst chatModelResult = await chatModel.predictMessages(messages);  \n/*  \n  AIMessage {  \n    content: \"Socks O'Color\"    \n  }  \n*/  \n```\n\nFor both these methods, you can also pass in parameters as keyword arguments. For example, you could pass in `temperature: 0` to adjust the temperature that is used from what the object was configured with. Whatever values are passed in during run time will always override what the object was configured with.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/quickstart","loc":{"lines":{"from":120,"to":143}}}}],["c7e3c2c1-0dd5-4b85-b9ed-9624d6445e1d",{"pageContent":"## Prompt templates[​](#prompt-templates \"Direct link to Prompt templates\")\n\nMost LLM applications do not pass user input directly into an LLM. Usually they will add the user input to a larger piece of text, called a prompt template, that provides additional context on the specific task at hand.\n\nIn the previous example, the text we passed to the model contained instructions to generate a company name. For our application, it'd be great if the user only had to provide the description of a company/product, without having to worry about giving the model instructions.\n\nPromptTemplates help with exactly this! They bundle up all the logic for going from user input into a fully formatted prompt. This can start off very simple - for example, a prompt to produce the above string would just be:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/quickstart","loc":{"lines":{"from":145,"to":151}}}}],["f9ac36b9-b361-4703-96ea-72677c0df4e1",{"pageContent":"```typescript\nimport { PromptTemplate } from \"langchain/prompts\";  \n  \nconst prompt = PromptTemplate.fromTemplate(  \n  \"What is a good name for a company that makes {product}?\"  \n);  \n  \nconst formattedPrompt = await prompt.format({  \n  product: \"colorful socks\",  \n});  \n/*  \n  \"What is a good name for a company that makes colorful socks?\"  \n*/  \n```\n\nThere are several advantages to using these over raw string formatting. You can \"partial\" out variables - e.g. you can format only some of the variables at a time. You can compose them together, easily combining different templates into a single prompt. For explanations of these functionalities, see the [section on prompts](/docs/modules/model_io/prompts) for more detail.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/quickstart","loc":{"lines":{"from":153,"to":168}}}}],["3fe99942-165c-43fa-8523-80b8d51726a4",{"pageContent":"PromptTemplates can also be used to produce a list of messages. In this case, the prompt not only contains information about the content, but also each message (its role, its position in the list, etc). Here, what happens most often is a ChatPromptTemplate is a list of ChatMessageTemplates. Each ChatMessageTemplate contains instructions for how to format that ChatMessage - its role, and then also its content. Let's take a look at this below:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/quickstart","loc":{"lines":{"from":170,"to":170}}}}],["fee45d2a-cc77-45c5-a801-1fa4705cf2af",{"pageContent":"```typescript\nimport { ChatPromptTemplate } from \"langchain/prompts\";  \n  \nconst template =  \n  \"You are a helpful assistant that translates {input_language} into {output_language}.\";  \nconst humanTemplate = \"{text}\";  \n  \nconst chatPrompt = ChatPromptTemplate.fromMessages([  \n  [\"system\", template],  \n  [\"human\", humanTemplate],  \n]);  \n  \nconst formattedChatPrompt = await chatPrompt.formatMessages({  \n  input_language: \"English\",  \n  output_language: \"French\",  \n  text: \"I love programming.\",  \n});  \n  \n/*  \n  [  \n    SystemMessage {  \n      content: 'You are a helpful assistant that translates English into French.'  \n    },  \n    HumanMessage { content: 'I love programming.' }  \n  ]  \n*/  \n```\n\nChatPromptTemplates can also be constructed in other ways - see the [section on prompts](/docs/modules/model_io/prompts) for more detail.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/quickstart","loc":{"lines":{"from":172,"to":200}}}}],["db79b7f3-7bd2-434d-b462-77983e2bbf87",{"pageContent":"## Output parsers[​](#output-parsers \"Direct link to Output parsers\")\n\nOutputParsers convert the raw output of an LLM into a format that can be used downstream. There are few main type of OutputParsers, including:\n\n* Convert text from LLM -> structured information (e.g. JSON)\n* Convert a ChatMessage into just a string\n* Convert the extra information returned from a call besides the message (like OpenAI function invocation) into a string.\n\nFor more information, see the [section on output parsers](/docs/modules/model_io/output_parsers).\n\nIn this getting started guide, we will write our own output parser - one that converts a comma separated list into a list.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/quickstart","loc":{"lines":{"from":202,"to":212}}}}],["ec31ead9-81ea-4787-92a2-de1f4f0380be",{"pageContent":"```typescript\nimport { BaseOutputParser } from \"langchain/schema/output_parser\";  \n  \n/**  \n * Parse the output of an LLM call to a comma-separated list.  \n */  \nclass CommaSeparatedListOutputParser extends BaseOutputParser<string[]> {  \n  async parse(text: string): Promise<string[]> {  \n    return text.split(\",\").map((item) => item.trim());  \n  }  \n}  \n  \nconst parser = new CommaSeparatedListOutputParser();  \n  \nconst result = await parser.parse(\"hi, bye\");  \n/*   \n  ['hi', 'bye']  \n*/  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/quickstart","loc":{"lines":{"from":214,"to":232}}}}],["9b7c9b77-0411-48f9-ae35-1b57136bc5a7",{"pageContent":"## PromptTemplate + LLM + OutputParser[​](#prompttemplate--llm--outputparser \"Direct link to PromptTemplate + LLM + OutputParser\")\n\nWe can now combine all these into one chain. This chain will take input variables, pass those to a prompt template to create a prompt, pass the prompt to a language model, and then pass the output through an (optional) output parser. This is a convenient way to bundle up a modular piece of logic. Let's see it in action!","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/quickstart","loc":{"lines":{"from":234,"to":236}}}}],["722e3a51-19f1-4e28-8a94-9689b87ca2db",{"pageContent":"```typescript\nimport { ChatOpenAI } from \"langchain/chat_models/openai\";  \nimport { ChatPromptTemplate } from \"langchain/prompts\";  \nimport { BaseOutputParser } from \"langchain/schema/output_parser\";  \n  \n/**  \n * Parse the output of an LLM call to a comma-separated list.  \n */  \nclass CommaSeparatedListOutputParser extends BaseOutputParser<string[]> {  \n  async parse(text: string): Promise<string[]> {  \n    return text.split(\",\").map((item) => item.trim());  \n  }  \n}  \n  \nconst template = `You are a helpful assistant who generates comma separated lists.  \nA user will pass in a category, and you should generate 5 objects in that category in a comma separated list.  \nONLY return a comma separated list, and nothing more.`;  \n  \nconst humanTemplate = \"{text}\";  \n  \n/**  \n * Chat prompt for generating comma-separated lists. It combines the system  \n * template and the human template.  \n */  \nconst chatPrompt = ChatPromptTemplate.fromMessages([  \n  [\"system\", template],  \n  [\"human\", huma","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/quickstart","loc":{"lines":{"from":238,"to":264}}}}],["3d248746-128a-4730-b48f-f6b5634c7cf1",{"pageContent":"ges([  \n  [\"system\", template],  \n  [\"human\", humanTemplate],  \n]);  \n  \nconst model = new ChatOpenAI({});  \nconst parser = new CommaSeparatedListOutputParser();  \n  \nconst chain = chatPrompt.pipe(model).pipe(parser);  \n  \nconst result = await chain.invoke({  \n  text: \"colors\",  \n});  \n  \n/*  \n  [\"red\", \"blue\", \"green\", \"yellow\", \"orange\"]  \n*/  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/quickstart","loc":{"lines":{"from":264,"to":281}}}}],["b81118d2-ce14-4c64-abf7-4bf3f7124079",{"pageContent":"Note that we are using the `.pipe()` method to join these components together. This `.pipe()` method is part of the LangChain Expression Language. To learn more about this syntax, read the [documentation here](/docs/expression_language).","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/quickstart","loc":{"lines":{"from":283,"to":283}}}}],["71dd5b65-9ad5-47f0-a605-3972ab28dbe5",{"pageContent":"## Next steps[​](#next-steps \"Direct link to Next steps\")\n\nAnd that's it for the quickstart! We've now gone over how to create the core building block of LangChain applications. There is a lot more nuance in all these components (LLMs, prompts, output parsers) and a lot more different components to learn about as well. To continue on your journey:[Previous\n\nInstallation](/docs/get_started/installation)[Next\n\nLangChain Expression Language (LCEL)](/docs/expression_language/)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/quickstart","loc":{"lines":{"from":285,"to":298}}}}],["5968b067-5e39-44f3-9aa0-42a4d85fabd5",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Quickstart\n\n## Installation[​](#installation \"Direct link to Installation\")\n\nTo install LangChain run:\n\n* npm\n* Yarn\n* pnpm\n\n```bash\nnpm install -S langchain  \n```\n\n```bash\nyarn add langchain  \n```\n\n```bash\npnpm add langchain  \n```\n\nFor more details, see our [Installation guide](/docs/get_started/installation).","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/quickstart#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":1,"to":30}}}}],["7bbd8c3c-0788-49b5-b4f7-fc384491b769",{"pageContent":"## Environment setup[​](#environment-setup \"Direct link to Environment setup\")\n\nUsing LangChain will usually require integrations with one or more model providers, data stores, APIs, etc. For this example, we'll use OpenAI's model APIs.\n\nAccessing their API requires an API key, which you can get by creating an account and heading [here](https://platform.openai.com/account/api-keys). Once we have a key we'll want to set it as an environment variable by running:\n\n```bash\nexport OPENAI_API_KEY=\"...\"  \n```\n\nIf you'd prefer not to set an environment variable you can pass the key in directly via the `openAIApiKey` parameter when initializing the OpenAI LLM class:\n\n```typescript\nimport { OpenAI } from \"langchain/llms/openai\";  \n  \nconst llm = new OpenAI({  \n  openAIApiKey: \"YOUR_KEY_HERE\",  \n});  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/quickstart#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":32,"to":50}}}}],["4688051f-8773-49a1-833d-6db70be0dde0",{"pageContent":"## Building an application[​](#building-an-application \"Direct link to Building an application\")\n\nNow we can start building our language model application. LangChain provides many modules that can be used to build language model applications. Modules can be used as stand-alones in simple applications and they can be combined for more complex use cases.\n\nThe most common and most important chain that LangChain helps create contains three things:\n\n* LLM: The language model is the core reasoning engine here. In order to work with LangChain, you need to understand the different types of language models and how to work with them.\n* Prompt Templates: This provides instructions to the language model. This controls what the language model outputs, so understanding how to construct prompts and different prompting strategies is crucial.\n* Output Parsers: These translate the raw response from the LLM to a more workable format, making it easy to use the output downstream.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/quickstart#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":52,"to":60}}}}],["e5343139-b6cd-4519-b559-9e5e50f85b9a",{"pageContent":"In this getting started guide we will cover those three components by themselves, and then go over how to combine all of them. Understanding these concepts will set you up well for being able to use and customize LangChain applications. Most LangChain applications allow you to configure the LLM and/or the prompt used, so knowing how to take advantage of this will be a big enabler.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/quickstart#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":62,"to":62}}}}],["58ff8a89-1c09-46b1-bb15-ce50dbb39a57",{"pageContent":"## LLMs[​](#llms \"Direct link to LLMs\")\n\nThere are two types of language models, which in LangChain are called:\n\n* LLMs: this is a language model which takes a string as input and returns a string\n* ChatModels: this is a language model which takes a list of messages as input and returns a message\n\nThe input/output for LLMs is simple and easy to understand - a string. But what about ChatModels? The input there is a list of `ChatMessage`s, and the output is a single `ChatMessage`. A `ChatMessage` has two required components:\n\n* `content`: This is the content of the message.\n* `role`: This is the role of the entity from which the `ChatMessage` is coming from.\n\nLangChain provides several objects to easily distinguish between different roles:\n\n* `HumanMessage`: A `ChatMessage` coming from a human/user.\n* `AIMessage`: A `ChatMessage` coming from an AI/assistant.\n* `SystemMessage`: A `ChatMessage` coming from the system.\n* `FunctionMessage`: A `ChatMessage` coming from a function call.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/quickstart#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":64,"to":81}}}}],["8088a37c-363f-40c5-be6f-e128449144a2",{"pageContent":"If none of those roles sound right, there is also a `ChatMessage` class where you can specify the role manually. For more information on how to use these different messages most effectively, see our prompting guide.\n\nLangChain provides a standard interface for both, but it's useful to understand this difference in order to construct prompts for a given language model. The standard interface that LangChain provides has two methods:\n\n* `predict`: Takes in a string, returns a string\n* `predictMessages`: Takes in a list of messages, returns a message.\n\nLet's see how to work with these different types of models and these different types of inputs. First, let's import an LLM and a ChatModel and call `predict`.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/quickstart#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":83,"to":90}}}}],["10936067-42d9-4ac7-89cd-b2e1b27a2519",{"pageContent":"```typescript\nimport { OpenAI } from \"langchain/llms/openai\";  \nimport { ChatOpenAI } from \"langchain/chat_models/openai\";  \n  \nconst llm = new OpenAI({  \n  temperature: 0.9,  \n});  \n  \nconst chatModel = new ChatOpenAI();  \n  \nconst text =  \n  \"What would be a good company name for a company that makes colorful socks?\";  \n  \nconst llmResult = await llm.predict(text);  \n/*  \n  \"Feetful of Fun\"  \n*/  \n  \nconst chatModelResult = await chatModel.predict(text);  \n/*  \n  \"Socks O'Color\"  \n*/  \n```\n\nThe `OpenAI` and `ChatOpenAI` objects are basically just configuration objects. You can initialize them with parameters like temperature and others, and pass them around.\n\nNext, let's use the `predictMessages` method to run over a list of messages.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/quickstart#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":92,"to":118}}}}],["0b53d543-ab83-44a8-b98f-439a5206cebb",{"pageContent":"```typescript\nimport { HumanMessage } from \"langchain/schema\";  \n  \nconst text =  \n  \"What would be a good company name for a company that makes colorful socks?\";  \n  \nconst messages = [new HumanMessage({ content: text })];  \n  \nconst llmResult = await llm.predictMessages(messages);  \n/*  \n  AIMessage {  \n    content: \"Feetful of Fun\"  \n  }  \n*/  \n  \nconst chatModelResult = await chatModel.predictMessages(messages);  \n/*  \n  AIMessage {  \n    content: \"Socks O'Color\"    \n  }  \n*/  \n```\n\nFor both these methods, you can also pass in parameters as keyword arguments. For example, you could pass in `temperature: 0` to adjust the temperature that is used from what the object was configured with. Whatever values are passed in during run time will always override what the object was configured with.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/quickstart#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":120,"to":143}}}}],["8210706d-f8be-4187-bb83-cfd52e896742",{"pageContent":"## Prompt templates[​](#prompt-templates \"Direct link to Prompt templates\")\n\nMost LLM applications do not pass user input directly into an LLM. Usually they will add the user input to a larger piece of text, called a prompt template, that provides additional context on the specific task at hand.\n\nIn the previous example, the text we passed to the model contained instructions to generate a company name. For our application, it'd be great if the user only had to provide the description of a company/product, without having to worry about giving the model instructions.\n\nPromptTemplates help with exactly this! They bundle up all the logic for going from user input into a fully formatted prompt. This can start off very simple - for example, a prompt to produce the above string would just be:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/quickstart#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":145,"to":151}}}}],["cbf85d5d-8f89-4203-8d6c-73cae62ccd91",{"pageContent":"```typescript\nimport { PromptTemplate } from \"langchain/prompts\";  \n  \nconst prompt = PromptTemplate.fromTemplate(  \n  \"What is a good name for a company that makes {product}?\"  \n);  \n  \nconst formattedPrompt = await prompt.format({  \n  product: \"colorful socks\",  \n});  \n/*  \n  \"What is a good name for a company that makes colorful socks?\"  \n*/  \n```\n\nThere are several advantages to using these over raw string formatting. You can \"partial\" out variables - e.g. you can format only some of the variables at a time. You can compose them together, easily combining different templates into a single prompt. For explanations of these functionalities, see the [section on prompts](/docs/modules/model_io/prompts) for more detail.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/quickstart#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":153,"to":168}}}}],["89d69178-e01a-4f95-aedf-ce629f73f9ad",{"pageContent":"PromptTemplates can also be used to produce a list of messages. In this case, the prompt not only contains information about the content, but also each message (its role, its position in the list, etc). Here, what happens most often is a ChatPromptTemplate is a list of ChatMessageTemplates. Each ChatMessageTemplate contains instructions for how to format that ChatMessage - its role, and then also its content. Let's take a look at this below:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/quickstart#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":170,"to":170}}}}],["ec3fb05d-df72-4fb4-872e-06a94e27d599",{"pageContent":"```typescript\nimport { ChatPromptTemplate } from \"langchain/prompts\";  \n  \nconst template =  \n  \"You are a helpful assistant that translates {input_language} into {output_language}.\";  \nconst humanTemplate = \"{text}\";  \n  \nconst chatPrompt = ChatPromptTemplate.fromMessages([  \n  [\"system\", template],  \n  [\"human\", humanTemplate],  \n]);  \n  \nconst formattedChatPrompt = await chatPrompt.formatMessages({  \n  input_language: \"English\",  \n  output_language: \"French\",  \n  text: \"I love programming.\",  \n});  \n  \n/*  \n  [  \n    SystemMessage {  \n      content: 'You are a helpful assistant that translates English into French.'  \n    },  \n    HumanMessage { content: 'I love programming.' }  \n  ]  \n*/  \n```\n\nChatPromptTemplates can also be constructed in other ways - see the [section on prompts](/docs/modules/model_io/prompts) for more detail.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/quickstart#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":172,"to":200}}}}],["ee60fdf1-503b-4eff-b406-130f2e01bc36",{"pageContent":"## Output parsers[​](#output-parsers \"Direct link to Output parsers\")\n\nOutputParsers convert the raw output of an LLM into a format that can be used downstream. There are few main type of OutputParsers, including:\n\n* Convert text from LLM -> structured information (e.g. JSON)\n* Convert a ChatMessage into just a string\n* Convert the extra information returned from a call besides the message (like OpenAI function invocation) into a string.\n\nFor more information, see the [section on output parsers](/docs/modules/model_io/output_parsers).\n\nIn this getting started guide, we will write our own output parser - one that converts a comma separated list into a list.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/quickstart#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":202,"to":212}}}}],["803d69a4-7f99-42f3-83e1-9c0e83d69031",{"pageContent":"```typescript\nimport { BaseOutputParser } from \"langchain/schema/output_parser\";  \n  \n/**  \n * Parse the output of an LLM call to a comma-separated list.  \n */  \nclass CommaSeparatedListOutputParser extends BaseOutputParser<string[]> {  \n  async parse(text: string): Promise<string[]> {  \n    return text.split(\",\").map((item) => item.trim());  \n  }  \n}  \n  \nconst parser = new CommaSeparatedListOutputParser();  \n  \nconst result = await parser.parse(\"hi, bye\");  \n/*   \n  ['hi', 'bye']  \n*/  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/quickstart#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":214,"to":232}}}}],["18f5ea0f-5aa0-4ec8-b748-8eacebb99d9b",{"pageContent":"## PromptTemplate + LLM + OutputParser[​](#prompttemplate--llm--outputparser \"Direct link to PromptTemplate + LLM + OutputParser\")\n\nWe can now combine all these into one chain. This chain will take input variables, pass those to a prompt template to create a prompt, pass the prompt to a language model, and then pass the output through an (optional) output parser. This is a convenient way to bundle up a modular piece of logic. Let's see it in action!","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/quickstart#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":234,"to":236}}}}],["0e2eb11b-2403-4dfe-be48-827fa7baa79d",{"pageContent":"```typescript\nimport { ChatOpenAI } from \"langchain/chat_models/openai\";  \nimport { ChatPromptTemplate } from \"langchain/prompts\";  \nimport { BaseOutputParser } from \"langchain/schema/output_parser\";  \n  \n/**  \n * Parse the output of an LLM call to a comma-separated list.  \n */  \nclass CommaSeparatedListOutputParser extends BaseOutputParser<string[]> {  \n  async parse(text: string): Promise<string[]> {  \n    return text.split(\",\").map((item) => item.trim());  \n  }  \n}  \n  \nconst template = `You are a helpful assistant who generates comma separated lists.  \nA user will pass in a category, and you should generate 5 objects in that category in a comma separated list.  \nONLY return a comma separated list, and nothing more.`;  \n  \nconst humanTemplate = \"{text}\";  \n  \n/**  \n * Chat prompt for generating comma-separated lists. It combines the system  \n * template and the human template.  \n */  \nconst chatPrompt = ChatPromptTemplate.fromMessages([  \n  [\"system\", template],  \n  [\"human\", huma","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/quickstart#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":238,"to":264}}}}],["eb0d2d9e-91fb-4586-878d-bcf6cef51a24",{"pageContent":"ges([  \n  [\"system\", template],  \n  [\"human\", humanTemplate],  \n]);  \n  \nconst model = new ChatOpenAI({});  \nconst parser = new CommaSeparatedListOutputParser();  \n  \nconst chain = chatPrompt.pipe(model).pipe(parser);  \n  \nconst result = await chain.invoke({  \n  text: \"colors\",  \n});  \n  \n/*  \n  [\"red\", \"blue\", \"green\", \"yellow\", \"orange\"]  \n*/  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/quickstart#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":264,"to":281}}}}],["23ecd6d8-2f9c-46d0-ac44-40f065a455fc",{"pageContent":"Note that we are using the `.pipe()` method to join these components together. This `.pipe()` method is part of the LangChain Expression Language. To learn more about this syntax, read the [documentation here](/docs/expression_language).","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/quickstart#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":283,"to":283}}}}],["c2e68d9d-f8a5-4946-83b9-97bd374eea8b",{"pageContent":"## Next steps[​](#next-steps \"Direct link to Next steps\")\n\nAnd that's it for the quickstart! We've now gone over how to create the core building block of LangChain applications. There is a lot more nuance in all these components (LLMs, prompts, output parsers) and a lot more different components to learn about as well. To continue on your journey:[Previous\n\nInstallation](/docs/get_started/installation)[Next\n\nLangChain Expression Language (LCEL)](/docs/expression_language/)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/quickstart#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":285,"to":298}}}}],["16c9d1fe-84c3-4bd3-8b4b-708e1949e3a6",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Quickstart\n\n## Installation[​](#installation \"Direct link to Installation\")\n\nTo install LangChain run:\n\n* npm\n* Yarn\n* pnpm\n\n```bash\nnpm install -S langchain  \n```\n\n```bash\nyarn add langchain  \n```\n\n```bash\npnpm add langchain  \n```\n\nFor more details, see our [Installation guide](/docs/get_started/installation).","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/quickstart#","loc":{"lines":{"from":1,"to":30}}}}],["8c3e8889-75f0-4e8d-8ae5-4f9b3b77dde8",{"pageContent":"## Environment setup[​](#environment-setup \"Direct link to Environment setup\")\n\nUsing LangChain will usually require integrations with one or more model providers, data stores, APIs, etc. For this example, we'll use OpenAI's model APIs.\n\nAccessing their API requires an API key, which you can get by creating an account and heading [here](https://platform.openai.com/account/api-keys). Once we have a key we'll want to set it as an environment variable by running:\n\n```bash\nexport OPENAI_API_KEY=\"...\"  \n```\n\nIf you'd prefer not to set an environment variable you can pass the key in directly via the `openAIApiKey` parameter when initializing the OpenAI LLM class:\n\n```typescript\nimport { OpenAI } from \"langchain/llms/openai\";  \n  \nconst llm = new OpenAI({  \n  openAIApiKey: \"YOUR_KEY_HERE\",  \n});  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/quickstart#","loc":{"lines":{"from":32,"to":50}}}}],["a40a0c2c-9fe7-4549-bf63-7dae97ac76c7",{"pageContent":"## Building an application[​](#building-an-application \"Direct link to Building an application\")\n\nNow we can start building our language model application. LangChain provides many modules that can be used to build language model applications. Modules can be used as stand-alones in simple applications and they can be combined for more complex use cases.\n\nThe most common and most important chain that LangChain helps create contains three things:\n\n* LLM: The language model is the core reasoning engine here. In order to work with LangChain, you need to understand the different types of language models and how to work with them.\n* Prompt Templates: This provides instructions to the language model. This controls what the language model outputs, so understanding how to construct prompts and different prompting strategies is crucial.\n* Output Parsers: These translate the raw response from the LLM to a more workable format, making it easy to use the output downstream.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/quickstart#","loc":{"lines":{"from":52,"to":60}}}}],["2bbcce73-85db-4e52-9511-8c68bab99b12",{"pageContent":"In this getting started guide we will cover those three components by themselves, and then go over how to combine all of them. Understanding these concepts will set you up well for being able to use and customize LangChain applications. Most LangChain applications allow you to configure the LLM and/or the prompt used, so knowing how to take advantage of this will be a big enabler.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/quickstart#","loc":{"lines":{"from":62,"to":62}}}}],["5211d7bb-92c7-4150-a431-df67807a6865",{"pageContent":"## LLMs[​](#llms \"Direct link to LLMs\")\n\nThere are two types of language models, which in LangChain are called:\n\n* LLMs: this is a language model which takes a string as input and returns a string\n* ChatModels: this is a language model which takes a list of messages as input and returns a message\n\nThe input/output for LLMs is simple and easy to understand - a string. But what about ChatModels? The input there is a list of `ChatMessage`s, and the output is a single `ChatMessage`. A `ChatMessage` has two required components:\n\n* `content`: This is the content of the message.\n* `role`: This is the role of the entity from which the `ChatMessage` is coming from.\n\nLangChain provides several objects to easily distinguish between different roles:\n\n* `HumanMessage`: A `ChatMessage` coming from a human/user.\n* `AIMessage`: A `ChatMessage` coming from an AI/assistant.\n* `SystemMessage`: A `ChatMessage` coming from the system.\n* `FunctionMessage`: A `ChatMessage` coming from a function call.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/quickstart#","loc":{"lines":{"from":64,"to":81}}}}],["4a7ddbbf-b148-48df-ab88-00c9701e1799",{"pageContent":"If none of those roles sound right, there is also a `ChatMessage` class where you can specify the role manually. For more information on how to use these different messages most effectively, see our prompting guide.\n\nLangChain provides a standard interface for both, but it's useful to understand this difference in order to construct prompts for a given language model. The standard interface that LangChain provides has two methods:\n\n* `predict`: Takes in a string, returns a string\n* `predictMessages`: Takes in a list of messages, returns a message.\n\nLet's see how to work with these different types of models and these different types of inputs. First, let's import an LLM and a ChatModel and call `predict`.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/quickstart#","loc":{"lines":{"from":83,"to":90}}}}],["55fa1496-cf60-4cd1-9bd4-93fe04a1cb18",{"pageContent":"```typescript\nimport { OpenAI } from \"langchain/llms/openai\";  \nimport { ChatOpenAI } from \"langchain/chat_models/openai\";  \n  \nconst llm = new OpenAI({  \n  temperature: 0.9,  \n});  \n  \nconst chatModel = new ChatOpenAI();  \n  \nconst text =  \n  \"What would be a good company name for a company that makes colorful socks?\";  \n  \nconst llmResult = await llm.predict(text);  \n/*  \n  \"Feetful of Fun\"  \n*/  \n  \nconst chatModelResult = await chatModel.predict(text);  \n/*  \n  \"Socks O'Color\"  \n*/  \n```\n\nThe `OpenAI` and `ChatOpenAI` objects are basically just configuration objects. You can initialize them with parameters like temperature and others, and pass them around.\n\nNext, let's use the `predictMessages` method to run over a list of messages.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/quickstart#","loc":{"lines":{"from":92,"to":118}}}}],["6ca79adc-36be-4116-b2a9-8ac8abecf6b1",{"pageContent":"```typescript\nimport { HumanMessage } from \"langchain/schema\";  \n  \nconst text =  \n  \"What would be a good company name for a company that makes colorful socks?\";  \n  \nconst messages = [new HumanMessage({ content: text })];  \n  \nconst llmResult = await llm.predictMessages(messages);  \n/*  \n  AIMessage {  \n    content: \"Feetful of Fun\"  \n  }  \n*/  \n  \nconst chatModelResult = await chatModel.predictMessages(messages);  \n/*  \n  AIMessage {  \n    content: \"Socks O'Color\"    \n  }  \n*/  \n```\n\nFor both these methods, you can also pass in parameters as keyword arguments. For example, you could pass in `temperature: 0` to adjust the temperature that is used from what the object was configured with. Whatever values are passed in during run time will always override what the object was configured with.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/quickstart#","loc":{"lines":{"from":120,"to":143}}}}],["0bb1cf2e-4273-45db-a3ac-fe4df2952116",{"pageContent":"## Prompt templates[​](#prompt-templates \"Direct link to Prompt templates\")\n\nMost LLM applications do not pass user input directly into an LLM. Usually they will add the user input to a larger piece of text, called a prompt template, that provides additional context on the specific task at hand.\n\nIn the previous example, the text we passed to the model contained instructions to generate a company name. For our application, it'd be great if the user only had to provide the description of a company/product, without having to worry about giving the model instructions.\n\nPromptTemplates help with exactly this! They bundle up all the logic for going from user input into a fully formatted prompt. This can start off very simple - for example, a prompt to produce the above string would just be:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/quickstart#","loc":{"lines":{"from":145,"to":151}}}}],["7b301f6e-c5d3-4863-8c6f-1739c03e991c",{"pageContent":"```typescript\nimport { PromptTemplate } from \"langchain/prompts\";  \n  \nconst prompt = PromptTemplate.fromTemplate(  \n  \"What is a good name for a company that makes {product}?\"  \n);  \n  \nconst formattedPrompt = await prompt.format({  \n  product: \"colorful socks\",  \n});  \n/*  \n  \"What is a good name for a company that makes colorful socks?\"  \n*/  \n```\n\nThere are several advantages to using these over raw string formatting. You can \"partial\" out variables - e.g. you can format only some of the variables at a time. You can compose them together, easily combining different templates into a single prompt. For explanations of these functionalities, see the [section on prompts](/docs/modules/model_io/prompts) for more detail.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/quickstart#","loc":{"lines":{"from":153,"to":168}}}}],["c4108111-9637-4fd6-b3fc-d6ed83c08d4d",{"pageContent":"PromptTemplates can also be used to produce a list of messages. In this case, the prompt not only contains information about the content, but also each message (its role, its position in the list, etc). Here, what happens most often is a ChatPromptTemplate is a list of ChatMessageTemplates. Each ChatMessageTemplate contains instructions for how to format that ChatMessage - its role, and then also its content. Let's take a look at this below:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/quickstart#","loc":{"lines":{"from":170,"to":170}}}}],["afd5f9e3-e2a6-44b7-8349-2ce3992a7f72",{"pageContent":"```typescript\nimport { ChatPromptTemplate } from \"langchain/prompts\";  \n  \nconst template =  \n  \"You are a helpful assistant that translates {input_language} into {output_language}.\";  \nconst humanTemplate = \"{text}\";  \n  \nconst chatPrompt = ChatPromptTemplate.fromMessages([  \n  [\"system\", template],  \n  [\"human\", humanTemplate],  \n]);  \n  \nconst formattedChatPrompt = await chatPrompt.formatMessages({  \n  input_language: \"English\",  \n  output_language: \"French\",  \n  text: \"I love programming.\",  \n});  \n  \n/*  \n  [  \n    SystemMessage {  \n      content: 'You are a helpful assistant that translates English into French.'  \n    },  \n    HumanMessage { content: 'I love programming.' }  \n  ]  \n*/  \n```\n\nChatPromptTemplates can also be constructed in other ways - see the [section on prompts](/docs/modules/model_io/prompts) for more detail.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/quickstart#","loc":{"lines":{"from":172,"to":200}}}}],["0d8377ef-e60d-4a12-81e3-7805fd8967cd",{"pageContent":"## Output parsers[​](#output-parsers \"Direct link to Output parsers\")\n\nOutputParsers convert the raw output of an LLM into a format that can be used downstream. There are few main type of OutputParsers, including:\n\n* Convert text from LLM -> structured information (e.g. JSON)\n* Convert a ChatMessage into just a string\n* Convert the extra information returned from a call besides the message (like OpenAI function invocation) into a string.\n\nFor more information, see the [section on output parsers](/docs/modules/model_io/output_parsers).\n\nIn this getting started guide, we will write our own output parser - one that converts a comma separated list into a list.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/quickstart#","loc":{"lines":{"from":202,"to":212}}}}],["851f9efb-5420-4e20-9ada-903fb7ebfdaa",{"pageContent":"```typescript\nimport { BaseOutputParser } from \"langchain/schema/output_parser\";  \n  \n/**  \n * Parse the output of an LLM call to a comma-separated list.  \n */  \nclass CommaSeparatedListOutputParser extends BaseOutputParser<string[]> {  \n  async parse(text: string): Promise<string[]> {  \n    return text.split(\",\").map((item) => item.trim());  \n  }  \n}  \n  \nconst parser = new CommaSeparatedListOutputParser();  \n  \nconst result = await parser.parse(\"hi, bye\");  \n/*   \n  ['hi', 'bye']  \n*/  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/quickstart#","loc":{"lines":{"from":214,"to":232}}}}],["95e61387-7fa2-4bf4-8bb2-95e2826550aa",{"pageContent":"## PromptTemplate + LLM + OutputParser[​](#prompttemplate--llm--outputparser \"Direct link to PromptTemplate + LLM + OutputParser\")\n\nWe can now combine all these into one chain. This chain will take input variables, pass those to a prompt template to create a prompt, pass the prompt to a language model, and then pass the output through an (optional) output parser. This is a convenient way to bundle up a modular piece of logic. Let's see it in action!","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/quickstart#","loc":{"lines":{"from":234,"to":236}}}}],["9d51faf9-4732-48cf-a695-96d6e3c0479a",{"pageContent":"```typescript\nimport { ChatOpenAI } from \"langchain/chat_models/openai\";  \nimport { ChatPromptTemplate } from \"langchain/prompts\";  \nimport { BaseOutputParser } from \"langchain/schema/output_parser\";  \n  \n/**  \n * Parse the output of an LLM call to a comma-separated list.  \n */  \nclass CommaSeparatedListOutputParser extends BaseOutputParser<string[]> {  \n  async parse(text: string): Promise<string[]> {  \n    return text.split(\",\").map((item) => item.trim());  \n  }  \n}  \n  \nconst template = `You are a helpful assistant who generates comma separated lists.  \nA user will pass in a category, and you should generate 5 objects in that category in a comma separated list.  \nONLY return a comma separated list, and nothing more.`;  \n  \nconst humanTemplate = \"{text}\";  \n  \n/**  \n * Chat prompt for generating comma-separated lists. It combines the system  \n * template and the human template.  \n */  \nconst chatPrompt = ChatPromptTemplate.fromMessages([  \n  [\"system\", template],  \n  [\"human\", huma","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/quickstart#","loc":{"lines":{"from":238,"to":264}}}}],["440af6e3-b512-4487-90bc-8e2f2c9882dd",{"pageContent":"ges([  \n  [\"system\", template],  \n  [\"human\", humanTemplate],  \n]);  \n  \nconst model = new ChatOpenAI({});  \nconst parser = new CommaSeparatedListOutputParser();  \n  \nconst chain = chatPrompt.pipe(model).pipe(parser);  \n  \nconst result = await chain.invoke({  \n  text: \"colors\",  \n});  \n  \n/*  \n  [\"red\", \"blue\", \"green\", \"yellow\", \"orange\"]  \n*/  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/quickstart#","loc":{"lines":{"from":264,"to":281}}}}],["a745e111-569a-495b-a743-bfac39625c5d",{"pageContent":"Note that we are using the `.pipe()` method to join these components together. This `.pipe()` method is part of the LangChain Expression Language. To learn more about this syntax, read the [documentation here](/docs/expression_language).","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/quickstart#","loc":{"lines":{"from":283,"to":283}}}}],["17fec225-b304-4726-8e80-6b718b49bc59",{"pageContent":"## Next steps[​](#next-steps \"Direct link to Next steps\")\n\nAnd that's it for the quickstart! We've now gone over how to create the core building block of LangChain applications. There is a lot more nuance in all these components (LLMs, prompts, output parsers) and a lot more different components to learn about as well. To continue on your journey:[Previous\n\nInstallation](/docs/get_started/installation)[Next\n\nLangChain Expression Language (LCEL)](/docs/expression_language/)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/get_started/quickstart#","loc":{"lines":{"from":285,"to":298}}}}],["19604f93-0485-48a1-ab4e-3be00d306d26",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# LangChain Expression Language (LCEL)\n\nLangChain Expression Language or LCEL is a declarative way to easily compose chains together. Any chain constructed this way will automatically have full sync, async, and streaming support.\n\nIf you're looking for a good place to get started, check out the [Cookbook section](/docs/expression_language/cookbook) - it shows off the various Expression Language pieces in order from simple to more complex.\n\n#### [Interface](/docs/expression_language/interface)[​](#interface \"Direct link to interface\")\n\nThe base interface shared by all LCEL objects\n\n#### [Cookbook](/docs/expression_language/cookbook)[​](#cookbook \"Direct link to cookbook\")\n\nExamples of common LCEL usage patterns\n\n##","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/","loc":{"lines":{"from":1,"to":22}}}}],["fe9974fa-6cba-4cd8-aca3-b8584410dc92",{"pageContent":"#### [Why use LCEL](/docs/expression_language/why)[​](#why-use-lcel \"Direct link to why-use-lcel\")\n\nA deeper dive into the benefits of LCEL[Previous\n\nQuickstart](/docs/get_started/quickstart)[Next\n\nInterface](/docs/expression_language/interface)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/","loc":{"lines":{"from":22,"to":35}}}}],["2250ba3d-d389-4e70-9c0d-a814a634e82c",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# LangChain Expression Language (LCEL)\n\nLangChain Expression Language or LCEL is a declarative way to easily compose chains together. Any chain constructed this way will automatically have full sync, async, and streaming support.\n\nIf you're looking for a good place to get started, check out the [Cookbook section](/docs/expression_language/cookbook) - it shows off the various Expression Language pieces in order from simple to more complex.\n\n#### [Interface](/docs/expression_language/interface)[​](#interface \"Direct link to interface\")\n\nThe base interface shared by all LCEL objects\n\n#### [Cookbook](/docs/expression_language/cookbook)[​](#cookbook \"Direct link to cookbook\")\n\nExamples of common LCEL usage patterns\n\n##","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":1,"to":22}}}}],["9ad80a13-4e1a-4e5b-ab54-c140919a5e51",{"pageContent":"#### [Why use LCEL](/docs/expression_language/why)[​](#why-use-lcel \"Direct link to why-use-lcel\")\n\nA deeper dive into the benefits of LCEL[Previous\n\nQuickstart](/docs/get_started/quickstart)[Next\n\nInterface](/docs/expression_language/interface)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":22,"to":35}}}}],["2ac3923b-5203-40eb-bcd7-1048b32b74b1",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# LangChain Expression Language (LCEL)\n\nLangChain Expression Language or LCEL is a declarative way to easily compose chains together. Any chain constructed this way will automatically have full sync, async, and streaming support.\n\nIf you're looking for a good place to get started, check out the [Cookbook section](/docs/expression_language/cookbook) - it shows off the various Expression Language pieces in order from simple to more complex.\n\n#### [Interface](/docs/expression_language/interface)[​](#interface \"Direct link to interface\")\n\nThe base interface shared by all LCEL objects\n\n#### [Cookbook](/docs/expression_language/cookbook)[​](#cookbook \"Direct link to cookbook\")\n\nExamples of common LCEL usage patterns\n\n##","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/#","loc":{"lines":{"from":1,"to":22}}}}],["46b9a686-dbb7-41d7-9649-40408d8c05eb",{"pageContent":"#### [Why use LCEL](/docs/expression_language/why)[​](#why-use-lcel \"Direct link to why-use-lcel\")\n\nA deeper dive into the benefits of LCEL[Previous\n\nQuickstart](/docs/get_started/quickstart)[Next\n\nInterface](/docs/expression_language/interface)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/#","loc":{"lines":{"from":22,"to":35}}}}],["fe74d733-3331-453e-91f7-bf880ead7c3f",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Interface\n\nIn an effort to make it as easy as possible to create custom chains, we've implemented a [\"Runnable\"](https://api.js.langchain.com/classes/schema_runnable.Runnable.html) protocol that most components implement. This is a standard interface with a few different methods, which make it easy to define custom chains as well as making it possible to invoke them in a standard way. The standard interface exposed includes:\n\n* `stream`: stream back chunks of the response\n* `invoke`: call the chain on an input\n* `batch`: call the chain on a list of inputs\n\nThe **input type** varies by component :","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/interface","loc":{"lines":{"from":1,"to":16}}}}],["fc4c25dd-3ce0-417b-a083-ae46b319be4d",{"pageContent":"The **input type** varies by component :\n\n|Component|Input Type|\n|---|---|\n|Prompt|Object|\n|Retriever|Single string|\n|LLM, ChatModel|Single string, list of chat messages or PromptValue|\n|Tool|Single string, or object, depending on the tool|\n|OutputParser|The output of an LLM or ChatModel|\n\n\nThe **output type** also varies by component :\n\n|Component|Output Type|\n|---|---|\n|LLM|String|\n|ChatModel|ChatMessage|\n|Prompt|PromptValue|\n|Retriever|List of documents|\n|Tool|Depends on the tool|\n|OutputParser|Depends on the parser|\n\n\nYou can combine runnables (and runnable-like objects such as functions and objects whose values are all functions) into sequences in two ways:\n\n* Call the `.pipe` instance method, which takes another runnable-like as an argument\n* Use the `RunnableSequence.from([])` static method with an array of runnable-likes, which will run in sequence when invoked\n\nSee below for examples of how this looks.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/interface","loc":{"lines":{"from":16,"to":44}}}}],["17c8accf-c02c-422b-a9ec-e91143fe530c",{"pageContent":"## Stream[​](#stream \"Direct link to Stream\")\n\n```typescript\nimport { PromptTemplate } from \"langchain/prompts\";  \nimport { ChatOpenAI } from \"langchain/chat_models/openai\";  \n  \nconst model = new ChatOpenAI({});  \nconst promptTemplate = PromptTemplate.fromTemplate(  \n  \"Tell me a joke about {topic}\"  \n);  \n  \nconst chain = promptTemplate.pipe(model);  \n  \nconst stream = await chain.stream({ topic: \"bears\" });  \n  \n// Each chunk has the same interface as a chat message  \nfor await (const chunk of stream) {  \n  console.log(chunk?.content);  \n}  \n  \n/*  \nWhy don't bears wear shoes?  \n  \nBecause they have bear feet!  \n*/  \n```\n\n#### API Reference:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/interface","loc":{"lines":{"from":46,"to":73}}}}],["1f5286b3-4bdb-43a6-8d03-dbe1dd7210b0",{"pageContent":"#### API Reference:\n\n## Invoke[​](#invoke \"Direct link to Invoke\")\n\n```typescript\nimport { PromptTemplate } from \"langchain/prompts\";  \nimport { ChatOpenAI } from \"langchain/chat_models/openai\";  \nimport { RunnableSequence } from \"langchain/schema/runnable\";  \n  \nconst model = new ChatOpenAI({});  \nconst promptTemplate = PromptTemplate.fromTemplate(  \n  \"Tell me a joke about {topic}\"  \n);  \n  \n// You can also create a chain using an array of runnables  \nconst chain = RunnableSequence.from([promptTemplate, model]);  \n  \nconst result = await chain.invoke({ topic: \"bears\" });  \n  \nconsole.log(result);  \n/*  \n  AIMessage {  \n    content: \"Why don't bears wear shoes?\\n\\nBecause they have bear feet!\",  \n  }  \n*/  \n```\n\n#### API Reference:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/interface","loc":{"lines":{"from":73,"to":100}}}}],["d881da9c-4e7e-45ef-abf2-af0a56dfcba4",{"pageContent":"#### API Reference:\n\n## Batch[​](#batch \"Direct link to Batch\")\n\n```typescript\nimport { PromptTemplate } from \"langchain/prompts\";  \nimport { ChatOpenAI } from \"langchain/chat_models/openai\";  \n  \nconst model = new ChatOpenAI({});  \nconst promptTemplate = PromptTemplate.fromTemplate(  \n  \"Tell me a joke about {topic}\"  \n);  \n  \nconst chain = promptTemplate.pipe(model);  \n  \nconst result = await chain.batch([{ topic: \"bears\" }, { topic: \"cats\" }]);  \n  \nconsole.log(result);  \n/*  \n  [  \n    AIMessage {  \n      content: \"Why don't bears wear shoes?\\n\\nBecause they have bear feet!\",  \n    },  \n    AIMessage {  \n      content: \"Why don't cats play poker in the wild?\\n\\nToo many cheetahs!\"  \n    }  \n  ]  \n*/  \n```\n\n##","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/interface","loc":{"lines":{"from":100,"to":130}}}}],["ae54e65d-45e6-405f-8bf3-fe5fa6bdb73b",{"pageContent":"## API Reference:\n\nYou can also pass a `batchOptions` argument to the call. There are options to set maximum concurrency and whether or not to return exceptions instead of throwing them (useful for gracefully handling failures!):","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/interface","loc":{"lines":{"from":130,"to":132}}}}],["12471c64-b73f-452e-9e83-c4a527bda49d",{"pageContent":"```typescript\nimport { PromptTemplate } from \"langchain/prompts\";  \nimport { ChatOpenAI } from \"langchain/chat_models/openai\";  \n  \nconst model = new ChatOpenAI({  \n  modelName: \"badmodel\",  \n});  \nconst promptTemplate = PromptTemplate.fromTemplate(  \n  \"Tell me a joke about {topic}\"  \n);  \n  \nconst chain = promptTemplate.pipe(model);  \n  \nconst result = await chain.batch(  \n  [{ topic: \"bears\" }, { topic: \"cats\" }],  \n  {},  \n  { returnExceptions: true, maxConcurrency: 1 }  \n);  \n  \nconsole.log(result);  \n/*  \n  [  \n    NotFoundError: The model `badmodel` does not exist  \n      at Function.generate (/Users/jacoblee/langchain/langchainjs/node_modules/openai/src/error.ts:71:6)  \n      at OpenAI.makeStatusError (/Users/jacoblee/langchain/langchainjs/node_modules/openai/src/core.ts:381:13)  \n      at OpenAI.makeRequest (/Users/jacoblee/langchain/langchainjs/node_modules/openai/src/core.ts:442:15)  \n      at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/interface","loc":{"lines":{"from":134,"to":160}}}}],["54e77eba-341a-4767-a575-8ec74204042b",{"pageContent":"ons (node:internal/process/task_queues:95:5)  \n      at async file:///Users/jacoblee/langchain/langchainjs/langchain/dist/chat_models/openai.js:514:29  \n      at RetryOperation._fn (/Users/jacoblee/langchain/langchainjs/node_modules/p-retry/index.js:50:12) {  \n    status: 404,  \n    NotFoundError: The model `badmodel` does not exist  \n        at Function.generate (/Users/jacoblee/langchain/langchainjs/node_modules/openai/src/error.ts:71:6)  \n        at OpenAI.makeStatusError (/Users/jacoblee/langchain/langchainjs/node_modules/openai/src/core.ts:381:13)  \n        at OpenAI.makeRequest (/Users/jacoblee/langchain/langchainjs/node_modules/openai/src/core.ts:442:15)  \n        at process.processTicksAndRejections (node:internal/process/task_queues:95:5)  \n        at async file:///Users/jacoblee/langchain/langchainjs/langchain/dist/chat_models/openai.js:514:29  \n        at RetryOperation._fn (/Users/jacoblee/langchain/langchainjs/node_modules/p-retry/index.js:50:12) {  \n      status: 404,","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/interface","loc":{"lines":{"from":160,"to":171}}}}],["ea72c487-2561-40d7-a741-7d2b20a99b6a",{"pageContent":"p-retry/index.js:50:12) {  \n      status: 404,  \n  ]  \n*/  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/interface","loc":{"lines":{"from":171,"to":175}}}}],["024ddd4d-2f5c-4744-938e-728e6bbafe55",{"pageContent":"#### API Reference:[Previous\n\nLangChain Expression Language (LCEL)](/docs/expression_language/)[Next\n\nRoute between multiple runnables](/docs/expression_language/how_to/routing)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/interface","loc":{"lines":{"from":177,"to":188}}}}],["c597949f-c1e6-4048-8e20-20bb9f7ace8d",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Interface\n\nIn an effort to make it as easy as possible to create custom chains, we've implemented a [\"Runnable\"](https://api.js.langchain.com/classes/schema_runnable.Runnable.html) protocol that most components implement. This is a standard interface with a few different methods, which make it easy to define custom chains as well as making it possible to invoke them in a standard way. The standard interface exposed includes:\n\n* `stream`: stream back chunks of the response\n* `invoke`: call the chain on an input\n* `batch`: call the chain on a list of inputs\n\nThe **input type** varies by component :","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/interface#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":1,"to":16}}}}],["b15ed9c3-9d2d-45b4-bcdf-c4a11f9a0cb6",{"pageContent":"The **input type** varies by component :\n\n|Component|Input Type|\n|---|---|\n|Prompt|Object|\n|Retriever|Single string|\n|LLM, ChatModel|Single string, list of chat messages or PromptValue|\n|Tool|Single string, or object, depending on the tool|\n|OutputParser|The output of an LLM or ChatModel|\n\n\nThe **output type** also varies by component :\n\n|Component|Output Type|\n|---|---|\n|LLM|String|\n|ChatModel|ChatMessage|\n|Prompt|PromptValue|\n|Retriever|List of documents|\n|Tool|Depends on the tool|\n|OutputParser|Depends on the parser|\n\n\nYou can combine runnables (and runnable-like objects such as functions and objects whose values are all functions) into sequences in two ways:\n\n* Call the `.pipe` instance method, which takes another runnable-like as an argument\n* Use the `RunnableSequence.from([])` static method with an array of runnable-likes, which will run in sequence when invoked\n\nSee below for examples of how this looks.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/interface#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":16,"to":44}}}}],["205147f5-4494-4901-9ce3-c930c6506aed",{"pageContent":"## Stream[​](#stream \"Direct link to Stream\")\n\n```typescript\nimport { PromptTemplate } from \"langchain/prompts\";  \nimport { ChatOpenAI } from \"langchain/chat_models/openai\";  \n  \nconst model = new ChatOpenAI({});  \nconst promptTemplate = PromptTemplate.fromTemplate(  \n  \"Tell me a joke about {topic}\"  \n);  \n  \nconst chain = promptTemplate.pipe(model);  \n  \nconst stream = await chain.stream({ topic: \"bears\" });  \n  \n// Each chunk has the same interface as a chat message  \nfor await (const chunk of stream) {  \n  console.log(chunk?.content);  \n}  \n  \n/*  \nWhy don't bears wear shoes?  \n  \nBecause they have bear feet!  \n*/  \n```\n\n#### API Reference:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/interface#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":46,"to":73}}}}],["b891c90e-6ccf-45db-93e8-7c5cb56f27b6",{"pageContent":"#### API Reference:\n\n## Invoke[​](#invoke \"Direct link to Invoke\")\n\n```typescript\nimport { PromptTemplate } from \"langchain/prompts\";  \nimport { ChatOpenAI } from \"langchain/chat_models/openai\";  \nimport { RunnableSequence } from \"langchain/schema/runnable\";  \n  \nconst model = new ChatOpenAI({});  \nconst promptTemplate = PromptTemplate.fromTemplate(  \n  \"Tell me a joke about {topic}\"  \n);  \n  \n// You can also create a chain using an array of runnables  \nconst chain = RunnableSequence.from([promptTemplate, model]);  \n  \nconst result = await chain.invoke({ topic: \"bears\" });  \n  \nconsole.log(result);  \n/*  \n  AIMessage {  \n    content: \"Why don't bears wear shoes?\\n\\nBecause they have bear feet!\",  \n  }  \n*/  \n```\n\n#### API Reference:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/interface#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":73,"to":100}}}}],["d3f28890-ce1c-4d78-a29d-3a1c1e6515dc",{"pageContent":"#### API Reference:\n\n## Batch[​](#batch \"Direct link to Batch\")\n\n```typescript\nimport { PromptTemplate } from \"langchain/prompts\";  \nimport { ChatOpenAI } from \"langchain/chat_models/openai\";  \n  \nconst model = new ChatOpenAI({});  \nconst promptTemplate = PromptTemplate.fromTemplate(  \n  \"Tell me a joke about {topic}\"  \n);  \n  \nconst chain = promptTemplate.pipe(model);  \n  \nconst result = await chain.batch([{ topic: \"bears\" }, { topic: \"cats\" }]);  \n  \nconsole.log(result);  \n/*  \n  [  \n    AIMessage {  \n      content: \"Why don't bears wear shoes?\\n\\nBecause they have bear feet!\",  \n    },  \n    AIMessage {  \n      content: \"Why don't cats play poker in the wild?\\n\\nToo many cheetahs!\"  \n    }  \n  ]  \n*/  \n```\n\n##","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/interface#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":100,"to":130}}}}],["e12d31e5-3d67-4b3c-9b82-11fcd1a0cb03",{"pageContent":"## API Reference:\n\nYou can also pass a `batchOptions` argument to the call. There are options to set maximum concurrency and whether or not to return exceptions instead of throwing them (useful for gracefully handling failures!):","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/interface#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":130,"to":132}}}}],["fe17bf92-c27b-4f8c-a46c-c533ddd77bd8",{"pageContent":"```typescript\nimport { PromptTemplate } from \"langchain/prompts\";  \nimport { ChatOpenAI } from \"langchain/chat_models/openai\";  \n  \nconst model = new ChatOpenAI({  \n  modelName: \"badmodel\",  \n});  \nconst promptTemplate = PromptTemplate.fromTemplate(  \n  \"Tell me a joke about {topic}\"  \n);  \n  \nconst chain = promptTemplate.pipe(model);  \n  \nconst result = await chain.batch(  \n  [{ topic: \"bears\" }, { topic: \"cats\" }],  \n  {},  \n  { returnExceptions: true, maxConcurrency: 1 }  \n);  \n  \nconsole.log(result);  \n/*  \n  [  \n    NotFoundError: The model `badmodel` does not exist  \n      at Function.generate (/Users/jacoblee/langchain/langchainjs/node_modules/openai/src/error.ts:71:6)  \n      at OpenAI.makeStatusError (/Users/jacoblee/langchain/langchainjs/node_modules/openai/src/core.ts:381:13)  \n      at OpenAI.makeRequest (/Users/jacoblee/langchain/langchainjs/node_modules/openai/src/core.ts:442:15)  \n      at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/interface#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":134,"to":160}}}}],["a5f8c669-3da3-49fe-8992-00456ccc21b9",{"pageContent":"ons (node:internal/process/task_queues:95:5)  \n      at async file:///Users/jacoblee/langchain/langchainjs/langchain/dist/chat_models/openai.js:514:29  \n      at RetryOperation._fn (/Users/jacoblee/langchain/langchainjs/node_modules/p-retry/index.js:50:12) {  \n    status: 404,  \n    NotFoundError: The model `badmodel` does not exist  \n        at Function.generate (/Users/jacoblee/langchain/langchainjs/node_modules/openai/src/error.ts:71:6)  \n        at OpenAI.makeStatusError (/Users/jacoblee/langchain/langchainjs/node_modules/openai/src/core.ts:381:13)  \n        at OpenAI.makeRequest (/Users/jacoblee/langchain/langchainjs/node_modules/openai/src/core.ts:442:15)  \n        at process.processTicksAndRejections (node:internal/process/task_queues:95:5)  \n        at async file:///Users/jacoblee/langchain/langchainjs/langchain/dist/chat_models/openai.js:514:29  \n        at RetryOperation._fn (/Users/jacoblee/langchain/langchainjs/node_modules/p-retry/index.js:50:12) {  \n      status: 404,","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/interface#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":160,"to":171}}}}],["c99ab7b9-5174-4201-bba6-b7aa71ae2e7e",{"pageContent":"p-retry/index.js:50:12) {  \n      status: 404,  \n  ]  \n*/  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/interface#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":171,"to":175}}}}],["36a9aae0-d085-4930-a9ac-aba486652e9c",{"pageContent":"#### API Reference:[Previous\n\nLangChain Expression Language (LCEL)](/docs/expression_language/)[Next\n\nRoute between multiple runnables](/docs/expression_language/how_to/routing)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/interface#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":177,"to":188}}}}],["392a91ee-c934-41c7-ab70-04e88379f3c3",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Interface\n\nIn an effort to make it as easy as possible to create custom chains, we've implemented a [\"Runnable\"](https://api.js.langchain.com/classes/schema_runnable.Runnable.html) protocol that most components implement. This is a standard interface with a few different methods, which make it easy to define custom chains as well as making it possible to invoke them in a standard way. The standard interface exposed includes:\n\n* `stream`: stream back chunks of the response\n* `invoke`: call the chain on an input\n* `batch`: call the chain on a list of inputs\n\nThe **input type** varies by component :","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/interface#","loc":{"lines":{"from":1,"to":16}}}}],["1c83e34f-3ab6-46a5-8fb0-5740091c713c",{"pageContent":"The **input type** varies by component :\n\n|Component|Input Type|\n|---|---|\n|Prompt|Object|\n|Retriever|Single string|\n|LLM, ChatModel|Single string, list of chat messages or PromptValue|\n|Tool|Single string, or object, depending on the tool|\n|OutputParser|The output of an LLM or ChatModel|\n\n\nThe **output type** also varies by component :\n\n|Component|Output Type|\n|---|---|\n|LLM|String|\n|ChatModel|ChatMessage|\n|Prompt|PromptValue|\n|Retriever|List of documents|\n|Tool|Depends on the tool|\n|OutputParser|Depends on the parser|\n\n\nYou can combine runnables (and runnable-like objects such as functions and objects whose values are all functions) into sequences in two ways:\n\n* Call the `.pipe` instance method, which takes another runnable-like as an argument\n* Use the `RunnableSequence.from([])` static method with an array of runnable-likes, which will run in sequence when invoked\n\nSee below for examples of how this looks.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/interface#","loc":{"lines":{"from":16,"to":44}}}}],["088b549b-d770-4cee-9e2b-b4c84c1a9029",{"pageContent":"## Stream[​](#stream \"Direct link to Stream\")\n\n```typescript\nimport { PromptTemplate } from \"langchain/prompts\";  \nimport { ChatOpenAI } from \"langchain/chat_models/openai\";  \n  \nconst model = new ChatOpenAI({});  \nconst promptTemplate = PromptTemplate.fromTemplate(  \n  \"Tell me a joke about {topic}\"  \n);  \n  \nconst chain = promptTemplate.pipe(model);  \n  \nconst stream = await chain.stream({ topic: \"bears\" });  \n  \n// Each chunk has the same interface as a chat message  \nfor await (const chunk of stream) {  \n  console.log(chunk?.content);  \n}  \n  \n/*  \nWhy don't bears wear shoes?  \n  \nBecause they have bear feet!  \n*/  \n```\n\n#### API Reference:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/interface#","loc":{"lines":{"from":46,"to":73}}}}],["a07dfc0f-33c8-469e-a7b6-ebfbcf6357c0",{"pageContent":"#### API Reference:\n\n## Invoke[​](#invoke \"Direct link to Invoke\")\n\n```typescript\nimport { PromptTemplate } from \"langchain/prompts\";  \nimport { ChatOpenAI } from \"langchain/chat_models/openai\";  \nimport { RunnableSequence } from \"langchain/schema/runnable\";  \n  \nconst model = new ChatOpenAI({});  \nconst promptTemplate = PromptTemplate.fromTemplate(  \n  \"Tell me a joke about {topic}\"  \n);  \n  \n// You can also create a chain using an array of runnables  \nconst chain = RunnableSequence.from([promptTemplate, model]);  \n  \nconst result = await chain.invoke({ topic: \"bears\" });  \n  \nconsole.log(result);  \n/*  \n  AIMessage {  \n    content: \"Why don't bears wear shoes?\\n\\nBecause they have bear feet!\",  \n  }  \n*/  \n```\n\n#### API Reference:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/interface#","loc":{"lines":{"from":73,"to":100}}}}],["5abfde3a-da79-4048-91a1-af0fc9739c4c",{"pageContent":"#### API Reference:\n\n## Batch[​](#batch \"Direct link to Batch\")\n\n```typescript\nimport { PromptTemplate } from \"langchain/prompts\";  \nimport { ChatOpenAI } from \"langchain/chat_models/openai\";  \n  \nconst model = new ChatOpenAI({});  \nconst promptTemplate = PromptTemplate.fromTemplate(  \n  \"Tell me a joke about {topic}\"  \n);  \n  \nconst chain = promptTemplate.pipe(model);  \n  \nconst result = await chain.batch([{ topic: \"bears\" }, { topic: \"cats\" }]);  \n  \nconsole.log(result);  \n/*  \n  [  \n    AIMessage {  \n      content: \"Why don't bears wear shoes?\\n\\nBecause they have bear feet!\",  \n    },  \n    AIMessage {  \n      content: \"Why don't cats play poker in the wild?\\n\\nToo many cheetahs!\"  \n    }  \n  ]  \n*/  \n```\n\n##","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/interface#","loc":{"lines":{"from":100,"to":130}}}}],["9bbb9057-8779-4496-97a4-ad63bff07884",{"pageContent":"## API Reference:\n\nYou can also pass a `batchOptions` argument to the call. There are options to set maximum concurrency and whether or not to return exceptions instead of throwing them (useful for gracefully handling failures!):","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/interface#","loc":{"lines":{"from":130,"to":132}}}}],["4e2aff14-b372-408e-b1dd-010efa46b607",{"pageContent":"```typescript\nimport { PromptTemplate } from \"langchain/prompts\";  \nimport { ChatOpenAI } from \"langchain/chat_models/openai\";  \n  \nconst model = new ChatOpenAI({  \n  modelName: \"badmodel\",  \n});  \nconst promptTemplate = PromptTemplate.fromTemplate(  \n  \"Tell me a joke about {topic}\"  \n);  \n  \nconst chain = promptTemplate.pipe(model);  \n  \nconst result = await chain.batch(  \n  [{ topic: \"bears\" }, { topic: \"cats\" }],  \n  {},  \n  { returnExceptions: true, maxConcurrency: 1 }  \n);  \n  \nconsole.log(result);  \n/*  \n  [  \n    NotFoundError: The model `badmodel` does not exist  \n      at Function.generate (/Users/jacoblee/langchain/langchainjs/node_modules/openai/src/error.ts:71:6)  \n      at OpenAI.makeStatusError (/Users/jacoblee/langchain/langchainjs/node_modules/openai/src/core.ts:381:13)  \n      at OpenAI.makeRequest (/Users/jacoblee/langchain/langchainjs/node_modules/openai/src/core.ts:442:15)  \n      at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/interface#","loc":{"lines":{"from":134,"to":160}}}}],["d3c71fff-56b3-4e65-a436-46a29fe3b34a",{"pageContent":"ons (node:internal/process/task_queues:95:5)  \n      at async file:///Users/jacoblee/langchain/langchainjs/langchain/dist/chat_models/openai.js:514:29  \n      at RetryOperation._fn (/Users/jacoblee/langchain/langchainjs/node_modules/p-retry/index.js:50:12) {  \n    status: 404,  \n    NotFoundError: The model `badmodel` does not exist  \n        at Function.generate (/Users/jacoblee/langchain/langchainjs/node_modules/openai/src/error.ts:71:6)  \n        at OpenAI.makeStatusError (/Users/jacoblee/langchain/langchainjs/node_modules/openai/src/core.ts:381:13)  \n        at OpenAI.makeRequest (/Users/jacoblee/langchain/langchainjs/node_modules/openai/src/core.ts:442:15)  \n        at process.processTicksAndRejections (node:internal/process/task_queues:95:5)  \n        at async file:///Users/jacoblee/langchain/langchainjs/langchain/dist/chat_models/openai.js:514:29  \n        at RetryOperation._fn (/Users/jacoblee/langchain/langchainjs/node_modules/p-retry/index.js:50:12) {  \n      status: 404,","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/interface#","loc":{"lines":{"from":160,"to":171}}}}],["c13fc931-4bba-4b58-a4ab-2faeea373b02",{"pageContent":"p-retry/index.js:50:12) {  \n      status: 404,  \n  ]  \n*/  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/interface#","loc":{"lines":{"from":171,"to":175}}}}],["ddc16c00-559f-4108-8b5c-be14fcc24511",{"pageContent":"#### API Reference:[Previous\n\nLangChain Expression Language (LCEL)](/docs/expression_language/)[Next\n\nRoute between multiple runnables](/docs/expression_language/how_to/routing)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/interface#","loc":{"lines":{"from":177,"to":188}}}}],["265eae50-24a4-4584-92fd-b7c430f84f08",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Cookbook\n\nExample code for accomplishing common tasks with the LangChain Expression Language (LCEL). These examples show how to compose different Runnable (the core LCEL interface) components to achieve various tasks. If you're just getting acquainted with LCEL, the [Prompt + LLM](/docs/expression_language/cookbook/prompt_llm_parser) page is a good place to start.\n\nSeveral pages in this section include embedded interactive screencasts from [Scrimba](https://scrimba.com). They're a great resource for getting started - you can edit the included code whenever you want, just as if you were pair programming with a teacher!\n\n[","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/","loc":{"lines":{"from":1,"to":14}}}}],["1796755e-bbb6-4657-8895-12c9f3c162f7",{"pageContent":"## 📄️ Prompt + LLM\n\nOne of the most foundational Expression Language compositions is taking:](/docs/expression_language/cookbook/prompt_llm_parser)[## 📄️ Multiple chains\n\nRunnables can be used to combine multiple Chains together:](/docs/expression_language/cookbook/multiple_chains)[## 📄️ Retrieval augmented generation (RAG)\n\nLet's now look at adding in a retrieval step to a prompt and an LLM, which adds up to a \"retrieval-augmented generation\" chain:](/docs/expression_language/cookbook/retrieval)[## 📄️ Querying a SQL DB\n\nWe can replicate our SQLDatabaseChain with Runnables.](/docs/expression_language/cookbook/sql_db)[## 📄️ Adding memory\n\nThis shows how to add memory to an arbitrary chain. Right now, you can use the memory classes but need to hook them up manually.](/docs/expression_language/cookbook/adding_memory)[## 📄️ Using tools\n\nTools are also runnables, and can therefore be used within a chain:](/docs/expression_language/cookbook/tools)[","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/","loc":{"lines":{"from":14,"to":26}}}}],["17617eb6-b0ca-406b-ac23-2aed09ad5efa",{"pageContent":"## 📄️ Agents\n\nYou can pass a Runnable into an agent.](/docs/expression_language/cookbook/agents)[Previous\n\nUse RunnableMaps](/docs/expression_language/how_to/map)[Next\n\nPrompt + LLM](/docs/expression_language/cookbook/prompt_llm_parser)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/","loc":{"lines":{"from":26,"to":39}}}}],["f8dc8095-80db-4105-85cc-b48acfaebcca",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Cookbook\n\nExample code for accomplishing common tasks with the LangChain Expression Language (LCEL). These examples show how to compose different Runnable (the core LCEL interface) components to achieve various tasks. If you're just getting acquainted with LCEL, the [Prompt + LLM](/docs/expression_language/cookbook/prompt_llm_parser) page is a good place to start.\n\nSeveral pages in this section include embedded interactive screencasts from [Scrimba](https://scrimba.com). They're a great resource for getting started - you can edit the included code whenever you want, just as if you were pair programming with a teacher!\n\n[","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":1,"to":14}}}}],["8216d839-da8b-4c38-99b3-ace2e4f370e3",{"pageContent":"## 📄️ Prompt + LLM\n\nOne of the most foundational Expression Language compositions is taking:](/docs/expression_language/cookbook/prompt_llm_parser)[## 📄️ Multiple chains\n\nRunnables can be used to combine multiple Chains together:](/docs/expression_language/cookbook/multiple_chains)[## 📄️ Retrieval augmented generation (RAG)\n\nLet's now look at adding in a retrieval step to a prompt and an LLM, which adds up to a \"retrieval-augmented generation\" chain:](/docs/expression_language/cookbook/retrieval)[## 📄️ Querying a SQL DB\n\nWe can replicate our SQLDatabaseChain with Runnables.](/docs/expression_language/cookbook/sql_db)[## 📄️ Adding memory\n\nThis shows how to add memory to an arbitrary chain. Right now, you can use the memory classes but need to hook them up manually.](/docs/expression_language/cookbook/adding_memory)[## 📄️ Using tools\n\nTools are also runnables, and can therefore be used within a chain:](/docs/expression_language/cookbook/tools)[","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":14,"to":26}}}}],["414515f6-ed76-4480-aa61-a88569d748e0",{"pageContent":"## 📄️ Agents\n\nYou can pass a Runnable into an agent.](/docs/expression_language/cookbook/agents)[Previous\n\nUse RunnableMaps](/docs/expression_language/how_to/map)[Next\n\nPrompt + LLM](/docs/expression_language/cookbook/prompt_llm_parser)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":26,"to":39}}}}],["7d71085a-1706-4f9d-a1df-5579597efbb0",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Cookbook\n\nExample code for accomplishing common tasks with the LangChain Expression Language (LCEL). These examples show how to compose different Runnable (the core LCEL interface) components to achieve various tasks. If you're just getting acquainted with LCEL, the [Prompt + LLM](/docs/expression_language/cookbook/prompt_llm_parser) page is a good place to start.\n\nSeveral pages in this section include embedded interactive screencasts from [Scrimba](https://scrimba.com). They're a great resource for getting started - you can edit the included code whenever you want, just as if you were pair programming with a teacher!\n\n[","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/#","loc":{"lines":{"from":1,"to":14}}}}],["307ec10c-35a7-4cee-944f-cb2076c8b7a7",{"pageContent":"## 📄️ Prompt + LLM\n\nOne of the most foundational Expression Language compositions is taking:](/docs/expression_language/cookbook/prompt_llm_parser)[## 📄️ Multiple chains\n\nRunnables can be used to combine multiple Chains together:](/docs/expression_language/cookbook/multiple_chains)[## 📄️ Retrieval augmented generation (RAG)\n\nLet's now look at adding in a retrieval step to a prompt and an LLM, which adds up to a \"retrieval-augmented generation\" chain:](/docs/expression_language/cookbook/retrieval)[## 📄️ Querying a SQL DB\n\nWe can replicate our SQLDatabaseChain with Runnables.](/docs/expression_language/cookbook/sql_db)[## 📄️ Adding memory\n\nThis shows how to add memory to an arbitrary chain. Right now, you can use the memory classes but need to hook them up manually.](/docs/expression_language/cookbook/adding_memory)[## 📄️ Using tools\n\nTools are also runnables, and can therefore be used within a chain:](/docs/expression_language/cookbook/tools)[","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/#","loc":{"lines":{"from":14,"to":26}}}}],["7d834f8c-4eab-407e-a56e-7cb5075c71e2",{"pageContent":"## 📄️ Agents\n\nYou can pass a Runnable into an agent.](/docs/expression_language/cookbook/agents)[Previous\n\nUse RunnableMaps](/docs/expression_language/how_to/map)[Next\n\nPrompt + LLM](/docs/expression_language/cookbook/prompt_llm_parser)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/#","loc":{"lines":{"from":26,"to":39}}}}],["e67a4fc7-d1fc-4fab-be99-89aec0a752ae",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Prompt + LLM\n\nOne of the most foundational Expression Language compositions is taking:\n\n`PromptTemplate` / `ChatPromptTemplate` -> `LLM` / `ChatModel` -> `OutputParser`\n\nAlmost all other chains you build will use this building block.\n<details><summary>Interactive tutorial</summary>\n\nThe screencast below interactively walks through a simple prompt template + LLM chain. You can update and run the code as it's being written in the video!</details>","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/prompt_llm_parser","loc":{"lines":{"from":1,"to":17}}}}],["9b2d5d5b-005a-4aae-b267-8683b559ac6a",{"pageContent":"## PromptTemplate + LLM[​](#prompttemplate--llm \"Direct link to PromptTemplate + LLM\")\n\nA PromptTemplate -> LLM is a core chain that is used in most other larger chains/systems.\n\n```typescript\nimport { PromptTemplate } from \"langchain/prompts\";  \nimport { ChatOpenAI } from \"langchain/chat_models/openai\";  \n  \nconst model = new ChatOpenAI({});  \nconst promptTemplate = PromptTemplate.fromTemplate(  \n  \"Tell me a joke about {topic}\"  \n);  \n  \nconst chain = promptTemplate.pipe(model);  \n  \nconst result = await chain.invoke({ topic: \"bears\" });  \n  \nconsole.log(result);  \n  \n/*  \n  AIMessage {  \n    content: \"Why don't bears wear shoes?\\n\\nBecause they have bear feet!\",  \n  }  \n*/  \n```\n\n#### API Reference:\n\nOften times we want to attach kwargs to the model that's passed in. To do this, runnables contain a `.bind` method. Here's how you can use it:\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/prompt_llm_parser","loc":{"lines":{"from":18,"to":48}}}}],["16215259-c594-4961-a52d-4d2e419ac1e3",{"pageContent":"### Attaching stop sequences[​](#attaching-stop-sequences \"Direct link to Attaching stop sequences\")\n<details><summary>Interactive tutorial</summary>\n\nThe screencast below interactively walks through an example. You can update and run the code as it's being written in the video!</details>\n\n```typescript\nimport { PromptTemplate } from \"langchain/prompts\";  \nimport { ChatOpenAI } from \"langchain/chat_models/openai\";  \n  \nconst prompt = PromptTemplate.fromTemplate(`Tell me a joke about {subject}`);  \n  \nconst model = new ChatOpenAI({});  \n  \nconst chain = prompt.pipe(model.bind({ stop: [\"\\n\"] }));  \n  \nconst result = await chain.invoke({ subject: \"bears\" });  \n  \nconsole.log(result);  \n  \n/*  \n  AIMessage {  \n    contents: \"Why don't bears use cell phones?\"  \n  }  \n*/  \n```\n\n#### API Reference:\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/prompt_llm_parser","loc":{"lines":{"from":48,"to":76}}}}],["a5a1bc8c-4bda-412d-b4e1-a59cbd70b8e6",{"pageContent":"## Attaching function call information[​](#attaching-function-call-information \"Direct link to Attaching function call information\")\n<details><summary>Interactive tutorial</summary>\n\nThe screencast below interactively walks through an example. You can update and run the code as it's being written in the video!</details>","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/prompt_llm_parser","loc":{"lines":{"from":76,"to":79}}}}],["fc747083-ebeb-4351-81c0-8ca814bccdc4",{"pageContent":"```typescript\nimport { PromptTemplate } from \"langchain/prompts\";  \nimport { ChatOpenAI } from \"langchain/chat_models/openai\";  \n  \nconst prompt = PromptTemplate.fromTemplate(`Tell me a joke about {subject}`);  \n  \nconst model = new ChatOpenAI({});  \n  \nconst functionSchema = [  \n  {  \n    name: \"joke\",  \n    description: \"A joke\",  \n    parameters: {  \n      type: \"object\",  \n      properties: {  \n        setup: {  \n          type: \"string\",  \n          description: \"The setup for the joke\",  \n        },  \n        punchline: {  \n          type: \"string\",  \n          description: \"The punchline for the joke\",  \n        },  \n      },  \n      required: [\"setup\", \"punchline\"],  \n    },  \n  },  \n];  \n  \nconst chain = prompt.pipe(  \n  model.bind({  \n    functions: functionSchema,  \n    function_call: { name: \"joke\" },  \n  })  \n);  \n  \nconst result = await chain.invoke({ subject: \"bears\" });  \n  \nconsole.log(result);  \n  \n/*  \n  AIMessage {  \n    content: \"\",  \n    additional_kwargs: {","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/prompt_llm_parser","loc":{"lines":{"from":81,"to":124}}}}],["1bd52760-f26e-4291-90c5-38c8c7cfa34e",{"pageContent":"content: \"\",  \n    additional_kwargs: {  \n      function_call: {  \n        name: \"joke\",  \n        arguments: '{\\n  \"setup\": \"Why don\\'t bears wear shoes?\",\\n  \"punchline\": \"Because they have bear feet!\"\\n}'  \n      }  \n    }  \n  }  \n*/  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/prompt_llm_parser","loc":{"lines":{"from":124,"to":133}}}}],["e36ad701-a976-457c-8a8d-131ad871e70a",{"pageContent":"#### API Reference:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/prompt_llm_parser","loc":{"lines":{"from":133,"to":133}}}}],["b67e23d8-8b4b-460d-9404-0d5a03f323f0",{"pageContent":"## PromptTemplate + LLM + OutputParser[​](#prompttemplate--llm--outputparser \"Direct link to PromptTemplate + LLM + OutputParser\")\n<details><summary>Interactive tutorial</summary>\n\nThe screencast below interactively walks through an example. You can update and run the code as it's being written in the video!</details>\n\nWe can also add in an output parser to conveniently transform the raw LLM/ChatModel output into a consistent string format:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/prompt_llm_parser","loc":{"lines":{"from":225,"to":230}}}}],["4b19e14e-a803-43f8-a941-9bcecd565595",{"pageContent":"```typescript\nimport { PromptTemplate } from \"langchain/prompts\";  \nimport { ChatOpenAI } from \"langchain/chat_models/openai\";  \nimport { RunnableSequence } from \"langchain/schema/runnable\";  \nimport { StringOutputParser } from \"langchain/schema/output_parser\";  \n  \nconst model = new ChatOpenAI({});  \nconst promptTemplate = PromptTemplate.fromTemplate(  \n  \"Tell me a joke about {topic}\"  \n);  \nconst outputParser = new StringOutputParser();  \n  \nconst chain = RunnableSequence.from([promptTemplate, model, outputParser]);  \n  \nconst result = await chain.invoke({ topic: \"bears\" });  \n  \nconsole.log(result);  \n  \n/*  \n  \"Why don't bears wear shoes?\\n\\nBecause they have bear feet!\"  \n*/  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/prompt_llm_parser","loc":{"lines":{"from":232,"to":253}}}}],["48aa6e73-77c9-4dbd-9144-ff91aed14284",{"pageContent":"#### API Reference:[Previous\n\nCookbook](/docs/expression_language/cookbook/)[Next\n\nMultiple chains](/docs/expression_language/cookbook/multiple_chains)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/prompt_llm_parser","loc":{"lines":{"from":255,"to":266}}}}],["9aa326d6-e907-4c28-a33d-96fddc5b19f4",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Prompt + LLM\n\nOne of the most foundational Expression Language compositions is taking:\n\n`PromptTemplate` / `ChatPromptTemplate` -> `LLM` / `ChatModel` -> `OutputParser`\n\nAlmost all other chains you build will use this building block.\n<details><summary>Interactive tutorial</summary>\n\nThe screencast below interactively walks through a simple prompt template + LLM chain. You can update and run the code as it's being written in the video!</details>","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/prompt_llm_parser#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":1,"to":17}}}}],["f4d24e32-adde-499d-8d0b-21e5b390e8af",{"pageContent":"## PromptTemplate + LLM[​](#prompttemplate--llm \"Direct link to PromptTemplate + LLM\")\n\nA PromptTemplate -> LLM is a core chain that is used in most other larger chains/systems.\n\n```typescript\nimport { PromptTemplate } from \"langchain/prompts\";  \nimport { ChatOpenAI } from \"langchain/chat_models/openai\";  \n  \nconst model = new ChatOpenAI({});  \nconst promptTemplate = PromptTemplate.fromTemplate(  \n  \"Tell me a joke about {topic}\"  \n);  \n  \nconst chain = promptTemplate.pipe(model);  \n  \nconst result = await chain.invoke({ topic: \"bears\" });  \n  \nconsole.log(result);  \n  \n/*  \n  AIMessage {  \n    content: \"Why don't bears wear shoes?\\n\\nBecause they have bear feet!\",  \n  }  \n*/  \n```\n\n#### API Reference:\n\nOften times we want to attach kwargs to the model that's passed in. To do this, runnables contain a `.bind` method. Here's how you can use it:\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/prompt_llm_parser#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":18,"to":48}}}}],["a6b89132-2108-427f-afc3-75d84fd3449d",{"pageContent":"### Attaching stop sequences[​](#attaching-stop-sequences \"Direct link to Attaching stop sequences\")\n<details><summary>Interactive tutorial</summary>\n\nThe screencast below interactively walks through an example. You can update and run the code as it's being written in the video!</details>\n\n```typescript\nimport { PromptTemplate } from \"langchain/prompts\";  \nimport { ChatOpenAI } from \"langchain/chat_models/openai\";  \n  \nconst prompt = PromptTemplate.fromTemplate(`Tell me a joke about {subject}`);  \n  \nconst model = new ChatOpenAI({});  \n  \nconst chain = prompt.pipe(model.bind({ stop: [\"\\n\"] }));  \n  \nconst result = await chain.invoke({ subject: \"bears\" });  \n  \nconsole.log(result);  \n  \n/*  \n  AIMessage {  \n    contents: \"Why don't bears use cell phones?\"  \n  }  \n*/  \n```\n\n#### API Reference:\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/prompt_llm_parser#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":48,"to":76}}}}],["cd6d4a92-5a41-462f-8b75-37f816d9939d",{"pageContent":"## Attaching function call information[​](#attaching-function-call-information \"Direct link to Attaching function call information\")\n<details><summary>Interactive tutorial</summary>\n\nThe screencast below interactively walks through an example. You can update and run the code as it's being written in the video!</details>","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/prompt_llm_parser#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":76,"to":79}}}}],["2ebe635a-b54a-4a1a-b191-17c66da3f267",{"pageContent":"```typescript\nimport { PromptTemplate } from \"langchain/prompts\";  \nimport { ChatOpenAI } from \"langchain/chat_models/openai\";  \n  \nconst prompt = PromptTemplate.fromTemplate(`Tell me a joke about {subject}`);  \n  \nconst model = new ChatOpenAI({});  \n  \nconst functionSchema = [  \n  {  \n    name: \"joke\",  \n    description: \"A joke\",  \n    parameters: {  \n      type: \"object\",  \n      properties: {  \n        setup: {  \n          type: \"string\",  \n          description: \"The setup for the joke\",  \n        },  \n        punchline: {  \n          type: \"string\",  \n          description: \"The punchline for the joke\",  \n        },  \n      },  \n      required: [\"setup\", \"punchline\"],  \n    },  \n  },  \n];  \n  \nconst chain = prompt.pipe(  \n  model.bind({  \n    functions: functionSchema,  \n    function_call: { name: \"joke\" },  \n  })  \n);  \n  \nconst result = await chain.invoke({ subject: \"bears\" });  \n  \nconsole.log(result);  \n  \n/*  \n  AIMessage {  \n    content: \"\",  \n    additional_kwargs: {","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/prompt_llm_parser#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":81,"to":124}}}}],["cbe2f2f2-8916-433a-a2d9-be35aec22bd8",{"pageContent":"content: \"\",  \n    additional_kwargs: {  \n      function_call: {  \n        name: \"joke\",  \n        arguments: '{\\n  \"setup\": \"Why don\\'t bears wear shoes?\",\\n  \"punchline\": \"Because they have bear feet!\"\\n}'  \n      }  \n    }  \n  }  \n*/  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/prompt_llm_parser#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":124,"to":133}}}}],["d8409964-ef32-4798-8a72-1469997c8211",{"pageContent":"#### API Reference:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/prompt_llm_parser#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":133,"to":133}}}}],["6f2d3b6a-4987-4236-afc1-26645c8bf76a",{"pageContent":"## PromptTemplate + LLM + OutputParser[​](#prompttemplate--llm--outputparser \"Direct link to PromptTemplate + LLM + OutputParser\")\n<details><summary>Interactive tutorial</summary>\n\nThe screencast below interactively walks through an example. You can update and run the code as it's being written in the video!</details>\n\nWe can also add in an output parser to conveniently transform the raw LLM/ChatModel output into a consistent string format:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/prompt_llm_parser#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":225,"to":230}}}}],["0967863b-c923-4d1f-824d-c878433156fb",{"pageContent":"```typescript\nimport { PromptTemplate } from \"langchain/prompts\";  \nimport { ChatOpenAI } from \"langchain/chat_models/openai\";  \nimport { RunnableSequence } from \"langchain/schema/runnable\";  \nimport { StringOutputParser } from \"langchain/schema/output_parser\";  \n  \nconst model = new ChatOpenAI({});  \nconst promptTemplate = PromptTemplate.fromTemplate(  \n  \"Tell me a joke about {topic}\"  \n);  \nconst outputParser = new StringOutputParser();  \n  \nconst chain = RunnableSequence.from([promptTemplate, model, outputParser]);  \n  \nconst result = await chain.invoke({ topic: \"bears\" });  \n  \nconsole.log(result);  \n  \n/*  \n  \"Why don't bears wear shoes?\\n\\nBecause they have bear feet!\"  \n*/  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/prompt_llm_parser#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":232,"to":253}}}}],["e36fa642-a541-4bba-a5fc-84498ef09df4",{"pageContent":"#### API Reference:[Previous\n\nCookbook](/docs/expression_language/cookbook/)[Next\n\nMultiple chains](/docs/expression_language/cookbook/multiple_chains)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/prompt_llm_parser#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":255,"to":266}}}}],["5b1f5591-efcf-458a-89e0-709ac969f67d",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Prompt + LLM\n\nOne of the most foundational Expression Language compositions is taking:\n\n`PromptTemplate` / `ChatPromptTemplate` -> `LLM` / `ChatModel` -> `OutputParser`\n\nAlmost all other chains you build will use this building block.\n<details><summary>Interactive tutorial</summary>\n\nThe screencast below interactively walks through a simple prompt template + LLM chain. You can update and run the code as it's being written in the video!</details>","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/prompt_llm_parser#","loc":{"lines":{"from":1,"to":17}}}}],["bfaedd40-a69e-448e-9b24-cb5d4a557b35",{"pageContent":"## PromptTemplate + LLM[​](#prompttemplate--llm \"Direct link to PromptTemplate + LLM\")\n\nA PromptTemplate -> LLM is a core chain that is used in most other larger chains/systems.\n\n```typescript\nimport { PromptTemplate } from \"langchain/prompts\";  \nimport { ChatOpenAI } from \"langchain/chat_models/openai\";  \n  \nconst model = new ChatOpenAI({});  \nconst promptTemplate = PromptTemplate.fromTemplate(  \n  \"Tell me a joke about {topic}\"  \n);  \n  \nconst chain = promptTemplate.pipe(model);  \n  \nconst result = await chain.invoke({ topic: \"bears\" });  \n  \nconsole.log(result);  \n  \n/*  \n  AIMessage {  \n    content: \"Why don't bears wear shoes?\\n\\nBecause they have bear feet!\",  \n  }  \n*/  \n```\n\n#### API Reference:\n\nOften times we want to attach kwargs to the model that's passed in. To do this, runnables contain a `.bind` method. Here's how you can use it:\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/prompt_llm_parser#","loc":{"lines":{"from":18,"to":48}}}}],["fbdb3568-cc64-4357-b155-7797deb0a1b3",{"pageContent":"### Attaching stop sequences[​](#attaching-stop-sequences \"Direct link to Attaching stop sequences\")\n<details><summary>Interactive tutorial</summary>\n\nThe screencast below interactively walks through an example. You can update and run the code as it's being written in the video!</details>\n\n```typescript\nimport { PromptTemplate } from \"langchain/prompts\";  \nimport { ChatOpenAI } from \"langchain/chat_models/openai\";  \n  \nconst prompt = PromptTemplate.fromTemplate(`Tell me a joke about {subject}`);  \n  \nconst model = new ChatOpenAI({});  \n  \nconst chain = prompt.pipe(model.bind({ stop: [\"\\n\"] }));  \n  \nconst result = await chain.invoke({ subject: \"bears\" });  \n  \nconsole.log(result);  \n  \n/*  \n  AIMessage {  \n    contents: \"Why don't bears use cell phones?\"  \n  }  \n*/  \n```\n\n#### API Reference:\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/prompt_llm_parser#","loc":{"lines":{"from":48,"to":76}}}}],["3b9347ad-b5c5-496d-9ca3-f83ddfd5f503",{"pageContent":"## Attaching function call information[​](#attaching-function-call-information \"Direct link to Attaching function call information\")\n<details><summary>Interactive tutorial</summary>\n\nThe screencast below interactively walks through an example. You can update and run the code as it's being written in the video!</details>","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/prompt_llm_parser#","loc":{"lines":{"from":76,"to":79}}}}],["53f6b1be-4126-40ff-85fd-de5709b66b8a",{"pageContent":"```typescript\nimport { PromptTemplate } from \"langchain/prompts\";  \nimport { ChatOpenAI } from \"langchain/chat_models/openai\";  \n  \nconst prompt = PromptTemplate.fromTemplate(`Tell me a joke about {subject}`);  \n  \nconst model = new ChatOpenAI({});  \n  \nconst functionSchema = [  \n  {  \n    name: \"joke\",  \n    description: \"A joke\",  \n    parameters: {  \n      type: \"object\",  \n      properties: {  \n        setup: {  \n          type: \"string\",  \n          description: \"The setup for the joke\",  \n        },  \n        punchline: {  \n          type: \"string\",  \n          description: \"The punchline for the joke\",  \n        },  \n      },  \n      required: [\"setup\", \"punchline\"],  \n    },  \n  },  \n];  \n  \nconst chain = prompt.pipe(  \n  model.bind({  \n    functions: functionSchema,  \n    function_call: { name: \"joke\" },  \n  })  \n);  \n  \nconst result = await chain.invoke({ subject: \"bears\" });  \n  \nconsole.log(result);  \n  \n/*  \n  AIMessage {  \n    content: \"\",  \n    additional_kwargs: {","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/prompt_llm_parser#","loc":{"lines":{"from":81,"to":124}}}}],["596b2ae4-a07a-4fc8-ac54-44dac5b597f6",{"pageContent":"content: \"\",  \n    additional_kwargs: {  \n      function_call: {  \n        name: \"joke\",  \n        arguments: '{\\n  \"setup\": \"Why don\\'t bears wear shoes?\",\\n  \"punchline\": \"Because they have bear feet!\"\\n}'  \n      }  \n    }  \n  }  \n*/  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/prompt_llm_parser#","loc":{"lines":{"from":124,"to":133}}}}],["0344967d-bc94-4f71-9981-d7837286554e",{"pageContent":"#### API Reference:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/prompt_llm_parser#","loc":{"lines":{"from":133,"to":133}}}}],["7a8b970f-b392-47c5-b186-5bcf77ce7c5d",{"pageContent":"## PromptTemplate + LLM + OutputParser[​](#prompttemplate--llm--outputparser \"Direct link to PromptTemplate + LLM + OutputParser\")\n<details><summary>Interactive tutorial</summary>\n\nThe screencast below interactively walks through an example. You can update and run the code as it's being written in the video!</details>\n\nWe can also add in an output parser to conveniently transform the raw LLM/ChatModel output into a consistent string format:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/prompt_llm_parser#","loc":{"lines":{"from":225,"to":230}}}}],["71652e7e-03cb-41eb-acc9-028c67314010",{"pageContent":"```typescript\nimport { PromptTemplate } from \"langchain/prompts\";  \nimport { ChatOpenAI } from \"langchain/chat_models/openai\";  \nimport { RunnableSequence } from \"langchain/schema/runnable\";  \nimport { StringOutputParser } from \"langchain/schema/output_parser\";  \n  \nconst model = new ChatOpenAI({});  \nconst promptTemplate = PromptTemplate.fromTemplate(  \n  \"Tell me a joke about {topic}\"  \n);  \nconst outputParser = new StringOutputParser();  \n  \nconst chain = RunnableSequence.from([promptTemplate, model, outputParser]);  \n  \nconst result = await chain.invoke({ topic: \"bears\" });  \n  \nconsole.log(result);  \n  \n/*  \n  \"Why don't bears wear shoes?\\n\\nBecause they have bear feet!\"  \n*/  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/prompt_llm_parser#","loc":{"lines":{"from":232,"to":253}}}}],["0c61b430-fd6a-4697-b851-ff27032b1e04",{"pageContent":"#### API Reference:[Previous\n\nCookbook](/docs/expression_language/cookbook/)[Next\n\nMultiple chains](/docs/expression_language/cookbook/multiple_chains)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/prompt_llm_parser#","loc":{"lines":{"from":255,"to":266}}}}],["bbd9cc01-1052-487a-8489-711a8eee2b59",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Multiple chains\n\nRunnables can be used to combine multiple Chains together:\n<details><summary>Interactive tutorial</summary>\n\nThe screencast below interactively walks through an example. You can update and run the code as it's being written in the video!</details>","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/multiple_chains","loc":{"lines":{"from":1,"to":13}}}}],["33aa1b3f-9265-42a5-a7c2-7d2d32f87460",{"pageContent":"```typescript\nimport { PromptTemplate } from \"langchain/prompts\";  \nimport { RunnableSequence } from \"langchain/schema/runnable\";  \nimport { StringOutputParser } from \"langchain/schema/output_parser\";  \nimport { ChatAnthropic } from \"langchain/chat_models/anthropic\";  \n  \nconst prompt1 = PromptTemplate.fromTemplate(  \n  `What is the city {person} is from? Only respond with the name of the city.`  \n);  \nconst prompt2 = PromptTemplate.fromTemplate(  \n  `What country is the city {city} in? Respond in {language}.`  \n);  \n  \nconst model = new ChatAnthropic({});  \n  \nconst chain = prompt1.pipe(model).pipe(new StringOutputParser());  \n  \nconst combinedChain = RunnableSequence.from([  \n  {  \n    city: chain,  \n    language: (input) => input.language,  \n  },  \n  prompt2,  \n  model,  \n  new StringOutputParser(),  \n]);  \n  \nconst result = await combinedChain.invoke({  \n  person: \"Obama\",  \n  language: \"German\",  \n});  \n  \nconsole.log(result);  \n  \n/*  \n  Chicago befindet sich in den Vereinigten","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/multiple_chains","loc":{"lines":{"from":15,"to":50}}}}],["ea113a15-aa83-47df-82dc-4b1667949e08",{"pageContent":"/*  \n  Chicago befindet sich in den Vereinigten Staaten.  \n*/  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/multiple_chains","loc":{"lines":{"from":50,"to":53}}}}],["965fe622-2f09-4c31-81ee-c71cd5635014",{"pageContent":"#### API Reference:\n\nThe `RunnableSequence` above coerces the object into a `RunnableMap`. Each property in the map receives the same parameters. The runnable or function set as the value of that property is invoked with those parameters, and the return value populates an object which is then passed onto the next runnable in the sequence.\n\n## Passthroughs[​](#passthroughs \"Direct link to Passthroughs\")\n\nIn the example above, we use a passthrough in a runnable map to pass along original input variables to future steps in the chain.\n\nIn general, how exactly you do this depends on what exactly the input is:[Previous\n\nPrompt + LLM](/docs/expression_language/cookbook/prompt_llm_parser)[Next\n\nRetrieval augmented generation (RAG)](/docs/expression_language/cookbook/retrieval)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/multiple_chains","loc":{"lines":{"from":55,"to":74}}}}],["0af15d59-fb65-4d11-9770-298ec3ab4d68",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Multiple chains\n\nRunnables can be used to combine multiple Chains together:\n<details><summary>Interactive tutorial</summary>\n\nThe screencast below interactively walks through an example. You can update and run the code as it's being written in the video!</details>","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/multiple_chains#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":1,"to":13}}}}],["7a0af2bb-bab4-4a52-b309-5e17d7de4fcf",{"pageContent":"```typescript\nimport { PromptTemplate } from \"langchain/prompts\";  \nimport { RunnableSequence } from \"langchain/schema/runnable\";  \nimport { StringOutputParser } from \"langchain/schema/output_parser\";  \nimport { ChatAnthropic } from \"langchain/chat_models/anthropic\";  \n  \nconst prompt1 = PromptTemplate.fromTemplate(  \n  `What is the city {person} is from? Only respond with the name of the city.`  \n);  \nconst prompt2 = PromptTemplate.fromTemplate(  \n  `What country is the city {city} in? Respond in {language}.`  \n);  \n  \nconst model = new ChatAnthropic({});  \n  \nconst chain = prompt1.pipe(model).pipe(new StringOutputParser());  \n  \nconst combinedChain = RunnableSequence.from([  \n  {  \n    city: chain,  \n    language: (input) => input.language,  \n  },  \n  prompt2,  \n  model,  \n  new StringOutputParser(),  \n]);  \n  \nconst result = await combinedChain.invoke({  \n  person: \"Obama\",  \n  language: \"German\",  \n});  \n  \nconsole.log(result);  \n  \n/*  \n  Chicago befindet sich in den Vereinigten","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/multiple_chains#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":15,"to":50}}}}],["ec86445a-a55d-4c78-b8fe-fe6e29c70353",{"pageContent":"/*  \n  Chicago befindet sich in den Vereinigten Staaten.  \n*/  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/multiple_chains#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":50,"to":53}}}}],["e5591031-0643-4d4d-8803-67b10cd39387",{"pageContent":"#### API Reference:\n\nThe `RunnableSequence` above coerces the object into a `RunnableMap`. Each property in the map receives the same parameters. The runnable or function set as the value of that property is invoked with those parameters, and the return value populates an object which is then passed onto the next runnable in the sequence.\n\n## Passthroughs[​](#passthroughs \"Direct link to Passthroughs\")\n\nIn the example above, we use a passthrough in a runnable map to pass along original input variables to future steps in the chain.\n\nIn general, how exactly you do this depends on what exactly the input is:[Previous\n\nPrompt + LLM](/docs/expression_language/cookbook/prompt_llm_parser)[Next\n\nRetrieval augmented generation (RAG)](/docs/expression_language/cookbook/retrieval)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/multiple_chains#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":55,"to":74}}}}],["3b126203-2155-4313-80f1-b7013ddcc27f",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Multiple chains\n\nRunnables can be used to combine multiple Chains together:\n<details><summary>Interactive tutorial</summary>\n\nThe screencast below interactively walks through an example. You can update and run the code as it's being written in the video!</details>","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/multiple_chains#","loc":{"lines":{"from":1,"to":13}}}}],["0bb7f398-aa40-4751-950a-d8b42a738ff8",{"pageContent":"```typescript\nimport { PromptTemplate } from \"langchain/prompts\";  \nimport { RunnableSequence } from \"langchain/schema/runnable\";  \nimport { StringOutputParser } from \"langchain/schema/output_parser\";  \nimport { ChatAnthropic } from \"langchain/chat_models/anthropic\";  \n  \nconst prompt1 = PromptTemplate.fromTemplate(  \n  `What is the city {person} is from? Only respond with the name of the city.`  \n);  \nconst prompt2 = PromptTemplate.fromTemplate(  \n  `What country is the city {city} in? Respond in {language}.`  \n);  \n  \nconst model = new ChatAnthropic({});  \n  \nconst chain = prompt1.pipe(model).pipe(new StringOutputParser());  \n  \nconst combinedChain = RunnableSequence.from([  \n  {  \n    city: chain,  \n    language: (input) => input.language,  \n  },  \n  prompt2,  \n  model,  \n  new StringOutputParser(),  \n]);  \n  \nconst result = await combinedChain.invoke({  \n  person: \"Obama\",  \n  language: \"German\",  \n});  \n  \nconsole.log(result);  \n  \n/*  \n  Chicago befindet sich in den Vereinigten","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/multiple_chains#","loc":{"lines":{"from":15,"to":50}}}}],["b9421701-a011-4367-8680-f91c0c9344e8",{"pageContent":"/*  \n  Chicago befindet sich in den Vereinigten Staaten.  \n*/  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/multiple_chains#","loc":{"lines":{"from":50,"to":53}}}}],["353b152f-35f5-4ae4-95b3-0915797ca3e7",{"pageContent":"#### API Reference:\n\nThe `RunnableSequence` above coerces the object into a `RunnableMap`. Each property in the map receives the same parameters. The runnable or function set as the value of that property is invoked with those parameters, and the return value populates an object which is then passed onto the next runnable in the sequence.\n\n## Passthroughs[​](#passthroughs \"Direct link to Passthroughs\")\n\nIn the example above, we use a passthrough in a runnable map to pass along original input variables to future steps in the chain.\n\nIn general, how exactly you do this depends on what exactly the input is:[Previous\n\nPrompt + LLM](/docs/expression_language/cookbook/prompt_llm_parser)[Next\n\nRetrieval augmented generation (RAG)](/docs/expression_language/cookbook/retrieval)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/multiple_chains#","loc":{"lines":{"from":55,"to":74}}}}],["911e0bc3-ae1d-4472-aa3a-db3175748196",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# RAG\n\nLet's now look at adding in a retrieval step to a prompt and an LLM, which adds up to a \"retrieval-augmented generation\" chain:\n<details><summary>Interactive tutorial</summary>\n\nThe screencast below interactively walks through an example. You can update and run the code as it's being written in the video!</details>","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/retrieval","loc":{"lines":{"from":1,"to":13}}}}],["43505ae7-c1a3-47e6-8c72-8fb8ca84b15c",{"pageContent":"```typescript\nimport { ChatOpenAI } from \"langchain/chat_models/openai\";  \nimport { HNSWLib } from \"langchain/vectorstores/hnswlib\";  \nimport { OpenAIEmbeddings } from \"langchain/embeddings/openai\";  \nimport { PromptTemplate } from \"langchain/prompts\";  \nimport {  \n  RunnableSequence,  \n  RunnablePassthrough,  \n} from \"langchain/schema/runnable\";  \nimport { StringOutputParser } from \"langchain/schema/output_parser\";  \nimport { formatDocumentsAsString } from \"langchain/util/document\";  \n  \nconst model = new ChatOpenAI({});  \n  \nconst vectorStore = await HNSWLib.fromTexts(  \n  [\"mitochondria is the powerhouse of the cell\"],  \n  [{ id: 1 }],  \n  new OpenAIEmbeddings()  \n);  \nconst retriever = vectorStore.asRetriever();  \n  \nconst prompt =  \n  PromptTemplate.fromTemplate(`Answer the question based only on the following context:  \n{context}  \n  \nQuestion: {question}`);  \n  \nconst chain = RunnableSequence.from([  \n  {  \n    context: retriever.pipe(formatDocumentsAsString),  \n    question:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/retrieval","loc":{"lines":{"from":15,"to":45}}}}],["29039fc6-49f5-4174-9909-c0260a1c18f2",{"pageContent":"er.pipe(formatDocumentsAsString),  \n    question: new RunnablePassthrough(),  \n  },  \n  prompt,  \n  model,  \n  new StringOutputParser(),  \n]);  \n  \nconst result = await chain.invoke(\"What is the powerhouse of the cell?\");  \n  \nconsole.log(result);  \n  \n/*  \n  \"The powerhouse of the cell is the mitochondria.\"  \n*/  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/retrieval","loc":{"lines":{"from":45,"to":60}}}}],["13e89309-ff69-42ea-b2f0-30fd90b2ff75",{"pageContent":"#### API Reference:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/retrieval","loc":{"lines":{"from":62,"to":62}}}}],["712e50a1-5123-4965-988f-769c2144d0fc",{"pageContent":"## Conversational Retrieval Chain[​](#conversational-retrieval-chain \"Direct link to Conversational Retrieval Chain\")\n\nBecause `RunnableSequence.from` and `runnable.pipe` both accept runnable-like objects, including single-argument functions, we can add in conversation history via a formatting function. This allows us to recreate the popular `ConversationalRetrievalQAChain` to \"chat with data\":\n<details><summary>Interactive tutorial</summary>\n\nThe screencast below interactively walks through an example. You can update and run the code as it's being written in the video!</details>","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/retrieval","loc":{"lines":{"from":64,"to":69}}}}],["672b23c0-add8-4532-ae53-584b2601873d",{"pageContent":"```typescript\nimport { PromptTemplate } from \"langchain/prompts\";  \nimport {  \n  RunnableSequence,  \n  RunnablePassthrough,  \n} from \"langchain/schema/runnable\";  \nimport { ChatOpenAI } from \"langchain/chat_models/openai\";  \nimport { HNSWLib } from \"langchain/vectorstores/hnswlib\";  \nimport { OpenAIEmbeddings } from \"langchain/embeddings/openai\";  \nimport { StringOutputParser } from \"langchain/schema/output_parser\";  \nimport { formatDocumentsAsString } from \"langchain/util/document\";  \n  \nconst model = new ChatOpenAI({});  \n  \nconst condenseQuestionTemplate = `Given the following conversation and a follow up question, rephrase the follow up question to be a standalone question, in its original language.  \n  \nChat History:  \n{chat_history}  \nFollow Up Input: {question}  \nStandalone question:`;  \nconst CONDENSE_QUESTION_PROMPT = PromptTemplate.fromTemplate(  \n  condenseQuestionTemplate  \n);  \n  \nconst answerTemplate = `Answer the question based only on the following context:  \n{context","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/retrieval","loc":{"lines":{"from":71,"to":96}}}}],["dc4279a7-6cc7-4194-ae0a-3ba2851461e4",{"pageContent":"on based only on the following context:  \n{context}  \n  \nQuestion: {question}  \n`;  \nconst ANSWER_PROMPT = PromptTemplate.fromTemplate(answerTemplate);  \n  \nconst formatChatHistory = (chatHistory: [string, string][]) => {  \n  const formattedDialogueTurns = chatHistory.map(  \n    (dialogueTurn) => `Human: ${dialogueTurn[0]}\\nAssistant: ${dialogueTurn[1]}`  \n  );  \n  return formattedDialogueTurns.join(\"\\n\");  \n};  \n  \nconst vectorStore = await HNSWLib.fromTexts(  \n  [  \n    \"mitochondria is the powerhouse of the cell\",  \n    \"mitochondria is made of lipids\",  \n  ],  \n  [{ id: 1 }, { id: 2 }],  \n  new OpenAIEmbeddings()  \n);  \nconst retriever = vectorStore.asRetriever();  \n  \ntype ConversationalRetrievalQAChainInput = {  \n  question: string;  \n  chat_history: [string, string][];  \n};  \n  \nconst standaloneQuestionChain = RunnableSequence.from([  \n  {  \n    question: (input: ConversationalRetrievalQAChainInput) => input.question,  \n    chat_history: (input: ConversationalRetrievalQAChainInp","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/retrieval","loc":{"lines":{"from":96,"to":128}}}}],["6b597dad-bf7d-44d3-913f-10ec0ef60d25",{"pageContent":"history: (input: ConversationalRetrievalQAChainInput) =>  \n      formatChatHistory(input.chat_history),  \n  },  \n  CONDENSE_QUESTION_PROMPT,  \n  model,  \n  new StringOutputParser(),  \n]);  \n  \nconst answerChain = RunnableSequence.from([  \n  {  \n    context: retriever.pipe(formatDocumentsAsString),  \n    question: new RunnablePassthrough(),  \n  },  \n  ANSWER_PROMPT,  \n  model,  \n]);  \n  \nconst conversationalRetrievalQAChain =  \n  standaloneQuestionChain.pipe(answerChain);  \n  \nconst result1 = await conversationalRetrievalQAChain.invoke({  \n  question: \"What is the powerhouse of the cell?\",  \n  chat_history: [],  \n});  \nconsole.log(result1);  \n/*  \n  AIMessage { content: \"The powerhouse of the cell is the mitochondria.\" }  \n*/  \n  \nconst result2 = await conversationalRetrievalQAChain.invoke({  \n  question: \"What are they made out of?\",  \n  chat_history: [  \n    [  \n      \"What is the powerhouse of the cell?\",  \n      \"The powerhouse of the cell is the mitochondria.\",  \n    ],  \n  ],  \n})","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/retrieval","loc":{"lines":{"from":128,"to":165}}}}],["ecab2414-38cd-4dcb-a716-a26b49e4fb4d",{"pageContent":"e cell is the mitochondria.\",  \n    ],  \n  ],  \n});  \nconsole.log(result2);  \n/*  \n  AIMessage { content: \"Mitochondria are made out of lipids.\" }  \n*/  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/retrieval","loc":{"lines":{"from":165,"to":173}}}}],["9cdbe674-f637-4374-b371-464e10d6ef41",{"pageContent":"#### API Reference:\n\nNote that the individual chains we created are themselves `Runnables` and can therefore be piped into each other.[Previous\n\nMultiple chains](/docs/expression_language/cookbook/multiple_chains)[Next\n\nQuerying a SQL DB](/docs/expression_language/cookbook/sql_db)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/retrieval","loc":{"lines":{"from":175,"to":188}}}}],["e2efa3ad-3f1a-4b64-8f3d-3ab8f895843f",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# RAG\n\nLet's now look at adding in a retrieval step to a prompt and an LLM, which adds up to a \"retrieval-augmented generation\" chain:\n<details><summary>Interactive tutorial</summary>\n\nThe screencast below interactively walks through an example. You can update and run the code as it's being written in the video!</details>","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/retrieval#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":1,"to":13}}}}],["3c423ec5-d6c2-4cc7-b272-97e103ea1453",{"pageContent":"```typescript\nimport { ChatOpenAI } from \"langchain/chat_models/openai\";  \nimport { HNSWLib } from \"langchain/vectorstores/hnswlib\";  \nimport { OpenAIEmbeddings } from \"langchain/embeddings/openai\";  \nimport { PromptTemplate } from \"langchain/prompts\";  \nimport {  \n  RunnableSequence,  \n  RunnablePassthrough,  \n} from \"langchain/schema/runnable\";  \nimport { StringOutputParser } from \"langchain/schema/output_parser\";  \nimport { formatDocumentsAsString } from \"langchain/util/document\";  \n  \nconst model = new ChatOpenAI({});  \n  \nconst vectorStore = await HNSWLib.fromTexts(  \n  [\"mitochondria is the powerhouse of the cell\"],  \n  [{ id: 1 }],  \n  new OpenAIEmbeddings()  \n);  \nconst retriever = vectorStore.asRetriever();  \n  \nconst prompt =  \n  PromptTemplate.fromTemplate(`Answer the question based only on the following context:  \n{context}  \n  \nQuestion: {question}`);  \n  \nconst chain = RunnableSequence.from([  \n  {  \n    context: retriever.pipe(formatDocumentsAsString),  \n    question:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/retrieval#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":15,"to":45}}}}],["159189aa-4f38-4a6c-b029-394f784dbca8",{"pageContent":"er.pipe(formatDocumentsAsString),  \n    question: new RunnablePassthrough(),  \n  },  \n  prompt,  \n  model,  \n  new StringOutputParser(),  \n]);  \n  \nconst result = await chain.invoke(\"What is the powerhouse of the cell?\");  \n  \nconsole.log(result);  \n  \n/*  \n  \"The powerhouse of the cell is the mitochondria.\"  \n*/  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/retrieval#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":45,"to":60}}}}],["0ed14656-c6e7-4899-91f0-e0c103816024",{"pageContent":"#### API Reference:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/retrieval#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":62,"to":62}}}}],["cf48f7aa-6fc7-4c7f-b1de-a2e5a465f299",{"pageContent":"## Conversational Retrieval Chain[​](#conversational-retrieval-chain \"Direct link to Conversational Retrieval Chain\")\n\nBecause `RunnableSequence.from` and `runnable.pipe` both accept runnable-like objects, including single-argument functions, we can add in conversation history via a formatting function. This allows us to recreate the popular `ConversationalRetrievalQAChain` to \"chat with data\":\n<details><summary>Interactive tutorial</summary>\n\nThe screencast below interactively walks through an example. You can update and run the code as it's being written in the video!</details>","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/retrieval#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":64,"to":69}}}}],["1f9ea8cd-912c-462e-8395-de6e278cce5c",{"pageContent":"```typescript\nimport { PromptTemplate } from \"langchain/prompts\";  \nimport {  \n  RunnableSequence,  \n  RunnablePassthrough,  \n} from \"langchain/schema/runnable\";  \nimport { ChatOpenAI } from \"langchain/chat_models/openai\";  \nimport { HNSWLib } from \"langchain/vectorstores/hnswlib\";  \nimport { OpenAIEmbeddings } from \"langchain/embeddings/openai\";  \nimport { StringOutputParser } from \"langchain/schema/output_parser\";  \nimport { formatDocumentsAsString } from \"langchain/util/document\";  \n  \nconst model = new ChatOpenAI({});  \n  \nconst condenseQuestionTemplate = `Given the following conversation and a follow up question, rephrase the follow up question to be a standalone question, in its original language.  \n  \nChat History:  \n{chat_history}  \nFollow Up Input: {question}  \nStandalone question:`;  \nconst CONDENSE_QUESTION_PROMPT = PromptTemplate.fromTemplate(  \n  condenseQuestionTemplate  \n);  \n  \nconst answerTemplate = `Answer the question based only on the following context:  \n{context","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/retrieval#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":71,"to":96}}}}],["e0517d8b-2ae5-434b-83cb-83bb84664c46",{"pageContent":"on based only on the following context:  \n{context}  \n  \nQuestion: {question}  \n`;  \nconst ANSWER_PROMPT = PromptTemplate.fromTemplate(answerTemplate);  \n  \nconst formatChatHistory = (chatHistory: [string, string][]) => {  \n  const formattedDialogueTurns = chatHistory.map(  \n    (dialogueTurn) => `Human: ${dialogueTurn[0]}\\nAssistant: ${dialogueTurn[1]}`  \n  );  \n  return formattedDialogueTurns.join(\"\\n\");  \n};  \n  \nconst vectorStore = await HNSWLib.fromTexts(  \n  [  \n    \"mitochondria is the powerhouse of the cell\",  \n    \"mitochondria is made of lipids\",  \n  ],  \n  [{ id: 1 }, { id: 2 }],  \n  new OpenAIEmbeddings()  \n);  \nconst retriever = vectorStore.asRetriever();  \n  \ntype ConversationalRetrievalQAChainInput = {  \n  question: string;  \n  chat_history: [string, string][];  \n};  \n  \nconst standaloneQuestionChain = RunnableSequence.from([  \n  {  \n    question: (input: ConversationalRetrievalQAChainInput) => input.question,  \n    chat_history: (input: ConversationalRetrievalQAChainInp","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/retrieval#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":96,"to":128}}}}],["2894a5c2-eaa5-4a33-923f-f9405750c9da",{"pageContent":"history: (input: ConversationalRetrievalQAChainInput) =>  \n      formatChatHistory(input.chat_history),  \n  },  \n  CONDENSE_QUESTION_PROMPT,  \n  model,  \n  new StringOutputParser(),  \n]);  \n  \nconst answerChain = RunnableSequence.from([  \n  {  \n    context: retriever.pipe(formatDocumentsAsString),  \n    question: new RunnablePassthrough(),  \n  },  \n  ANSWER_PROMPT,  \n  model,  \n]);  \n  \nconst conversationalRetrievalQAChain =  \n  standaloneQuestionChain.pipe(answerChain);  \n  \nconst result1 = await conversationalRetrievalQAChain.invoke({  \n  question: \"What is the powerhouse of the cell?\",  \n  chat_history: [],  \n});  \nconsole.log(result1);  \n/*  \n  AIMessage { content: \"The powerhouse of the cell is the mitochondria.\" }  \n*/  \n  \nconst result2 = await conversationalRetrievalQAChain.invoke({  \n  question: \"What are they made out of?\",  \n  chat_history: [  \n    [  \n      \"What is the powerhouse of the cell?\",  \n      \"The powerhouse of the cell is the mitochondria.\",  \n    ],  \n  ],  \n})","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/retrieval#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":128,"to":165}}}}],["83a7b395-a85d-4c6a-b2da-d43f51e4b26e",{"pageContent":"e cell is the mitochondria.\",  \n    ],  \n  ],  \n});  \nconsole.log(result2);  \n/*  \n  AIMessage { content: \"Mitochondria are made out of lipids.\" }  \n*/  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/retrieval#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":165,"to":173}}}}],["8469b2c0-7b01-4222-b2e6-45e2c4598f2f",{"pageContent":"#### API Reference:\n\nNote that the individual chains we created are themselves `Runnables` and can therefore be piped into each other.[Previous\n\nMultiple chains](/docs/expression_language/cookbook/multiple_chains)[Next\n\nQuerying a SQL DB](/docs/expression_language/cookbook/sql_db)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/retrieval#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":175,"to":188}}}}],["8eedfe09-f962-4d0b-b638-587488b4ad6c",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# RAG\n\nLet's now look at adding in a retrieval step to a prompt and an LLM, which adds up to a \"retrieval-augmented generation\" chain:\n<details><summary>Interactive tutorial</summary>\n\nThe screencast below interactively walks through an example. You can update and run the code as it's being written in the video!</details>","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/retrieval#","loc":{"lines":{"from":1,"to":13}}}}],["7966e1b7-0e20-4345-ba11-fef8872f03ad",{"pageContent":"```typescript\nimport { ChatOpenAI } from \"langchain/chat_models/openai\";  \nimport { HNSWLib } from \"langchain/vectorstores/hnswlib\";  \nimport { OpenAIEmbeddings } from \"langchain/embeddings/openai\";  \nimport { PromptTemplate } from \"langchain/prompts\";  \nimport {  \n  RunnableSequence,  \n  RunnablePassthrough,  \n} from \"langchain/schema/runnable\";  \nimport { StringOutputParser } from \"langchain/schema/output_parser\";  \nimport { formatDocumentsAsString } from \"langchain/util/document\";  \n  \nconst model = new ChatOpenAI({});  \n  \nconst vectorStore = await HNSWLib.fromTexts(  \n  [\"mitochondria is the powerhouse of the cell\"],  \n  [{ id: 1 }],  \n  new OpenAIEmbeddings()  \n);  \nconst retriever = vectorStore.asRetriever();  \n  \nconst prompt =  \n  PromptTemplate.fromTemplate(`Answer the question based only on the following context:  \n{context}  \n  \nQuestion: {question}`);  \n  \nconst chain = RunnableSequence.from([  \n  {  \n    context: retriever.pipe(formatDocumentsAsString),  \n    question:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/retrieval#","loc":{"lines":{"from":15,"to":45}}}}],["79700ae8-1876-4cb1-9a6f-b78fda7dac55",{"pageContent":"er.pipe(formatDocumentsAsString),  \n    question: new RunnablePassthrough(),  \n  },  \n  prompt,  \n  model,  \n  new StringOutputParser(),  \n]);  \n  \nconst result = await chain.invoke(\"What is the powerhouse of the cell?\");  \n  \nconsole.log(result);  \n  \n/*  \n  \"The powerhouse of the cell is the mitochondria.\"  \n*/  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/retrieval#","loc":{"lines":{"from":45,"to":60}}}}],["66752702-3cd7-4dad-b65b-e82554fbb546",{"pageContent":"#### API Reference:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/retrieval#","loc":{"lines":{"from":62,"to":62}}}}],["1c33c90b-333f-486f-933c-e2e5f3cbc91d",{"pageContent":"## Conversational Retrieval Chain[​](#conversational-retrieval-chain \"Direct link to Conversational Retrieval Chain\")\n\nBecause `RunnableSequence.from` and `runnable.pipe` both accept runnable-like objects, including single-argument functions, we can add in conversation history via a formatting function. This allows us to recreate the popular `ConversationalRetrievalQAChain` to \"chat with data\":\n<details><summary>Interactive tutorial</summary>\n\nThe screencast below interactively walks through an example. You can update and run the code as it's being written in the video!</details>","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/retrieval#","loc":{"lines":{"from":64,"to":69}}}}],["9611f3cf-bacf-40f9-9ced-616246270883",{"pageContent":"```typescript\nimport { PromptTemplate } from \"langchain/prompts\";  \nimport {  \n  RunnableSequence,  \n  RunnablePassthrough,  \n} from \"langchain/schema/runnable\";  \nimport { ChatOpenAI } from \"langchain/chat_models/openai\";  \nimport { HNSWLib } from \"langchain/vectorstores/hnswlib\";  \nimport { OpenAIEmbeddings } from \"langchain/embeddings/openai\";  \nimport { StringOutputParser } from \"langchain/schema/output_parser\";  \nimport { formatDocumentsAsString } from \"langchain/util/document\";  \n  \nconst model = new ChatOpenAI({});  \n  \nconst condenseQuestionTemplate = `Given the following conversation and a follow up question, rephrase the follow up question to be a standalone question, in its original language.  \n  \nChat History:  \n{chat_history}  \nFollow Up Input: {question}  \nStandalone question:`;  \nconst CONDENSE_QUESTION_PROMPT = PromptTemplate.fromTemplate(  \n  condenseQuestionTemplate  \n);  \n  \nconst answerTemplate = `Answer the question based only on the following context:  \n{context","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/retrieval#","loc":{"lines":{"from":71,"to":96}}}}],["5b51b0c5-80a7-4bb6-a14b-d4daf3370379",{"pageContent":"on based only on the following context:  \n{context}  \n  \nQuestion: {question}  \n`;  \nconst ANSWER_PROMPT = PromptTemplate.fromTemplate(answerTemplate);  \n  \nconst formatChatHistory = (chatHistory: [string, string][]) => {  \n  const formattedDialogueTurns = chatHistory.map(  \n    (dialogueTurn) => `Human: ${dialogueTurn[0]}\\nAssistant: ${dialogueTurn[1]}`  \n  );  \n  return formattedDialogueTurns.join(\"\\n\");  \n};  \n  \nconst vectorStore = await HNSWLib.fromTexts(  \n  [  \n    \"mitochondria is the powerhouse of the cell\",  \n    \"mitochondria is made of lipids\",  \n  ],  \n  [{ id: 1 }, { id: 2 }],  \n  new OpenAIEmbeddings()  \n);  \nconst retriever = vectorStore.asRetriever();  \n  \ntype ConversationalRetrievalQAChainInput = {  \n  question: string;  \n  chat_history: [string, string][];  \n};  \n  \nconst standaloneQuestionChain = RunnableSequence.from([  \n  {  \n    question: (input: ConversationalRetrievalQAChainInput) => input.question,  \n    chat_history: (input: ConversationalRetrievalQAChainInp","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/retrieval#","loc":{"lines":{"from":96,"to":128}}}}],["1c0d286e-3cc0-4209-b841-770ef05f2163",{"pageContent":"history: (input: ConversationalRetrievalQAChainInput) =>  \n      formatChatHistory(input.chat_history),  \n  },  \n  CONDENSE_QUESTION_PROMPT,  \n  model,  \n  new StringOutputParser(),  \n]);  \n  \nconst answerChain = RunnableSequence.from([  \n  {  \n    context: retriever.pipe(formatDocumentsAsString),  \n    question: new RunnablePassthrough(),  \n  },  \n  ANSWER_PROMPT,  \n  model,  \n]);  \n  \nconst conversationalRetrievalQAChain =  \n  standaloneQuestionChain.pipe(answerChain);  \n  \nconst result1 = await conversationalRetrievalQAChain.invoke({  \n  question: \"What is the powerhouse of the cell?\",  \n  chat_history: [],  \n});  \nconsole.log(result1);  \n/*  \n  AIMessage { content: \"The powerhouse of the cell is the mitochondria.\" }  \n*/  \n  \nconst result2 = await conversationalRetrievalQAChain.invoke({  \n  question: \"What are they made out of?\",  \n  chat_history: [  \n    [  \n      \"What is the powerhouse of the cell?\",  \n      \"The powerhouse of the cell is the mitochondria.\",  \n    ],  \n  ],  \n})","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/retrieval#","loc":{"lines":{"from":128,"to":165}}}}],["8abbadcc-238b-4951-9f27-c2e6b9e874a7",{"pageContent":"e cell is the mitochondria.\",  \n    ],  \n  ],  \n});  \nconsole.log(result2);  \n/*  \n  AIMessage { content: \"Mitochondria are made out of lipids.\" }  \n*/  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/retrieval#","loc":{"lines":{"from":165,"to":173}}}}],["539ed202-d1b8-4c5d-bff7-0ac93bf79ba3",{"pageContent":"#### API Reference:\n\nNote that the individual chains we created are themselves `Runnables` and can therefore be piped into each other.[Previous\n\nMultiple chains](/docs/expression_language/cookbook/multiple_chains)[Next\n\nQuerying a SQL DB](/docs/expression_language/cookbook/sql_db)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/retrieval#","loc":{"lines":{"from":175,"to":188}}}}],["53b68c0e-85ca-4a18-8b0c-6cefb730c50f",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Querying a SQL DB\n\nWe can replicate our SQLDatabaseChain with Runnables.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/sql_db","loc":{"lines":{"from":1,"to":10}}}}],["d8918a6c-ec50-428c-b015-3e616168f513",{"pageContent":"## Setup[​](#setup \"Direct link to Setup\")\n\nWe'll need the Chinook sample DB for this example.\n\nFirst install `typeorm`:\n\n* npm\n* Yarn\n* pnpm\n\n```bash\nnpm install typeorm  \n```\n\n```bash\nyarn add typeorm  \n```\n\n```bash\npnpm add typeorm  \n```\n\nThen install the dependencies needed for your database. For example, for SQLite:\n\n* npm\n* Yarn\n* pnpm\n\n```bash\nnpm install sqlite3  \n```\n\n```bash\nyarn add sqlite3  \n```\n\n```bash\npnpm add sqlite3  \n```\n\nFor other databases see [https://typeorm.io/#installation](https://typeorm.io/#installation).\n\nFinally follow the instructions on [https://database.guide/2-sample-databases-sqlite/](https://database.guide/2-sample-databases-sqlite/) to get the sample database for this example.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/sql_db","loc":{"lines":{"from":12,"to":54}}}}],["b944434a-ce9f-481d-b1d5-31e9f843953f",{"pageContent":"## Composition[​](#composition \"Direct link to Composition\")","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/sql_db","loc":{"lines":{"from":56,"to":56}}}}],["d5e9a123-5515-4c40-8b01-2d82751da04b",{"pageContent":"```typescript\nimport { DataSource } from \"typeorm\";  \nimport { SqlDatabase } from \"langchain/sql_db\";  \nimport {  \n  RunnablePassthrough,  \n  RunnableSequence,  \n} from \"langchain/schema/runnable\";  \nimport { PromptTemplate } from \"langchain/prompts\";  \nimport { StringOutputParser } from \"langchain/schema/output_parser\";  \nimport { ChatOpenAI } from \"langchain/chat_models/openai\";  \n  \nconst datasource = new DataSource({  \n  type: \"sqlite\",  \n  database: \"Chinook.db\",  \n});  \n  \nconst db = await SqlDatabase.fromDataSourceParams({  \n  appDataSource: datasource,  \n});  \n  \nconst prompt =  \n  PromptTemplate.fromTemplate(`Based on the table schema below, write a SQL query that would answer the user's question:  \n{schema}  \n  \nQuestion: {question}  \nSQL Query:`);  \n  \nconst model = new ChatOpenAI();  \n  \n// The `RunnablePassthrough.assign()` is used here to passthrough the input from the `.invoke()`  \n// call (in this example it's the question), along with any inputs passed to the `.assig","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/sql_db","loc":{"lines":{"from":58,"to":88}}}}],["005bab54-ae9f-43ee-a4f5-b46b900aa046",{"pageContent":"tion), along with any inputs passed to the `.assign()` method.  \n// In this case, we're passing the schema.  \nconst sqlQueryGeneratorChain = RunnableSequence.from([  \n  RunnablePassthrough.assign({  \n    schema: async () => db.getTableInfo(),  \n  }),  \n  prompt,  \n  model.bind({ stop: [\"\\nSQLResult:\"] }),  \n  new StringOutputParser(),  \n]);  \n  \nconst result = await sqlQueryGeneratorChain.invoke({  \n  question: \"How many employees are there?\",  \n});  \n  \nconsole.log({  \n  result,  \n});  \n  \n/*  \n  {  \n    result: \"SELECT COUNT(EmployeeId) AS TotalEmployees FROM Employee\"  \n  }  \n*/  \n  \nconst finalResponsePrompt =  \n  PromptTemplate.fromTemplate(`Based on the table schema below, question, sql query, and sql response, write a natural language response:  \n{schema}  \n  \nQuestion: {question}  \nSQL Query: {query}  \nSQL Response: {response}`);  \n  \nconst fullChain = RunnableSequence.from([  \n  RunnablePassthrough.assign({  \n    query: sqlQueryGeneratorChain,  \n  }),  \n  {  \n    schema: async","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/sql_db","loc":{"lines":{"from":88,"to":126}}}}],["028bb44a-7ddf-4160-9d62-af3d9bf585f0",{"pageContent":"yGeneratorChain,  \n  }),  \n  {  \n    schema: async () => db.getTableInfo(),  \n    question: (input) => input.question,  \n    query: (input) => input.query,  \n    response: (input) => db.run(input.query),  \n  },  \n  finalResponsePrompt,  \n  model,  \n]);  \n  \nconst finalResponse = await fullChain.invoke({  \n  question: \"How many employees are there?\",  \n});  \n  \nconsole.log(finalResponse);  \n  \n/*  \n  AIMessage {  \n    content: 'There are 8 employees.',  \n    additional_kwargs: { function_call: undefined }  \n  }  \n*/  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/sql_db","loc":{"lines":{"from":126,"to":150}}}}],["c9bd16fd-3c40-4f13-b686-12552ce615f4",{"pageContent":"#### API Reference:[Previous\n\nRetrieval augmented generation (RAG)](/docs/expression_language/cookbook/retrieval)[Next\n\nAdding memory](/docs/expression_language/cookbook/adding_memory)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/sql_db","loc":{"lines":{"from":152,"to":163}}}}],["d12ce84d-09ed-4ecb-9e9b-338508b53c03",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Querying a SQL DB\n\nWe can replicate our SQLDatabaseChain with Runnables.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/sql_db#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":1,"to":10}}}}],["86cef67e-46db-4a99-af91-8ef161f993bc",{"pageContent":"## Setup[​](#setup \"Direct link to Setup\")\n\nWe'll need the Chinook sample DB for this example.\n\nFirst install `typeorm`:\n\n* npm\n* Yarn\n* pnpm\n\n```bash\nnpm install typeorm  \n```\n\n```bash\nyarn add typeorm  \n```\n\n```bash\npnpm add typeorm  \n```\n\nThen install the dependencies needed for your database. For example, for SQLite:\n\n* npm\n* Yarn\n* pnpm\n\n```bash\nnpm install sqlite3  \n```\n\n```bash\nyarn add sqlite3  \n```\n\n```bash\npnpm add sqlite3  \n```\n\nFor other databases see [https://typeorm.io/#installation](https://typeorm.io/#installation).\n\nFinally follow the instructions on [https://database.guide/2-sample-databases-sqlite/](https://database.guide/2-sample-databases-sqlite/) to get the sample database for this example.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/sql_db#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":12,"to":54}}}}],["43019dbe-7102-497f-bc16-9ea291893864",{"pageContent":"## Composition[​](#composition \"Direct link to Composition\")","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/sql_db#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":56,"to":56}}}}],["66b9d5fe-1e49-4978-a877-16b85bdfc8f5",{"pageContent":"```typescript\nimport { DataSource } from \"typeorm\";  \nimport { SqlDatabase } from \"langchain/sql_db\";  \nimport {  \n  RunnablePassthrough,  \n  RunnableSequence,  \n} from \"langchain/schema/runnable\";  \nimport { PromptTemplate } from \"langchain/prompts\";  \nimport { StringOutputParser } from \"langchain/schema/output_parser\";  \nimport { ChatOpenAI } from \"langchain/chat_models/openai\";  \n  \nconst datasource = new DataSource({  \n  type: \"sqlite\",  \n  database: \"Chinook.db\",  \n});  \n  \nconst db = await SqlDatabase.fromDataSourceParams({  \n  appDataSource: datasource,  \n});  \n  \nconst prompt =  \n  PromptTemplate.fromTemplate(`Based on the table schema below, write a SQL query that would answer the user's question:  \n{schema}  \n  \nQuestion: {question}  \nSQL Query:`);  \n  \nconst model = new ChatOpenAI();  \n  \n// The `RunnablePassthrough.assign()` is used here to passthrough the input from the `.invoke()`  \n// call (in this example it's the question), along with any inputs passed to the `.assig","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/sql_db#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":58,"to":88}}}}],["09169967-bdf1-48a4-8003-734926515e3c",{"pageContent":"tion), along with any inputs passed to the `.assign()` method.  \n// In this case, we're passing the schema.  \nconst sqlQueryGeneratorChain = RunnableSequence.from([  \n  RunnablePassthrough.assign({  \n    schema: async () => db.getTableInfo(),  \n  }),  \n  prompt,  \n  model.bind({ stop: [\"\\nSQLResult:\"] }),  \n  new StringOutputParser(),  \n]);  \n  \nconst result = await sqlQueryGeneratorChain.invoke({  \n  question: \"How many employees are there?\",  \n});  \n  \nconsole.log({  \n  result,  \n});  \n  \n/*  \n  {  \n    result: \"SELECT COUNT(EmployeeId) AS TotalEmployees FROM Employee\"  \n  }  \n*/  \n  \nconst finalResponsePrompt =  \n  PromptTemplate.fromTemplate(`Based on the table schema below, question, sql query, and sql response, write a natural language response:  \n{schema}  \n  \nQuestion: {question}  \nSQL Query: {query}  \nSQL Response: {response}`);  \n  \nconst fullChain = RunnableSequence.from([  \n  RunnablePassthrough.assign({  \n    query: sqlQueryGeneratorChain,  \n  }),  \n  {  \n    schema: async","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/sql_db#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":88,"to":126}}}}],["5f89bd67-2a37-4cb5-b079-a6c1a2423653",{"pageContent":"yGeneratorChain,  \n  }),  \n  {  \n    schema: async () => db.getTableInfo(),  \n    question: (input) => input.question,  \n    query: (input) => input.query,  \n    response: (input) => db.run(input.query),  \n  },  \n  finalResponsePrompt,  \n  model,  \n]);  \n  \nconst finalResponse = await fullChain.invoke({  \n  question: \"How many employees are there?\",  \n});  \n  \nconsole.log(finalResponse);  \n  \n/*  \n  AIMessage {  \n    content: 'There are 8 employees.',  \n    additional_kwargs: { function_call: undefined }  \n  }  \n*/  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/sql_db#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":126,"to":150}}}}],["4f043117-05c0-45fe-a8b5-dee481854e9a",{"pageContent":"#### API Reference:[Previous\n\nRetrieval augmented generation (RAG)](/docs/expression_language/cookbook/retrieval)[Next\n\nAdding memory](/docs/expression_language/cookbook/adding_memory)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/sql_db#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":152,"to":163}}}}],["bb8f733a-bfd6-4045-a5cd-0294b0a050d2",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Querying a SQL DB\n\nWe can replicate our SQLDatabaseChain with Runnables.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/sql_db#","loc":{"lines":{"from":1,"to":10}}}}],["c013905f-d789-4e82-ac5f-0e264d683cfe",{"pageContent":"## Setup[​](#setup \"Direct link to Setup\")\n\nWe'll need the Chinook sample DB for this example.\n\nFirst install `typeorm`:\n\n* npm\n* Yarn\n* pnpm\n\n```bash\nnpm install typeorm  \n```\n\n```bash\nyarn add typeorm  \n```\n\n```bash\npnpm add typeorm  \n```\n\nThen install the dependencies needed for your database. For example, for SQLite:\n\n* npm\n* Yarn\n* pnpm\n\n```bash\nnpm install sqlite3  \n```\n\n```bash\nyarn add sqlite3  \n```\n\n```bash\npnpm add sqlite3  \n```\n\nFor other databases see [https://typeorm.io/#installation](https://typeorm.io/#installation).\n\nFinally follow the instructions on [https://database.guide/2-sample-databases-sqlite/](https://database.guide/2-sample-databases-sqlite/) to get the sample database for this example.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/sql_db#","loc":{"lines":{"from":12,"to":54}}}}],["3f9db7cd-a6f6-46be-b01b-c855a16d8e8f",{"pageContent":"## Composition[​](#composition \"Direct link to Composition\")","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/sql_db#","loc":{"lines":{"from":56,"to":56}}}}],["18550b03-e393-44ef-85a4-5466dbdd1a70",{"pageContent":"```typescript\nimport { DataSource } from \"typeorm\";  \nimport { SqlDatabase } from \"langchain/sql_db\";  \nimport {  \n  RunnablePassthrough,  \n  RunnableSequence,  \n} from \"langchain/schema/runnable\";  \nimport { PromptTemplate } from \"langchain/prompts\";  \nimport { StringOutputParser } from \"langchain/schema/output_parser\";  \nimport { ChatOpenAI } from \"langchain/chat_models/openai\";  \n  \nconst datasource = new DataSource({  \n  type: \"sqlite\",  \n  database: \"Chinook.db\",  \n});  \n  \nconst db = await SqlDatabase.fromDataSourceParams({  \n  appDataSource: datasource,  \n});  \n  \nconst prompt =  \n  PromptTemplate.fromTemplate(`Based on the table schema below, write a SQL query that would answer the user's question:  \n{schema}  \n  \nQuestion: {question}  \nSQL Query:`);  \n  \nconst model = new ChatOpenAI();  \n  \n// The `RunnablePassthrough.assign()` is used here to passthrough the input from the `.invoke()`  \n// call (in this example it's the question), along with any inputs passed to the `.assig","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/sql_db#","loc":{"lines":{"from":58,"to":88}}}}],["a3392bf7-aa38-42b4-b721-96e87490b234",{"pageContent":"tion), along with any inputs passed to the `.assign()` method.  \n// In this case, we're passing the schema.  \nconst sqlQueryGeneratorChain = RunnableSequence.from([  \n  RunnablePassthrough.assign({  \n    schema: async () => db.getTableInfo(),  \n  }),  \n  prompt,  \n  model.bind({ stop: [\"\\nSQLResult:\"] }),  \n  new StringOutputParser(),  \n]);  \n  \nconst result = await sqlQueryGeneratorChain.invoke({  \n  question: \"How many employees are there?\",  \n});  \n  \nconsole.log({  \n  result,  \n});  \n  \n/*  \n  {  \n    result: \"SELECT COUNT(EmployeeId) AS TotalEmployees FROM Employee\"  \n  }  \n*/  \n  \nconst finalResponsePrompt =  \n  PromptTemplate.fromTemplate(`Based on the table schema below, question, sql query, and sql response, write a natural language response:  \n{schema}  \n  \nQuestion: {question}  \nSQL Query: {query}  \nSQL Response: {response}`);  \n  \nconst fullChain = RunnableSequence.from([  \n  RunnablePassthrough.assign({  \n    query: sqlQueryGeneratorChain,  \n  }),  \n  {  \n    schema: async","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/sql_db#","loc":{"lines":{"from":88,"to":126}}}}],["04394428-379b-4845-809e-d6b7627be197",{"pageContent":"yGeneratorChain,  \n  }),  \n  {  \n    schema: async () => db.getTableInfo(),  \n    question: (input) => input.question,  \n    query: (input) => input.query,  \n    response: (input) => db.run(input.query),  \n  },  \n  finalResponsePrompt,  \n  model,  \n]);  \n  \nconst finalResponse = await fullChain.invoke({  \n  question: \"How many employees are there?\",  \n});  \n  \nconsole.log(finalResponse);  \n  \n/*  \n  AIMessage {  \n    content: 'There are 8 employees.',  \n    additional_kwargs: { function_call: undefined }  \n  }  \n*/  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/sql_db#","loc":{"lines":{"from":126,"to":150}}}}],["2ffd8d70-04c3-4173-9526-cd35acba31c5",{"pageContent":"#### API Reference:[Previous\n\nRetrieval augmented generation (RAG)](/docs/expression_language/cookbook/retrieval)[Next\n\nAdding memory](/docs/expression_language/cookbook/adding_memory)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/sql_db#","loc":{"lines":{"from":152,"to":163}}}}],["42dc73eb-89c9-4bbc-997f-292ef37089f3",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Adding memory\n\nThis shows how to add memory to an arbitrary chain. Right now, you can use the memory classes but need to hook them up manually.\n<details><summary>Interactive tutorial</summary>\n\nThe screencast below interactively walks through an example of memory management. You can update and run the code as it's being written in the video!</details>","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/adding_memory","loc":{"lines":{"from":1,"to":13}}}}],["64fe127a-4d3e-4f2b-b5e3-aabcf427437d",{"pageContent":"```typescript\nimport { ChatPromptTemplate, MessagesPlaceholder } from \"langchain/prompts\";  \nimport { RunnableSequence } from \"langchain/schema/runnable\";  \nimport { ChatAnthropic } from \"langchain/chat_models/anthropic\";  \nimport { BufferMemory } from \"langchain/memory\";  \n  \nconst model = new ChatAnthropic();  \nconst prompt = ChatPromptTemplate.fromMessages([  \n  [\"system\", \"You are a helpful chatbot\"],  \n  new MessagesPlaceholder(\"history\"),  \n  [\"human\", \"{input}\"],  \n]);  \n  \n// Default \"inputKey\", \"outputKey\", and \"memoryKey values would work here  \n// but we specify them for clarity.  \nconst memory = new BufferMemory({  \n  returnMessages: true,  \n  inputKey: \"input\",  \n  outputKey: \"output\",  \n  memoryKey: \"history\",  \n});  \n  \nconsole.log(await memory.loadMemoryVariables({}));  \n  \n/*  \n  { history: [] }  \n*/  \n  \nconst chain = RunnableSequence.from([  \n  {  \n    input: (initialInput) => initialInput.input,  \n    memory: () => memory.loadMemoryVariables({}),  \n  },  \n  {","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/adding_memory","loc":{"lines":{"from":15,"to":48}}}}],["c772c370-529d-411f-9dfc-2604f895f1ac",{"pageContent":"memory.loadMemoryVariables({}),  \n  },  \n  {  \n    input: (previousOutput) => previousOutput.input,  \n    history: (previousOutput) => previousOutput.memory.history,  \n  },  \n  prompt,  \n  model,  \n]);  \n  \nconst inputs = {  \n  input: \"Hey, I'm Bob!\",  \n};  \n  \nconst response = await chain.invoke(inputs);  \n  \nconsole.log(response);  \n  \n/*  \n  AIMessage {  \n    content: \" Hi Bob, nice to meet you! I'm Claude, an AI assistant created by Anthropic to be helpful, harmless, and honest.\",  \n    additional_kwargs: {}  \n  }  \n*/  \n  \nawait memory.saveContext(inputs, {  \n  output: response.content,  \n});  \n  \nconsole.log(await memory.loadMemoryVariables({}));  \n  \n/*  \n  {  \n    history: [  \n      HumanMessage {  \n        content: \"Hey, I'm Bob!\",  \n        additional_kwargs: {}  \n      },  \n      AIMessage {  \n        content: \" Hi Bob, nice to meet you! I'm Claude, an AI assistant created by Anthropic to be helpful, harmless, and honest.\",  \n        additional_kwargs: {}  \n      }  \n    ]","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/adding_memory","loc":{"lines":{"from":48,"to":90}}}}],["a322a70b-cf2b-4d92-9956-b036fcf6b3a2",{"pageContent":"additional_kwargs: {}  \n      }  \n    ]  \n  }  \n*/  \n  \nconst inputs2 = {  \n  input: \"What's my name?\",  \n};  \n  \nconst response2 = await chain.invoke(inputs2);  \n  \nconsole.log(response2);  \n  \n/*  \n  AIMessage {  \n    content: ' You told me your name is Bob.',  \n    additional_kwargs: {}  \n  }  \n*/  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/adding_memory","loc":{"lines":{"from":90,"to":110}}}}],["14c850da-be7e-4d4b-8882-e80a0b27be7c",{"pageContent":"#### API Reference:[Previous\n\nQuerying a SQL DB](/docs/expression_language/cookbook/sql_db)[Next\n\nUsing tools](/docs/expression_language/cookbook/tools)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/adding_memory","loc":{"lines":{"from":112,"to":123}}}}],["d1b42a0f-d633-4c45-9b2d-23b69089ab27",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Adding memory\n\nThis shows how to add memory to an arbitrary chain. Right now, you can use the memory classes but need to hook them up manually.\n<details><summary>Interactive tutorial</summary>\n\nThe screencast below interactively walks through an example of memory management. You can update and run the code as it's being written in the video!</details>","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/adding_memory#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":1,"to":13}}}}],["c2860a88-be74-4b4e-8178-8521c3861f53",{"pageContent":"```typescript\nimport { ChatPromptTemplate, MessagesPlaceholder } from \"langchain/prompts\";  \nimport { RunnableSequence } from \"langchain/schema/runnable\";  \nimport { ChatAnthropic } from \"langchain/chat_models/anthropic\";  \nimport { BufferMemory } from \"langchain/memory\";  \n  \nconst model = new ChatAnthropic();  \nconst prompt = ChatPromptTemplate.fromMessages([  \n  [\"system\", \"You are a helpful chatbot\"],  \n  new MessagesPlaceholder(\"history\"),  \n  [\"human\", \"{input}\"],  \n]);  \n  \n// Default \"inputKey\", \"outputKey\", and \"memoryKey values would work here  \n// but we specify them for clarity.  \nconst memory = new BufferMemory({  \n  returnMessages: true,  \n  inputKey: \"input\",  \n  outputKey: \"output\",  \n  memoryKey: \"history\",  \n});  \n  \nconsole.log(await memory.loadMemoryVariables({}));  \n  \n/*  \n  { history: [] }  \n*/  \n  \nconst chain = RunnableSequence.from([  \n  {  \n    input: (initialInput) => initialInput.input,  \n    memory: () => memory.loadMemoryVariables({}),  \n  },  \n  {","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/adding_memory#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":15,"to":48}}}}],["22622a9b-6c7d-4426-a647-f9fa7aff8bfc",{"pageContent":"memory.loadMemoryVariables({}),  \n  },  \n  {  \n    input: (previousOutput) => previousOutput.input,  \n    history: (previousOutput) => previousOutput.memory.history,  \n  },  \n  prompt,  \n  model,  \n]);  \n  \nconst inputs = {  \n  input: \"Hey, I'm Bob!\",  \n};  \n  \nconst response = await chain.invoke(inputs);  \n  \nconsole.log(response);  \n  \n/*  \n  AIMessage {  \n    content: \" Hi Bob, nice to meet you! I'm Claude, an AI assistant created by Anthropic to be helpful, harmless, and honest.\",  \n    additional_kwargs: {}  \n  }  \n*/  \n  \nawait memory.saveContext(inputs, {  \n  output: response.content,  \n});  \n  \nconsole.log(await memory.loadMemoryVariables({}));  \n  \n/*  \n  {  \n    history: [  \n      HumanMessage {  \n        content: \"Hey, I'm Bob!\",  \n        additional_kwargs: {}  \n      },  \n      AIMessage {  \n        content: \" Hi Bob, nice to meet you! I'm Claude, an AI assistant created by Anthropic to be helpful, harmless, and honest.\",  \n        additional_kwargs: {}  \n      }  \n    ]","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/adding_memory#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":48,"to":90}}}}],["4b5fd18f-d68c-4073-808a-3d6644299374",{"pageContent":"additional_kwargs: {}  \n      }  \n    ]  \n  }  \n*/  \n  \nconst inputs2 = {  \n  input: \"What's my name?\",  \n};  \n  \nconst response2 = await chain.invoke(inputs2);  \n  \nconsole.log(response2);  \n  \n/*  \n  AIMessage {  \n    content: ' You told me your name is Bob.',  \n    additional_kwargs: {}  \n  }  \n*/  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/adding_memory#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":90,"to":110}}}}],["0f2855bd-b5ad-40c2-81ea-ac9bb695f264",{"pageContent":"#### API Reference:[Previous\n\nQuerying a SQL DB](/docs/expression_language/cookbook/sql_db)[Next\n\nUsing tools](/docs/expression_language/cookbook/tools)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/adding_memory#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":112,"to":123}}}}],["3c298ea6-0a3c-422a-9818-90530e59f626",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Adding memory\n\nThis shows how to add memory to an arbitrary chain. Right now, you can use the memory classes but need to hook them up manually.\n<details><summary>Interactive tutorial</summary>\n\nThe screencast below interactively walks through an example of memory management. You can update and run the code as it's being written in the video!</details>","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/adding_memory#","loc":{"lines":{"from":1,"to":13}}}}],["5169c3d1-21f3-4a08-b9f1-93d8fe2543e9",{"pageContent":"```typescript\nimport { ChatPromptTemplate, MessagesPlaceholder } from \"langchain/prompts\";  \nimport { RunnableSequence } from \"langchain/schema/runnable\";  \nimport { ChatAnthropic } from \"langchain/chat_models/anthropic\";  \nimport { BufferMemory } from \"langchain/memory\";  \n  \nconst model = new ChatAnthropic();  \nconst prompt = ChatPromptTemplate.fromMessages([  \n  [\"system\", \"You are a helpful chatbot\"],  \n  new MessagesPlaceholder(\"history\"),  \n  [\"human\", \"{input}\"],  \n]);  \n  \n// Default \"inputKey\", \"outputKey\", and \"memoryKey values would work here  \n// but we specify them for clarity.  \nconst memory = new BufferMemory({  \n  returnMessages: true,  \n  inputKey: \"input\",  \n  outputKey: \"output\",  \n  memoryKey: \"history\",  \n});  \n  \nconsole.log(await memory.loadMemoryVariables({}));  \n  \n/*  \n  { history: [] }  \n*/  \n  \nconst chain = RunnableSequence.from([  \n  {  \n    input: (initialInput) => initialInput.input,  \n    memory: () => memory.loadMemoryVariables({}),  \n  },  \n  {","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/adding_memory#","loc":{"lines":{"from":15,"to":48}}}}],["ef31a5e9-d9f6-433a-a503-f13ff967b40c",{"pageContent":"memory.loadMemoryVariables({}),  \n  },  \n  {  \n    input: (previousOutput) => previousOutput.input,  \n    history: (previousOutput) => previousOutput.memory.history,  \n  },  \n  prompt,  \n  model,  \n]);  \n  \nconst inputs = {  \n  input: \"Hey, I'm Bob!\",  \n};  \n  \nconst response = await chain.invoke(inputs);  \n  \nconsole.log(response);  \n  \n/*  \n  AIMessage {  \n    content: \" Hi Bob, nice to meet you! I'm Claude, an AI assistant created by Anthropic to be helpful, harmless, and honest.\",  \n    additional_kwargs: {}  \n  }  \n*/  \n  \nawait memory.saveContext(inputs, {  \n  output: response.content,  \n});  \n  \nconsole.log(await memory.loadMemoryVariables({}));  \n  \n/*  \n  {  \n    history: [  \n      HumanMessage {  \n        content: \"Hey, I'm Bob!\",  \n        additional_kwargs: {}  \n      },  \n      AIMessage {  \n        content: \" Hi Bob, nice to meet you! I'm Claude, an AI assistant created by Anthropic to be helpful, harmless, and honest.\",  \n        additional_kwargs: {}  \n      }  \n    ]","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/adding_memory#","loc":{"lines":{"from":48,"to":90}}}}],["7d161d96-c25c-40fe-92ad-f4220ea42340",{"pageContent":"additional_kwargs: {}  \n      }  \n    ]  \n  }  \n*/  \n  \nconst inputs2 = {  \n  input: \"What's my name?\",  \n};  \n  \nconst response2 = await chain.invoke(inputs2);  \n  \nconsole.log(response2);  \n  \n/*  \n  AIMessage {  \n    content: ' You told me your name is Bob.',  \n    additional_kwargs: {}  \n  }  \n*/  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/adding_memory#","loc":{"lines":{"from":90,"to":110}}}}],["facb7896-664c-4c9d-935f-62608bbf6183",{"pageContent":"#### API Reference:[Previous\n\nQuerying a SQL DB](/docs/expression_language/cookbook/sql_db)[Next\n\nUsing tools](/docs/expression_language/cookbook/tools)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/adding_memory#","loc":{"lines":{"from":112,"to":123}}}}],["9dc037b4-388c-4437-8f5c-7c62ba6e4501",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Using tools\n\nTools are also runnables, and can therefore be used within a chain:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/tools","loc":{"lines":{"from":1,"to":10}}}}],["91644215-4b2f-4795-9c99-bdc7b8f0dbb7",{"pageContent":"```typescript\nimport { SerpAPI } from \"langchain/tools\";  \nimport { ChatAnthropic } from \"langchain/chat_models/anthropic\";  \nimport { PromptTemplate } from \"langchain/prompts\";  \nimport { StringOutputParser } from \"langchain/schema/output_parser\";  \n  \nconst search = new SerpAPI();  \n  \nconst prompt =  \n  PromptTemplate.fromTemplate(`Turn the following user input into a search query for a search engine:  \n  \n{input}`);  \n  \nconst model = new ChatAnthropic({});  \n  \nconst chain = prompt.pipe(model).pipe(new StringOutputParser()).pipe(search);  \n  \nconst result = await chain.invoke({  \n  input: \"Who is the current prime minister of Malaysia?\",  \n});  \n  \nconsole.log(result);  \n/*  \n  Anwar Ibrahim  \n*/  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/tools","loc":{"lines":{"from":12,"to":37}}}}],["65810873-0c64-43c0-8fc1-31eca5747d2d",{"pageContent":"#### API Reference:[Previous\n\nAdding memory](/docs/expression_language/cookbook/adding_memory)[Next\n\nAgents](/docs/expression_language/cookbook/agents)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/tools","loc":{"lines":{"from":39,"to":50}}}}],["c1280c70-d55b-4301-896b-7c301cb31a19",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Using tools\n\nTools are also runnables, and can therefore be used within a chain:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/tools#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":1,"to":10}}}}],["70bfb049-8819-4d67-9f99-42d4ab80385d",{"pageContent":"```typescript\nimport { SerpAPI } from \"langchain/tools\";  \nimport { ChatAnthropic } from \"langchain/chat_models/anthropic\";  \nimport { PromptTemplate } from \"langchain/prompts\";  \nimport { StringOutputParser } from \"langchain/schema/output_parser\";  \n  \nconst search = new SerpAPI();  \n  \nconst prompt =  \n  PromptTemplate.fromTemplate(`Turn the following user input into a search query for a search engine:  \n  \n{input}`);  \n  \nconst model = new ChatAnthropic({});  \n  \nconst chain = prompt.pipe(model).pipe(new StringOutputParser()).pipe(search);  \n  \nconst result = await chain.invoke({  \n  input: \"Who is the current prime minister of Malaysia?\",  \n});  \n  \nconsole.log(result);  \n/*  \n  Anwar Ibrahim  \n*/  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/tools#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":12,"to":37}}}}],["35ebe43f-ea4f-4793-bd6b-45da739c6597",{"pageContent":"#### API Reference:[Previous\n\nAdding memory](/docs/expression_language/cookbook/adding_memory)[Next\n\nAgents](/docs/expression_language/cookbook/agents)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/tools#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":39,"to":50}}}}],["849e8156-ac54-420e-9fc1-ecb6d82cf540",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Using tools\n\nTools are also runnables, and can therefore be used within a chain:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/tools#","loc":{"lines":{"from":1,"to":10}}}}],["dc4b8a51-3169-4862-9bad-a68674f8effc",{"pageContent":"```typescript\nimport { SerpAPI } from \"langchain/tools\";  \nimport { ChatAnthropic } from \"langchain/chat_models/anthropic\";  \nimport { PromptTemplate } from \"langchain/prompts\";  \nimport { StringOutputParser } from \"langchain/schema/output_parser\";  \n  \nconst search = new SerpAPI();  \n  \nconst prompt =  \n  PromptTemplate.fromTemplate(`Turn the following user input into a search query for a search engine:  \n  \n{input}`);  \n  \nconst model = new ChatAnthropic({});  \n  \nconst chain = prompt.pipe(model).pipe(new StringOutputParser()).pipe(search);  \n  \nconst result = await chain.invoke({  \n  input: \"Who is the current prime minister of Malaysia?\",  \n});  \n  \nconsole.log(result);  \n/*  \n  Anwar Ibrahim  \n*/  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/tools#","loc":{"lines":{"from":12,"to":37}}}}],["865a323a-d992-4b89-8492-81fcfa912e9b",{"pageContent":"#### API Reference:[Previous\n\nAdding memory](/docs/expression_language/cookbook/adding_memory)[Next\n\nAgents](/docs/expression_language/cookbook/agents)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/tools#","loc":{"lines":{"from":39,"to":50}}}}],["159984d7-397d-457a-8bdc-bd326188eeba",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Agents\n\nYou can pass a Runnable into an agent.\n\nBuilding an agent from a runnable usually involves a few things:\n\n1. Data processing for the intermediate steps (`agent_scratchpad`). These need to represented in a way that the language model can recognize them. This should be pretty tightly coupled to the instructions in the prompt. For this reason, in the below example with an XML agent, we use the built in util `formatXml` to format the steps as XML.\n\n2. The prompt itself. Below, this is the default XML agent prompt, which includes variables for the tool list and user question. It also contains examples of inputs and outputs for the agent to learn from.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/agents","loc":{"lines":{"from":1,"to":16}}}}],["91c589d9-7e93-42f2-aa2a-d297df37ac8d",{"pageContent":"3. The model, complete with stop tokens if needed (in our case, needed).\n\n4. The output parser - should be in sync with how the prompt specifies things to be formatted. In our case, we'll continue with the theme of XML and use the default `XMLAgentOutputParser`\n\n```typescript\nimport { AgentExecutor } from \"langchain/agents\";  \nimport { formatXml } from \"langchain/agents/format_scratchpad/xml\";  \nimport { XMLAgentOutputParser } from \"langchain/agents/xml/output_parser\";  \nimport { ChatAnthropic } from \"langchain/chat_models/anthropic\";  \nimport { ChatPromptTemplate } from \"langchain/prompts\";  \nimport { AgentStep } from \"langchain/schema\";  \nimport { RunnableSequence } from \"langchain/schema/runnable\";  \nimport { Tool, ToolParams } from \"langchain/tools\";  \nimport { renderTextDescription } from \"langchain/tools/render\";  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/agents","loc":{"lines":{"from":18,"to":32}}}}],["a221a323-a28c-4682-a731-bf20148bf5a1",{"pageContent":"```typescript\n// Define the model with stop tokens.  \nconst model = new ChatAnthropic({ temperature: 0 }).bind({  \n  stop: [\"</tool_input>\", \"</final_answer>\"],  \n});  \n```\n\nFor this example we'll define a custom tool for simplicity. You may use our built in tools, or define tools yourself, following the format you see below.\n\n```typescript\nclass SearchTool extends Tool {  \n  static lc_name() {  \n    return \"SearchTool\";  \n  }  \n  \n  name = \"search-tool\";  \n  \n  description = \"This tool preforms a search about things and whatnot.\";  \n  \n  constructor(config?: ToolParams) {  \n    super(config);  \n  }  \n  \n  async _call(_: string) {  \n    return \"32 degrees\";  \n  }  \n}  \n  \nconst tools = [new SearchTool()];  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/agents","loc":{"lines":{"from":34,"to":63}}}}],["cdf93648-500f-4641-9230-cf202138fc34",{"pageContent":"```typescript\nconst template = `You are a helpful assistant. Help the user answer any questions.  \n  \nYou have access to the following tools:  \n  \n{tools}  \n  \nIn order to use a tool, you can use <tool></tool> and <tool_input></tool_input> tags. \\  \nYou will then get back a response in the form <observation></observation>  \nFor example, if you have a tool called 'search' that could run a google search, in order to search for the weather in SF you would respond:  \n  \n<tool>search</tool><tool_input>weather in SF</tool_input>  \n<observation>64 degrees</observation>  \n  \nWhen you are done, respond with a final answer between <final_answer></final_answer>. For example:  \n  \n<final_answer>The weather in SF is 64 degrees</final_answer>  \n  \nBegin!  \n  \nQuestion: {input}`;  \n```\n\n```typescript\nconst prompt = ChatPromptTemplate.fromMessages([  \n  [\"human\", template],  \n  [\"ai\", \"{agent_scratchpad}\"],  \n]);  \n  \nconst outputParser = new XMLAgentOutputParser();  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/agents","loc":{"lines":{"from":65,"to":95}}}}],["27bfee47-1358-4efd-9abd-dc13b5ef4a79",{"pageContent":"```typescript\nconst runnableAgent = RunnableSequence.from([  \n  {  \n    input: (i: { input: string; tools: Tool[]; steps: AgentStep[] }) => i.input,  \n    tools: (i: { input: string; tools: Tool[]; steps: AgentStep[] }) =>  \n      renderTextDescription(i.tools),  \n    agent_scratchpad: (i: {  \n      input: string;  \n      tools: Tool[];  \n      steps: AgentStep[];  \n    }) => formatXml(i.steps),  \n  },  \n  prompt,  \n  model,  \n  outputParser,  \n]);  \n```\n\n```typescript\nconst executor = AgentExecutor.fromAgentAndTools({  \n  agent: runnableAgent,  \n  tools,  \n});  \n```\n\n```typescript\nconsole.log(\"Loaded executor\");  \n  \nconst input = \"What is the weather in SF?\";  \nconsole.log(`Calling executor with input: ${input}`);  \nconst response = await executor.invoke({ input, tools });  \nconsole.log(response);  \n```\n\n```txt\nLoaded executor  \nCalling executor with input: What is the weather in SF?  \n{ output: 'The weather in SF is 32 degrees' }  \n```[Previous","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/agents","loc":{"lines":{"from":97,"to":135}}}}],["575210b2-c8eb-4d6e-b13e-ee1c2392be48",{"pageContent":"Using tools](/docs/expression_language/cookbook/tools)[Next\n\nWhy use LCEL?](/docs/expression_language/why)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/agents","loc":{"lines":{"from":137,"to":146}}}}],["2a9255ec-1d44-495a-9fa5-eb8b153c85d1",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Agents\n\nYou can pass a Runnable into an agent.\n\nBuilding an agent from a runnable usually involves a few things:\n\n1. Data processing for the intermediate steps (`agent_scratchpad`). These need to represented in a way that the language model can recognize them. This should be pretty tightly coupled to the instructions in the prompt. For this reason, in the below example with an XML agent, we use the built in util `formatXml` to format the steps as XML.\n\n2. The prompt itself. Below, this is the default XML agent prompt, which includes variables for the tool list and user question. It also contains examples of inputs and outputs for the agent to learn from.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/agents#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":1,"to":16}}}}],["ee7b383d-b5e0-422e-860d-b8d2f8d413e2",{"pageContent":"3. The model, complete with stop tokens if needed (in our case, needed).\n\n4. The output parser - should be in sync with how the prompt specifies things to be formatted. In our case, we'll continue with the theme of XML and use the default `XMLAgentOutputParser`\n\n```typescript\nimport { AgentExecutor } from \"langchain/agents\";  \nimport { formatXml } from \"langchain/agents/format_scratchpad/xml\";  \nimport { XMLAgentOutputParser } from \"langchain/agents/xml/output_parser\";  \nimport { ChatAnthropic } from \"langchain/chat_models/anthropic\";  \nimport { ChatPromptTemplate } from \"langchain/prompts\";  \nimport { AgentStep } from \"langchain/schema\";  \nimport { RunnableSequence } from \"langchain/schema/runnable\";  \nimport { Tool, ToolParams } from \"langchain/tools\";  \nimport { renderTextDescription } from \"langchain/tools/render\";  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/agents#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":18,"to":32}}}}],["46a6c5ae-d01b-4c6c-af78-72d92e189a6b",{"pageContent":"```typescript\n// Define the model with stop tokens.  \nconst model = new ChatAnthropic({ temperature: 0 }).bind({  \n  stop: [\"</tool_input>\", \"</final_answer>\"],  \n});  \n```\n\nFor this example we'll define a custom tool for simplicity. You may use our built in tools, or define tools yourself, following the format you see below.\n\n```typescript\nclass SearchTool extends Tool {  \n  static lc_name() {  \n    return \"SearchTool\";  \n  }  \n  \n  name = \"search-tool\";  \n  \n  description = \"This tool preforms a search about things and whatnot.\";  \n  \n  constructor(config?: ToolParams) {  \n    super(config);  \n  }  \n  \n  async _call(_: string) {  \n    return \"32 degrees\";  \n  }  \n}  \n  \nconst tools = [new SearchTool()];  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/agents#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":34,"to":63}}}}],["44ee4dd8-bbfd-44f7-b349-c26f2027210a",{"pageContent":"```typescript\nconst template = `You are a helpful assistant. Help the user answer any questions.  \n  \nYou have access to the following tools:  \n  \n{tools}  \n  \nIn order to use a tool, you can use <tool></tool> and <tool_input></tool_input> tags. \\  \nYou will then get back a response in the form <observation></observation>  \nFor example, if you have a tool called 'search' that could run a google search, in order to search for the weather in SF you would respond:  \n  \n<tool>search</tool><tool_input>weather in SF</tool_input>  \n<observation>64 degrees</observation>  \n  \nWhen you are done, respond with a final answer between <final_answer></final_answer>. For example:  \n  \n<final_answer>The weather in SF is 64 degrees</final_answer>  \n  \nBegin!  \n  \nQuestion: {input}`;  \n```\n\n```typescript\nconst prompt = ChatPromptTemplate.fromMessages([  \n  [\"human\", template],  \n  [\"ai\", \"{agent_scratchpad}\"],  \n]);  \n  \nconst outputParser = new XMLAgentOutputParser();  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/agents#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":65,"to":95}}}}],["33231a97-40e2-4448-b01f-81b81b1efa4b",{"pageContent":"```typescript\nconst runnableAgent = RunnableSequence.from([  \n  {  \n    input: (i: { input: string; tools: Tool[]; steps: AgentStep[] }) => i.input,  \n    tools: (i: { input: string; tools: Tool[]; steps: AgentStep[] }) =>  \n      renderTextDescription(i.tools),  \n    agent_scratchpad: (i: {  \n      input: string;  \n      tools: Tool[];  \n      steps: AgentStep[];  \n    }) => formatXml(i.steps),  \n  },  \n  prompt,  \n  model,  \n  outputParser,  \n]);  \n```\n\n```typescript\nconst executor = AgentExecutor.fromAgentAndTools({  \n  agent: runnableAgent,  \n  tools,  \n});  \n```\n\n```typescript\nconsole.log(\"Loaded executor\");  \n  \nconst input = \"What is the weather in SF?\";  \nconsole.log(`Calling executor with input: ${input}`);  \nconst response = await executor.invoke({ input, tools });  \nconsole.log(response);  \n```\n\n```txt\nLoaded executor  \nCalling executor with input: What is the weather in SF?  \n{ output: 'The weather in SF is 32 degrees' }  \n```[Previous","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/agents#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":97,"to":135}}}}],["2209da36-e632-4dc3-b375-761b6226d0d4",{"pageContent":"Using tools](/docs/expression_language/cookbook/tools)[Next\n\nWhy use LCEL?](/docs/expression_language/why)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/agents#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":137,"to":146}}}}],["b49e97fd-9703-4fd1-a272-4bfae971c59b",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Agents\n\nYou can pass a Runnable into an agent.\n\nBuilding an agent from a runnable usually involves a few things:\n\n1. Data processing for the intermediate steps (`agent_scratchpad`). These need to represented in a way that the language model can recognize them. This should be pretty tightly coupled to the instructions in the prompt. For this reason, in the below example with an XML agent, we use the built in util `formatXml` to format the steps as XML.\n\n2. The prompt itself. Below, this is the default XML agent prompt, which includes variables for the tool list and user question. It also contains examples of inputs and outputs for the agent to learn from.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/agents#","loc":{"lines":{"from":1,"to":16}}}}],["68393a84-416f-4fed-bc25-37bbf2ca8e7d",{"pageContent":"3. The model, complete with stop tokens if needed (in our case, needed).\n\n4. The output parser - should be in sync with how the prompt specifies things to be formatted. In our case, we'll continue with the theme of XML and use the default `XMLAgentOutputParser`\n\n```typescript\nimport { AgentExecutor } from \"langchain/agents\";  \nimport { formatXml } from \"langchain/agents/format_scratchpad/xml\";  \nimport { XMLAgentOutputParser } from \"langchain/agents/xml/output_parser\";  \nimport { ChatAnthropic } from \"langchain/chat_models/anthropic\";  \nimport { ChatPromptTemplate } from \"langchain/prompts\";  \nimport { AgentStep } from \"langchain/schema\";  \nimport { RunnableSequence } from \"langchain/schema/runnable\";  \nimport { Tool, ToolParams } from \"langchain/tools\";  \nimport { renderTextDescription } from \"langchain/tools/render\";  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/agents#","loc":{"lines":{"from":18,"to":32}}}}],["d3f97170-b30f-4a3c-9673-351c64d33439",{"pageContent":"```typescript\n// Define the model with stop tokens.  \nconst model = new ChatAnthropic({ temperature: 0 }).bind({  \n  stop: [\"</tool_input>\", \"</final_answer>\"],  \n});  \n```\n\nFor this example we'll define a custom tool for simplicity. You may use our built in tools, or define tools yourself, following the format you see below.\n\n```typescript\nclass SearchTool extends Tool {  \n  static lc_name() {  \n    return \"SearchTool\";  \n  }  \n  \n  name = \"search-tool\";  \n  \n  description = \"This tool preforms a search about things and whatnot.\";  \n  \n  constructor(config?: ToolParams) {  \n    super(config);  \n  }  \n  \n  async _call(_: string) {  \n    return \"32 degrees\";  \n  }  \n}  \n  \nconst tools = [new SearchTool()];  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/agents#","loc":{"lines":{"from":34,"to":63}}}}],["3b114e5c-1cf6-4d07-bcec-b03165f6f077",{"pageContent":"```typescript\nconst template = `You are a helpful assistant. Help the user answer any questions.  \n  \nYou have access to the following tools:  \n  \n{tools}  \n  \nIn order to use a tool, you can use <tool></tool> and <tool_input></tool_input> tags. \\  \nYou will then get back a response in the form <observation></observation>  \nFor example, if you have a tool called 'search' that could run a google search, in order to search for the weather in SF you would respond:  \n  \n<tool>search</tool><tool_input>weather in SF</tool_input>  \n<observation>64 degrees</observation>  \n  \nWhen you are done, respond with a final answer between <final_answer></final_answer>. For example:  \n  \n<final_answer>The weather in SF is 64 degrees</final_answer>  \n  \nBegin!  \n  \nQuestion: {input}`;  \n```\n\n```typescript\nconst prompt = ChatPromptTemplate.fromMessages([  \n  [\"human\", template],  \n  [\"ai\", \"{agent_scratchpad}\"],  \n]);  \n  \nconst outputParser = new XMLAgentOutputParser();  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/agents#","loc":{"lines":{"from":65,"to":95}}}}],["552ca4bb-98f0-4aba-a835-9f55a43bbc6a",{"pageContent":"```typescript\nconst runnableAgent = RunnableSequence.from([  \n  {  \n    input: (i: { input: string; tools: Tool[]; steps: AgentStep[] }) => i.input,  \n    tools: (i: { input: string; tools: Tool[]; steps: AgentStep[] }) =>  \n      renderTextDescription(i.tools),  \n    agent_scratchpad: (i: {  \n      input: string;  \n      tools: Tool[];  \n      steps: AgentStep[];  \n    }) => formatXml(i.steps),  \n  },  \n  prompt,  \n  model,  \n  outputParser,  \n]);  \n```\n\n```typescript\nconst executor = AgentExecutor.fromAgentAndTools({  \n  agent: runnableAgent,  \n  tools,  \n});  \n```\n\n```typescript\nconsole.log(\"Loaded executor\");  \n  \nconst input = \"What is the weather in SF?\";  \nconsole.log(`Calling executor with input: ${input}`);  \nconst response = await executor.invoke({ input, tools });  \nconsole.log(response);  \n```\n\n```txt\nLoaded executor  \nCalling executor with input: What is the weather in SF?  \n{ output: 'The weather in SF is 32 degrees' }  \n```[Previous","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/agents#","loc":{"lines":{"from":97,"to":135}}}}],["93c47653-b97a-46d6-a3f7-96a2bcadb1ed",{"pageContent":"Using tools](/docs/expression_language/cookbook/tools)[Next\n\nWhy use LCEL?](/docs/expression_language/why)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/cookbook/agents#","loc":{"lines":{"from":137,"to":146}}}}],["bcfb5ed7-6332-436b-b0f8-9071d7e3dc7a",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Why use LCEL?\n\nThe LangChain Expression Language was designed from day 1 to **support putting prototypes in production, with no code changes**, from the simplest “prompt + LLM” chain to the most complex chains (we’ve seen folks successfully running in production LCEL chains with 100s of steps). To highlight a few of the reasons you might want to use LCEL:[Previous\n\nAgents](/docs/expression_language/cookbook/agents)[Next\n\nLangChain Expression Language (LCEL)](/docs/expression_language/)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/why","loc":{"lines":{"from":1,"to":21}}}}],["923aeea2-cc57-492f-9b2d-709425f2933e",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Why use LCEL?\n\nThe LangChain Expression Language was designed from day 1 to **support putting prototypes in production, with no code changes**, from the simplest “prompt + LLM” chain to the most complex chains (we’ve seen folks successfully running in production LCEL chains with 100s of steps). To highlight a few of the reasons you might want to use LCEL:[Previous\n\nAgents](/docs/expression_language/cookbook/agents)[Next\n\nLangChain Expression Language (LCEL)](/docs/expression_language/)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/why#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":1,"to":21}}}}],["6171fb18-186f-495c-9fd6-93e5173d99f1",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Why use LCEL?\n\nThe LangChain Expression Language was designed from day 1 to **support putting prototypes in production, with no code changes**, from the simplest “prompt + LLM” chain to the most complex chains (we’ve seen folks successfully running in production LCEL chains with 100s of steps). To highlight a few of the reasons you might want to use LCEL:[Previous\n\nAgents](/docs/expression_language/cookbook/agents)[Next\n\nLangChain Expression Language (LCEL)](/docs/expression_language/)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/expression_language/why#","loc":{"lines":{"from":1,"to":21}}}}],["b1126628-aeee-4e15-a336-1fa38d5ee67a",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Modules\n\nLangChain provides standard, extendable interfaces and external integrations for the following modules, listed from least to most complex:\n\n#### [Model I/O](/docs/modules/model_io/)[​](#model-io \"Direct link to model-io\")\n\nInterface with language models\n\n#### [Data connection](/docs/modules/data_connection/)[​](#data-connection \"Direct link to data-connection\")\n\nInterface with application-specific data\n\n#### [Chains](/docs/modules/chains/)[​](#chains \"Direct link to chains\")\n\nConstruct sequences of calls\n\n#### [Agents](/docs/modules/agents/)[​](#agents \"Direct link to agents\")\n\nLet chains choose which tools to use given high-level directives\n\n##","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/","loc":{"lines":{"from":1,"to":28}}}}],["1b7d622c-0c60-43e0-9ca4-1fdcf30c8072",{"pageContent":"#### [Memory](/docs/modules/memory/)[​](#memory \"Direct link to memory\")\n\nPersist application state between runs of a chain\n\n#### [Callbacks](/docs/modules/callbacks/)[​](#callbacks \"Direct link to callbacks\")\n\nLog and stream intermediate steps of any chain[Previous\n\nLangChain Expression Language (LCEL)](/docs/expression_language/)[Next\n\nModel I/O](/docs/modules/model_io/)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/","loc":{"lines":{"from":28,"to":45}}}}],["c10e149d-f195-4cdb-9775-cd8bbc94ffdc",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Modules\n\nLangChain provides standard, extendable interfaces and external integrations for the following modules, listed from least to most complex:\n\n#### [Model I/O](/docs/modules/model_io/)[​](#model-io \"Direct link to model-io\")\n\nInterface with language models\n\n#### [Data connection](/docs/modules/data_connection/)[​](#data-connection \"Direct link to data-connection\")\n\nInterface with application-specific data\n\n#### [Chains](/docs/modules/chains/)[​](#chains \"Direct link to chains\")\n\nConstruct sequences of calls\n\n#### [Agents](/docs/modules/agents/)[​](#agents \"Direct link to agents\")\n\nLet chains choose which tools to use given high-level directives\n\n##","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":1,"to":28}}}}],["a5682b6f-aebc-49fa-9282-b8ddedbff255",{"pageContent":"#### [Memory](/docs/modules/memory/)[​](#memory \"Direct link to memory\")\n\nPersist application state between runs of a chain\n\n#### [Callbacks](/docs/modules/callbacks/)[​](#callbacks \"Direct link to callbacks\")\n\nLog and stream intermediate steps of any chain[Previous\n\nLangChain Expression Language (LCEL)](/docs/expression_language/)[Next\n\nModel I/O](/docs/modules/model_io/)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":28,"to":45}}}}],["1aa23fc8-7ab2-4228-b03a-6891b97cfbe8",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Modules\n\nLangChain provides standard, extendable interfaces and external integrations for the following modules, listed from least to most complex:\n\n#### [Model I/O](/docs/modules/model_io/)[​](#model-io \"Direct link to model-io\")\n\nInterface with language models\n\n#### [Data connection](/docs/modules/data_connection/)[​](#data-connection \"Direct link to data-connection\")\n\nInterface with application-specific data\n\n#### [Chains](/docs/modules/chains/)[​](#chains \"Direct link to chains\")\n\nConstruct sequences of calls\n\n#### [Agents](/docs/modules/agents/)[​](#agents \"Direct link to agents\")\n\nLet chains choose which tools to use given high-level directives\n\n##","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/#","loc":{"lines":{"from":1,"to":28}}}}],["eaabd45a-0e4c-41b2-9ac7-881921d3e805",{"pageContent":"#### [Memory](/docs/modules/memory/)[​](#memory \"Direct link to memory\")\n\nPersist application state between runs of a chain\n\n#### [Callbacks](/docs/modules/callbacks/)[​](#callbacks \"Direct link to callbacks\")\n\nLog and stream intermediate steps of any chain[Previous\n\nLangChain Expression Language (LCEL)](/docs/expression_language/)[Next\n\nModel I/O](/docs/modules/model_io/)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/#","loc":{"lines":{"from":28,"to":45}}}}],["6def753a-b2da-4657-bb58-761c1de34696",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Model I/O\n\nThe core element of any language model application is...the model. LangChain gives you the building blocks to interface with any language model.\n\n![model_io_diagram](/assets/images/model_io-1f23a36233d7731e93576d6885da2750.jpg)[Previous\n\nModules](/docs/modules/)[Next\n\nPrompts](/docs/modules/model_io/prompts/)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/model_io/","loc":{"lines":{"from":1,"to":23}}}}],["5e6a4ec6-5b27-44a5-85e1-a71c7b3da8c7",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Model I/O\n\nThe core element of any language model application is...the model. LangChain gives you the building blocks to interface with any language model.\n\n![model_io_diagram](/assets/images/model_io-1f23a36233d7731e93576d6885da2750.jpg)[Previous\n\nModules](/docs/modules/)[Next\n\nPrompts](/docs/modules/model_io/prompts/)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/model_io/#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":1,"to":23}}}}],["e3fbd2c0-dec2-465b-9655-7a49a28af249",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Model I/O\n\nThe core element of any language model application is...the model. LangChain gives you the building blocks to interface with any language model.\n\n![model_io_diagram](/assets/images/model_io-1f23a36233d7731e93576d6885da2750.jpg)[Previous\n\nModules](/docs/modules/)[Next\n\nPrompts](/docs/modules/model_io/prompts/)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/model_io/#","loc":{"lines":{"from":1,"to":23}}}}],["5133eda8-1da9-43f5-8504-f053af7170f6",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Prompts\n\nThe new way of programming models is through prompts. A **prompt** refers to the input to the model. This input is often constructed from multiple components. LangChain provides several classes and functions to make constructing and working with prompts easy.[Previous\n\nModel I/O](/docs/modules/model_io/)[Next\n\nPrompt templates](/docs/modules/model_io/prompts/prompt_templates/)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/model_io/prompts/","loc":{"lines":{"from":1,"to":21}}}}],["5a845a8e-39e2-49e5-a7e3-8453e33a5b05",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Prompts\n\nThe new way of programming models is through prompts. A **prompt** refers to the input to the model. This input is often constructed from multiple components. LangChain provides several classes and functions to make constructing and working with prompts easy.[Previous\n\nModel I/O](/docs/modules/model_io/)[Next\n\nPrompt templates](/docs/modules/model_io/prompts/prompt_templates/)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/model_io/prompts/#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":1,"to":21}}}}],["4cfb4988-7d50-41d3-8207-2726dd360fd1",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Prompts\n\nThe new way of programming models is through prompts. A **prompt** refers to the input to the model. This input is often constructed from multiple components. LangChain provides several classes and functions to make constructing and working with prompts easy.[Previous\n\nModel I/O](/docs/modules/model_io/)[Next\n\nPrompt templates](/docs/modules/model_io/prompts/prompt_templates/)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/model_io/prompts/#","loc":{"lines":{"from":1,"to":21}}}}],["ee273dae-e4c3-48e9-9e4a-76fe00cdbe85",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Prompt templates\n\nLanguage models take text as input - that text is commonly referred to as a prompt. Typically this is not simply a hardcoded string but rather a combination of a template, some examples, and user input. LangChain provides several classes and functions to make constructing and working with prompts easy.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/model_io/prompts/prompt_templates/","loc":{"lines":{"from":1,"to":10}}}}],["23c07746-b5a3-4119-870d-bb988d56cb18",{"pageContent":"## What is a prompt template?[​](#what-is-a-prompt-template \"Direct link to What is a prompt template?\")\n\nA prompt template refers to a reproducible way to generate a prompt. It contains a text string (\"the template\"), that can take in a set of parameters from the end user and generates a prompt.\n\nA prompt template can contain:\n\n* instructions to the language model,\n* a set of few shot examples to help the language model generate a better response,\n* a question to the language model.\n\nHere's a simple example:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/model_io/prompts/prompt_templates/","loc":{"lines":{"from":12,"to":22}}}}],["99ae0b03-75dd-465d-a52c-9e66783b3950",{"pageContent":"Here's a simple example:\n\n```typescript\nimport { PromptTemplate } from \"langchain/prompts\";  \n  \n// If a template is passed in, the input variables are inferred automatically from the template.  \nconst prompt = PromptTemplate.fromTemplate(  \n  `You are a naming consultant for new companies.  \nWhat is a good name for a company that makes {product}?`  \n);  \n  \nconst formattedPrompt = await prompt.format({  \n  product: \"colorful socks\",  \n});  \n  \n/*  \n  You are a naming consultant for new companies.  \n  What is a good name for a company that makes colorful socks?  \n*/  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/model_io/prompts/prompt_templates/","loc":{"lines":{"from":22,"to":41}}}}],["ea7bdc07-a9f6-42ad-9a59-d256fe8a8f43",{"pageContent":"## Create a prompt template[​](#create-a-prompt-template \"Direct link to Create a prompt template\")\n\nYou can create simple hardcoded prompts using the `PromptTemplate` class. Prompt templates can take any number of input variables, and can be formatted to generate a prompt.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/model_io/prompts/prompt_templates/","loc":{"lines":{"from":43,"to":45}}}}],["ec6321bf-71d5-4a79-bd14-42658362638d",{"pageContent":"```typescript\nimport { PromptTemplate } from \"langchain/prompts\";  \n  \n// An example prompt with no input variables  \nconst noInputPrompt = new PromptTemplate({  \n  inputVariables: [],  \n  template: \"Tell me a joke.\",  \n});  \nconst formattedNoInputPrompt = await noInputPrompt.format();  \n  \nconsole.log(formattedNoInputPrompt);  \n// \"Tell me a joke.\"  \n  \n// An example prompt with one input variable  \nconst oneInputPrompt = new PromptTemplate({  \n  inputVariables: [\"adjective\"],  \n  template: \"Tell me a {adjective} joke.\",  \n});  \nconst formattedOneInputPrompt = await oneInputPrompt.format({  \n  adjective: \"funny\",  \n});  \n  \nconsole.log(formattedOneInputPrompt);  \n// \"Tell me a funny joke.\"  \n  \n// An example prompt with multiple input variables  \nconst multipleInputPrompt = new PromptTemplate({  \n  inputVariables: [\"adjective\", \"content\"],  \n  template: \"Tell me a {adjective} joke about {content}.\",  \n});  \nconst formattedMultipleInputPrompt = await multipleInputPrompt.format({","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/model_io/prompts/prompt_templates/","loc":{"lines":{"from":47,"to":77}}}}],["d4d3ae3e-2ebf-4329-9cc5-5a3271132760",{"pageContent":"utPrompt = await multipleInputPrompt.format({  \n  adjective: \"funny\",  \n  content: \"chickens\",  \n});  \n  \nconsole.log(formattedMultipleInputPrompt);  \n// \"Tell me a funny joke about chickens.\"  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/model_io/prompts/prompt_templates/","loc":{"lines":{"from":77,"to":84}}}}],["e7b8ca1e-a39e-4081-a468-c7a72d451f6f",{"pageContent":"If you do not wish to specify `inputVariables` manually, you can also create a `PromptTemplate` using the `fromTemplate` class method. LangChain will automatically infer the `inputVariables` based on the `template` passed.\n\n```typescript\nimport { PromptTemplate } from \"langchain/prompts\";  \n  \nconst template = \"Tell me a {adjective} joke about {content}.\";  \n  \nconst promptTemplate = PromptTemplate.fromTemplate(template);  \nconsole.log(promptTemplate.inputVariables);  \n// ['adjective', 'content']  \nconst formattedPromptTemplate = await promptTemplate.format({  \n  adjective: \"funny\",  \n  content: \"chickens\",  \n});  \nconsole.log(formattedPromptTemplate);  \n// \"Tell me a funny joke about chickens.\"  \n```\n\nYou can create custom prompt templates that format the prompt in any way you want. For more information, see [Custom Prompt Templates](/docs/modules/model_io/prompts/prompt_templates).","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/model_io/prompts/prompt_templates/","loc":{"lines":{"from":86,"to":104}}}}],["2f2a994c-fdca-4895-9f80-ce811fd0509e",{"pageContent":"## Chat prompt template[​](#chat-prompt-template \"Direct link to Chat prompt template\")\n\n[Chat Models](/docs/modules/model_io/models/chat) take a list of chat messages as input - this list commonly referred to as a `prompt`. These chat messages differ from raw string (which you would pass into a [LLM](/docs/modules/model_io/models/llms) model) in that every message is associated with a `role`.\n\nFor example, in OpenAI [Chat Completion API](https://platform.openai.com/docs/guides/chat/introduction), a chat message can be associated with an AI, human or system role. The model is supposed to follow instruction from system chat message more closely.\n\nLangChain provides several prompt templates to make constructing and working with prompts easily. You are encouraged to use these chat related prompt templates instead of `PromptTemplate` when invoking chat models to fully explore the model's potential.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/model_io/prompts/prompt_templates/","loc":{"lines":{"from":106,"to":112}}}}],["2e51a6c0-4716-4f73-99f5-4f711e29347a",{"pageContent":"```typescript\nimport {  \n  ChatPromptTemplate,  \n  PromptTemplate,  \n  SystemMessagePromptTemplate,  \n  AIMessagePromptTemplate,  \n  HumanMessagePromptTemplate,  \n} from \"langchain/prompts\";  \nimport { AIMessage, HumanMessage, SystemMessage } from \"langchain/schema\";  \n```\n\nTo create a message template associated with a role, you would use the corresponding `<ROLE>MessagePromptTemplate`.\n\nFor convenience, you can also declare message prompt templates as tuples. These will be coerced to the proper prompt template types:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/model_io/prompts/prompt_templates/","loc":{"lines":{"from":114,"to":127}}}}],["ce4f0ba0-38d6-423c-a905-a2a0ca60caeb",{"pageContent":"```typescript\nconst systemTemplate =  \n  \"You are a helpful assistant that translates {input_language} to {output_language}.\";  \nconst humanTemplate = \"{text}\";  \n  \nconst chatPrompt = ChatPromptTemplate.fromMessages([  \n  [\"system\", systemTemplate],  \n  [\"human\", humanTemplate],  \n]);  \n  \n// Format the messages  \nconst formattedChatPrompt = await chatPrompt.formatMessages({  \n  input_language: \"English\",  \n  output_language: \"French\",  \n  text: \"I love programming.\",  \n});  \n  \nconsole.log(formattedChatPrompt);  \n  \n/*  \n  [  \n    SystemMessage {  \n      content: 'You are a helpful assistant that translates English to French.'  \n    },  \n    HumanMessage {  \n      content: 'I love programming.'  \n    }  \n  ]  \n*/  \n```\n\nYou can also use `ChatPromptTemplate`'s `.formatPrompt()` method -- this returns a `PromptValue`, which you can convert to a string or Message object, depending on whether you want to use the formatted value as input to an LLM or chat model.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/model_io/prompts/prompt_templates/","loc":{"lines":{"from":129,"to":160}}}}],["85efa064-56d9-4aa7-a457-dab0bb1acca7",{"pageContent":"If you prefer to use the message classes, there is a `fromTemplate` method exposed on these classes. This is what it would look like:\n\n```typescript\nconst template =  \n  \"You are a helpful assistant that translates {input_language} to {output_language}.\";  \nconst systemMessagePrompt = SystemMessagePromptTemplate.fromTemplate(template);  \nconst humanTemplate = \"{text}\";  \nconst humanMessagePrompt =  \n  HumanMessagePromptTemplate.fromTemplate(humanTemplate);  \n```\n\nIf you wanted to construct the `MessagePromptTemplate` more directly, you could create a PromptTemplate externally and then pass it in, e.g.:\n\n```typescript\nconst prompt = new PromptTemplate({  \n  template:  \n    \"You are a helpful assistant that translates {input_language} to {output_language}.\",  \n  inputVariables: [\"input_language\", \"output_language\"],  \n});  \nconst systemMessagePrompt2 = new SystemMessagePromptTemplate({  \n  prompt,  \n});  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/model_io/prompts/prompt_templates/","loc":{"lines":{"from":162,"to":184}}}}],["b3bcae1a-a5b7-4b13-8e5b-ddcd260223c4",{"pageContent":"**Note:** If using TypeScript, you can add typing to prompts created with `.fromMessages` by passing a type parameter like this:\n\n```typescript\nconst chatPrompt = ChatPromptTemplate.fromMessages<{  \n  input_language: string;  \n  output_language: string;  \n  text: string;  \n}>([systemMessagePrompt, humanMessagePrompt]);  \n```[Previous\n\nPrompts](/docs/modules/model_io/prompts/)[Next\n\nFew Shot Prompt Templates](/docs/modules/model_io/prompts/prompt_templates/few_shot)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/model_io/prompts/prompt_templates/","loc":{"lines":{"from":186,"to":205}}}}],["14ee68ec-9850-467b-b11c-b4b2d8d7c932",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Prompt templates\n\nLanguage models take text as input - that text is commonly referred to as a prompt. Typically this is not simply a hardcoded string but rather a combination of a template, some examples, and user input. LangChain provides several classes and functions to make constructing and working with prompts easy.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/model_io/prompts/prompt_templates/#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":1,"to":10}}}}],["6577097e-7f10-41ef-9ce9-e8369d9b67ce",{"pageContent":"## What is a prompt template?[​](#what-is-a-prompt-template \"Direct link to What is a prompt template?\")\n\nA prompt template refers to a reproducible way to generate a prompt. It contains a text string (\"the template\"), that can take in a set of parameters from the end user and generates a prompt.\n\nA prompt template can contain:\n\n* instructions to the language model,\n* a set of few shot examples to help the language model generate a better response,\n* a question to the language model.\n\nHere's a simple example:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/model_io/prompts/prompt_templates/#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":12,"to":22}}}}],["6edae825-cff9-4bc1-aacb-39319adcace0",{"pageContent":"Here's a simple example:\n\n```typescript\nimport { PromptTemplate } from \"langchain/prompts\";  \n  \n// If a template is passed in, the input variables are inferred automatically from the template.  \nconst prompt = PromptTemplate.fromTemplate(  \n  `You are a naming consultant for new companies.  \nWhat is a good name for a company that makes {product}?`  \n);  \n  \nconst formattedPrompt = await prompt.format({  \n  product: \"colorful socks\",  \n});  \n  \n/*  \n  You are a naming consultant for new companies.  \n  What is a good name for a company that makes colorful socks?  \n*/  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/model_io/prompts/prompt_templates/#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":22,"to":41}}}}],["11325447-70c2-47de-be0b-9fd793bb231e",{"pageContent":"## Create a prompt template[​](#create-a-prompt-template \"Direct link to Create a prompt template\")\n\nYou can create simple hardcoded prompts using the `PromptTemplate` class. Prompt templates can take any number of input variables, and can be formatted to generate a prompt.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/model_io/prompts/prompt_templates/#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":43,"to":45}}}}],["9cab2cdd-9308-43c0-9183-52de44e62a53",{"pageContent":"```typescript\nimport { PromptTemplate } from \"langchain/prompts\";  \n  \n// An example prompt with no input variables  \nconst noInputPrompt = new PromptTemplate({  \n  inputVariables: [],  \n  template: \"Tell me a joke.\",  \n});  \nconst formattedNoInputPrompt = await noInputPrompt.format();  \n  \nconsole.log(formattedNoInputPrompt);  \n// \"Tell me a joke.\"  \n  \n// An example prompt with one input variable  \nconst oneInputPrompt = new PromptTemplate({  \n  inputVariables: [\"adjective\"],  \n  template: \"Tell me a {adjective} joke.\",  \n});  \nconst formattedOneInputPrompt = await oneInputPrompt.format({  \n  adjective: \"funny\",  \n});  \n  \nconsole.log(formattedOneInputPrompt);  \n// \"Tell me a funny joke.\"  \n  \n// An example prompt with multiple input variables  \nconst multipleInputPrompt = new PromptTemplate({  \n  inputVariables: [\"adjective\", \"content\"],  \n  template: \"Tell me a {adjective} joke about {content}.\",  \n});  \nconst formattedMultipleInputPrompt = await multipleInputPrompt.format({","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/model_io/prompts/prompt_templates/#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":47,"to":77}}}}],["098de873-c11c-4ee9-8320-664faffb0b89",{"pageContent":"utPrompt = await multipleInputPrompt.format({  \n  adjective: \"funny\",  \n  content: \"chickens\",  \n});  \n  \nconsole.log(formattedMultipleInputPrompt);  \n// \"Tell me a funny joke about chickens.\"  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/model_io/prompts/prompt_templates/#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":77,"to":84}}}}],["0fe8e796-3c20-4076-a3f6-12c7e1b5aaf7",{"pageContent":"If you do not wish to specify `inputVariables` manually, you can also create a `PromptTemplate` using the `fromTemplate` class method. LangChain will automatically infer the `inputVariables` based on the `template` passed.\n\n```typescript\nimport { PromptTemplate } from \"langchain/prompts\";  \n  \nconst template = \"Tell me a {adjective} joke about {content}.\";  \n  \nconst promptTemplate = PromptTemplate.fromTemplate(template);  \nconsole.log(promptTemplate.inputVariables);  \n// ['adjective', 'content']  \nconst formattedPromptTemplate = await promptTemplate.format({  \n  adjective: \"funny\",  \n  content: \"chickens\",  \n});  \nconsole.log(formattedPromptTemplate);  \n// \"Tell me a funny joke about chickens.\"  \n```\n\nYou can create custom prompt templates that format the prompt in any way you want. For more information, see [Custom Prompt Templates](/docs/modules/model_io/prompts/prompt_templates).","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/model_io/prompts/prompt_templates/#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":86,"to":104}}}}],["bd7504bc-9595-41f5-b057-ac9798fc04f8",{"pageContent":"## Chat prompt template[​](#chat-prompt-template \"Direct link to Chat prompt template\")\n\n[Chat Models](/docs/modules/model_io/models/chat) take a list of chat messages as input - this list commonly referred to as a `prompt`. These chat messages differ from raw string (which you would pass into a [LLM](/docs/modules/model_io/models/llms) model) in that every message is associated with a `role`.\n\nFor example, in OpenAI [Chat Completion API](https://platform.openai.com/docs/guides/chat/introduction), a chat message can be associated with an AI, human or system role. The model is supposed to follow instruction from system chat message more closely.\n\nLangChain provides several prompt templates to make constructing and working with prompts easily. You are encouraged to use these chat related prompt templates instead of `PromptTemplate` when invoking chat models to fully explore the model's potential.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/model_io/prompts/prompt_templates/#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":106,"to":112}}}}],["ac212a7c-222a-4b69-8a82-27ac959161e3",{"pageContent":"```typescript\nimport {  \n  ChatPromptTemplate,  \n  PromptTemplate,  \n  SystemMessagePromptTemplate,  \n  AIMessagePromptTemplate,  \n  HumanMessagePromptTemplate,  \n} from \"langchain/prompts\";  \nimport { AIMessage, HumanMessage, SystemMessage } from \"langchain/schema\";  \n```\n\nTo create a message template associated with a role, you would use the corresponding `<ROLE>MessagePromptTemplate`.\n\nFor convenience, you can also declare message prompt templates as tuples. These will be coerced to the proper prompt template types:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/model_io/prompts/prompt_templates/#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":114,"to":127}}}}],["f2dae8dd-b7fc-4e8c-8714-41dbcd22a4e1",{"pageContent":"```typescript\nconst systemTemplate =  \n  \"You are a helpful assistant that translates {input_language} to {output_language}.\";  \nconst humanTemplate = \"{text}\";  \n  \nconst chatPrompt = ChatPromptTemplate.fromMessages([  \n  [\"system\", systemTemplate],  \n  [\"human\", humanTemplate],  \n]);  \n  \n// Format the messages  \nconst formattedChatPrompt = await chatPrompt.formatMessages({  \n  input_language: \"English\",  \n  output_language: \"French\",  \n  text: \"I love programming.\",  \n});  \n  \nconsole.log(formattedChatPrompt);  \n  \n/*  \n  [  \n    SystemMessage {  \n      content: 'You are a helpful assistant that translates English to French.'  \n    },  \n    HumanMessage {  \n      content: 'I love programming.'  \n    }  \n  ]  \n*/  \n```\n\nYou can also use `ChatPromptTemplate`'s `.formatPrompt()` method -- this returns a `PromptValue`, which you can convert to a string or Message object, depending on whether you want to use the formatted value as input to an LLM or chat model.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/model_io/prompts/prompt_templates/#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":129,"to":160}}}}],["287477b1-5c21-4276-bdc6-977b573d3917",{"pageContent":"If you prefer to use the message classes, there is a `fromTemplate` method exposed on these classes. This is what it would look like:\n\n```typescript\nconst template =  \n  \"You are a helpful assistant that translates {input_language} to {output_language}.\";  \nconst systemMessagePrompt = SystemMessagePromptTemplate.fromTemplate(template);  \nconst humanTemplate = \"{text}\";  \nconst humanMessagePrompt =  \n  HumanMessagePromptTemplate.fromTemplate(humanTemplate);  \n```\n\nIf you wanted to construct the `MessagePromptTemplate` more directly, you could create a PromptTemplate externally and then pass it in, e.g.:\n\n```typescript\nconst prompt = new PromptTemplate({  \n  template:  \n    \"You are a helpful assistant that translates {input_language} to {output_language}.\",  \n  inputVariables: [\"input_language\", \"output_language\"],  \n});  \nconst systemMessagePrompt2 = new SystemMessagePromptTemplate({  \n  prompt,  \n});  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/model_io/prompts/prompt_templates/#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":162,"to":184}}}}],["3a814b17-c026-43cb-a9ee-a902187193a0",{"pageContent":"**Note:** If using TypeScript, you can add typing to prompts created with `.fromMessages` by passing a type parameter like this:\n\n```typescript\nconst chatPrompt = ChatPromptTemplate.fromMessages<{  \n  input_language: string;  \n  output_language: string;  \n  text: string;  \n}>([systemMessagePrompt, humanMessagePrompt]);  \n```[Previous\n\nPrompts](/docs/modules/model_io/prompts/)[Next\n\nFew Shot Prompt Templates](/docs/modules/model_io/prompts/prompt_templates/few_shot)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/model_io/prompts/prompt_templates/#__docusaurus_skipToContent_fallback","loc":{"lines":{"from":186,"to":205}}}}],["9d38f552-d9b3-498e-abcb-dafb110c00c9",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Prompt templates\n\nLanguage models take text as input - that text is commonly referred to as a prompt. Typically this is not simply a hardcoded string but rather a combination of a template, some examples, and user input. LangChain provides several classes and functions to make constructing and working with prompts easy.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/model_io/prompts/prompt_templates/#","loc":{"lines":{"from":1,"to":10}}}}],["5bfdebbc-8e14-4010-9b6e-321805460ca4",{"pageContent":"## What is a prompt template?[​](#what-is-a-prompt-template \"Direct link to What is a prompt template?\")\n\nA prompt template refers to a reproducible way to generate a prompt. It contains a text string (\"the template\"), that can take in a set of parameters from the end user and generates a prompt.\n\nA prompt template can contain:\n\n* instructions to the language model,\n* a set of few shot examples to help the language model generate a better response,\n* a question to the language model.\n\nHere's a simple example:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/model_io/prompts/prompt_templates/#","loc":{"lines":{"from":12,"to":22}}}}],["98bab0a1-2bdb-44df-88ec-71988a9cd801",{"pageContent":"Here's a simple example:\n\n```typescript\nimport { PromptTemplate } from \"langchain/prompts\";  \n  \n// If a template is passed in, the input variables are inferred automatically from the template.  \nconst prompt = PromptTemplate.fromTemplate(  \n  `You are a naming consultant for new companies.  \nWhat is a good name for a company that makes {product}?`  \n);  \n  \nconst formattedPrompt = await prompt.format({  \n  product: \"colorful socks\",  \n});  \n  \n/*  \n  You are a naming consultant for new companies.  \n  What is a good name for a company that makes colorful socks?  \n*/  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/model_io/prompts/prompt_templates/#","loc":{"lines":{"from":22,"to":41}}}}],["30d34b9a-51cd-42e3-b642-e20c6536a7b3",{"pageContent":"## Create a prompt template[​](#create-a-prompt-template \"Direct link to Create a prompt template\")\n\nYou can create simple hardcoded prompts using the `PromptTemplate` class. Prompt templates can take any number of input variables, and can be formatted to generate a prompt.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/model_io/prompts/prompt_templates/#","loc":{"lines":{"from":43,"to":45}}}}],["895e6529-0d79-41f1-89c5-fb9882ee7311",{"pageContent":"```typescript\nimport { PromptTemplate } from \"langchain/prompts\";  \n  \n// An example prompt with no input variables  \nconst noInputPrompt = new PromptTemplate({  \n  inputVariables: [],  \n  template: \"Tell me a joke.\",  \n});  \nconst formattedNoInputPrompt = await noInputPrompt.format();  \n  \nconsole.log(formattedNoInputPrompt);  \n// \"Tell me a joke.\"  \n  \n// An example prompt with one input variable  \nconst oneInputPrompt = new PromptTemplate({  \n  inputVariables: [\"adjective\"],  \n  template: \"Tell me a {adjective} joke.\",  \n});  \nconst formattedOneInputPrompt = await oneInputPrompt.format({  \n  adjective: \"funny\",  \n});  \n  \nconsole.log(formattedOneInputPrompt);  \n// \"Tell me a funny joke.\"  \n  \n// An example prompt with multiple input variables  \nconst multipleInputPrompt = new PromptTemplate({  \n  inputVariables: [\"adjective\", \"content\"],  \n  template: \"Tell me a {adjective} joke about {content}.\",  \n});  \nconst formattedMultipleInputPrompt = await multipleInputPrompt.format({","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/model_io/prompts/prompt_templates/#","loc":{"lines":{"from":47,"to":77}}}}],["b22b910c-02eb-4293-912f-d59f62ebdeb7",{"pageContent":"utPrompt = await multipleInputPrompt.format({  \n  adjective: \"funny\",  \n  content: \"chickens\",  \n});  \n  \nconsole.log(formattedMultipleInputPrompt);  \n// \"Tell me a funny joke about chickens.\"  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/model_io/prompts/prompt_templates/#","loc":{"lines":{"from":77,"to":84}}}}],["89e74530-f5ad-479c-9c35-fd75226ee099",{"pageContent":"If you do not wish to specify `inputVariables` manually, you can also create a `PromptTemplate` using the `fromTemplate` class method. LangChain will automatically infer the `inputVariables` based on the `template` passed.\n\n```typescript\nimport { PromptTemplate } from \"langchain/prompts\";  \n  \nconst template = \"Tell me a {adjective} joke about {content}.\";  \n  \nconst promptTemplate = PromptTemplate.fromTemplate(template);  \nconsole.log(promptTemplate.inputVariables);  \n// ['adjective', 'content']  \nconst formattedPromptTemplate = await promptTemplate.format({  \n  adjective: \"funny\",  \n  content: \"chickens\",  \n});  \nconsole.log(formattedPromptTemplate);  \n// \"Tell me a funny joke about chickens.\"  \n```\n\nYou can create custom prompt templates that format the prompt in any way you want. For more information, see [Custom Prompt Templates](/docs/modules/model_io/prompts/prompt_templates).","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/model_io/prompts/prompt_templates/#","loc":{"lines":{"from":86,"to":104}}}}],["44d424c3-3b9d-41ac-b7cc-95ccc34d11a3",{"pageContent":"## Chat prompt template[​](#chat-prompt-template \"Direct link to Chat prompt template\")\n\n[Chat Models](/docs/modules/model_io/models/chat) take a list of chat messages as input - this list commonly referred to as a `prompt`. These chat messages differ from raw string (which you would pass into a [LLM](/docs/modules/model_io/models/llms) model) in that every message is associated with a `role`.\n\nFor example, in OpenAI [Chat Completion API](https://platform.openai.com/docs/guides/chat/introduction), a chat message can be associated with an AI, human or system role. The model is supposed to follow instruction from system chat message more closely.\n\nLangChain provides several prompt templates to make constructing and working with prompts easily. You are encouraged to use these chat related prompt templates instead of `PromptTemplate` when invoking chat models to fully explore the model's potential.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/model_io/prompts/prompt_templates/#","loc":{"lines":{"from":106,"to":112}}}}],["510aa533-47be-4987-959a-f19edbe93827",{"pageContent":"```typescript\nimport {  \n  ChatPromptTemplate,  \n  PromptTemplate,  \n  SystemMessagePromptTemplate,  \n  AIMessagePromptTemplate,  \n  HumanMessagePromptTemplate,  \n} from \"langchain/prompts\";  \nimport { AIMessage, HumanMessage, SystemMessage } from \"langchain/schema\";  \n```\n\nTo create a message template associated with a role, you would use the corresponding `<ROLE>MessagePromptTemplate`.\n\nFor convenience, you can also declare message prompt templates as tuples. These will be coerced to the proper prompt template types:","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/model_io/prompts/prompt_templates/#","loc":{"lines":{"from":114,"to":127}}}}],["15c33d12-0338-4807-b555-ac9dd0d4a9d9",{"pageContent":"```typescript\nconst systemTemplate =  \n  \"You are a helpful assistant that translates {input_language} to {output_language}.\";  \nconst humanTemplate = \"{text}\";  \n  \nconst chatPrompt = ChatPromptTemplate.fromMessages([  \n  [\"system\", systemTemplate],  \n  [\"human\", humanTemplate],  \n]);  \n  \n// Format the messages  \nconst formattedChatPrompt = await chatPrompt.formatMessages({  \n  input_language: \"English\",  \n  output_language: \"French\",  \n  text: \"I love programming.\",  \n});  \n  \nconsole.log(formattedChatPrompt);  \n  \n/*  \n  [  \n    SystemMessage {  \n      content: 'You are a helpful assistant that translates English to French.'  \n    },  \n    HumanMessage {  \n      content: 'I love programming.'  \n    }  \n  ]  \n*/  \n```\n\nYou can also use `ChatPromptTemplate`'s `.formatPrompt()` method -- this returns a `PromptValue`, which you can convert to a string or Message object, depending on whether you want to use the formatted value as input to an LLM or chat model.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/model_io/prompts/prompt_templates/#","loc":{"lines":{"from":129,"to":160}}}}],["084aae06-05e6-4b25-b2dc-92977519db4f",{"pageContent":"If you prefer to use the message classes, there is a `fromTemplate` method exposed on these classes. This is what it would look like:\n\n```typescript\nconst template =  \n  \"You are a helpful assistant that translates {input_language} to {output_language}.\";  \nconst systemMessagePrompt = SystemMessagePromptTemplate.fromTemplate(template);  \nconst humanTemplate = \"{text}\";  \nconst humanMessagePrompt =  \n  HumanMessagePromptTemplate.fromTemplate(humanTemplate);  \n```\n\nIf you wanted to construct the `MessagePromptTemplate` more directly, you could create a PromptTemplate externally and then pass it in, e.g.:\n\n```typescript\nconst prompt = new PromptTemplate({  \n  template:  \n    \"You are a helpful assistant that translates {input_language} to {output_language}.\",  \n  inputVariables: [\"input_language\", \"output_language\"],  \n});  \nconst systemMessagePrompt2 = new SystemMessagePromptTemplate({  \n  prompt,  \n});  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/model_io/prompts/prompt_templates/#","loc":{"lines":{"from":162,"to":184}}}}],["60e11246-7787-41f8-af28-cfe3578235a0",{"pageContent":"**Note:** If using TypeScript, you can add typing to prompts created with `.fromMessages` by passing a type parameter like this:\n\n```typescript\nconst chatPrompt = ChatPromptTemplate.fromMessages<{  \n  input_language: string;  \n  output_language: string;  \n  text: string;  \n}>([systemMessagePrompt, humanMessagePrompt]);  \n```[Previous\n\nPrompts](/docs/modules/model_io/prompts/)[Next\n\nFew Shot Prompt Templates](/docs/modules/model_io/prompts/prompt_templates/few_shot)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/model_io/prompts/prompt_templates/#","loc":{"lines":{"from":186,"to":205}}}}],["ab36b261-1719-47c6-9965-20a0c218a9c0",{"pageContent":"[Skip to main content](#__docusaurus_skipToContent_fallback)\n[**🦜️🔗 LangChain**](/)[Docs](/docs/get_started/introduction)[Use cases](/docs/use_cases)[Integrations](/docs/integrations/platforms)[API](https://api.js.langchain.com)\n\n[More](#)\n\n[Also by LangChain](#)\n\n# Few Shot Prompt Templates\n\nFew shot prompting is a prompting technique which provides the Large Language Model (LLM) with a list of examples, and then asks the LLM to generate some text following the lead of the examples provided.\n\nAn example of this is the following:\n\nSay you want your LLM to respond in a specific format. You can few shot prompt the LLM with a list of question answer pairs so it knows what format to respond in.\n\n```txt\nRespond to the users question in the with the following format:  \n  \nQuestion: What is your name?  \nAnswer: My name is John.  \n  \nQuestion: What is your age?  \nAnswer: I am 25 years old.  \n  \nQuestion: What is your favorite color?  \nAnswer:  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/model_io/prompts/prompt_templates/few_shot","loc":{"lines":{"from":1,"to":27}}}}],["fcead0bf-53c1-4dd9-bf27-13e04a2baeb3",{"pageContent":"Here we left the last `Answer:` undefined so the LLM can fill it in. The LLM will then generate the following:\n\n```txt\nAnswer: I don't have a favorite color; I don't have preferences.  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/model_io/prompts/prompt_templates/few_shot","loc":{"lines":{"from":29,"to":33}}}}],["6bd94227-0157-4b8d-a35f-412cfd5fb451",{"pageContent":"#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/model_io/prompts/prompt_templates/few_shot","loc":{"lines":{"from":33,"to":33}}}}],["a333b04a-4699-4e76-807b-e4211c1b1d6d",{"pageContent":"## Use Case[​](#use-case \"Direct link to Use Case\")\n\nIn the following example we're few shotting the LLM to rephrase questions into more general queries.\n\nWe provide two sets of examples with specific questions, and rephrased general questions. The `FewShotChatMessagePromptTemplate` will use our examples and when `.format` is called, we'll see those examples formatted into a string we can pass to the LLM.\n\n```typescript\nimport {  \n  ChatPromptTemplate,  \n  FewShotChatMessagePromptTemplate,  \n} from \"langchain/prompts\";  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/model_io/prompts/prompt_templates/few_shot","loc":{"lines":{"from":67,"to":78}}}}],["09a8d4c6-86c1-42ff-a828-6a3cfea87f6e",{"pageContent":"```typescript\nconst examples = [  \n  {  \n    input: \"Could the members of The Police perform lawful arrests?\",  \n    output: \"what can the members of The Police do?\",  \n  },  \n  {  \n    input: \"Jan Sindel's was born in what country?\",  \n    output: \"what is Jan Sindel's personal history?\",  \n  },  \n];  \nconst examplePrompt = ChatPromptTemplate.fromTemplate(`Human: {input}  \nAI: {output}`);  \nconst fewShotPrompt = new FewShotChatMessagePromptTemplate({  \n  examplePrompt,  \n  examples,  \n  inputVariables: [], // no input variables  \n});  \n```\n\n```typescript\nconst formattedPrompt = await fewShotPrompt.format({});  \nconsole.log(formattedPrompt);  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/model_io/prompts/prompt_templates/few_shot","loc":{"lines":{"from":80,"to":103}}}}],["7ae45472-6ddc-465e-a59f-0e94545f6ef3",{"pageContent":"```typescript\n[  \n  HumanMessage {  \n    lc_namespace: [ 'langchain', 'schema' ],  \n    content: 'Human: Could the members of The Police perform lawful arrests?\\n' +  \n      'AI: what can the members of The Police do?',  \n    additional_kwargs: {}  \n  },  \n  HumanMessage {  \n    lc_namespace: [ 'langchain', 'schema' ],  \n    content: \"Human: Jan Sindel's was born in what country?\\n\" +  \n      \"AI: what is Jan Sindel's personal history?\",  \n    additional_kwargs: {}  \n  }  \n]  \n```\n\nThen, if we use this with another question, the LLM will rephrase the question how we want.\n\n```typescript\nimport { ChatOpenAI } from \"langchain/chat_models/openai\";  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/model_io/prompts/prompt_templates/few_shot","loc":{"lines":{"from":105,"to":126}}}}],["794a4b0f-c0bd-440c-b620-58861b5c3d33",{"pageContent":"```typescript\nconst model = new ChatOpenAI({});  \nconst examples = [  \n  {  \n    input: \"Could the members of The Police perform lawful arrests?\",  \n    output: \"what can the members of The Police do?\",  \n  },  \n  {  \n    input: \"Jan Sindel's was born in what country?\",  \n    output: \"what is Jan Sindel's personal history?\",  \n  },  \n];  \nconst examplePrompt = ChatPromptTemplate.fromTemplate(`Human: {input}  \nAI: {output}`);  \nconst fewShotPrompt = new FewShotChatMessagePromptTemplate({  \n  prefix:  \n    \"Rephrase the users query to be more general, using the following examples\",  \n  suffix: \"Human: {input}\",  \n  examplePrompt,  \n  examples,  \n  inputVariables: [\"input\"],  \n});  \nconst formattedPrompt = await fewShotPrompt.format({  \n  input: \"What's France's main city?\",  \n});  \n  \nconst response = await model.invoke(formattedPrompt);  \nconsole.log(response);  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/model_io/prompts/prompt_templates/few_shot","loc":{"lines":{"from":128,"to":156}}}}],["4791d3a3-a5b2-4553-9c22-c64a214d3558",{"pageContent":"```typescript\nAIMessage {  \n  lc_namespace: [ 'langchain', 'schema' ],  \n  content: 'What is the capital of France?',  \n  additional_kwargs: { function_call: undefined }  \n}  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/model_io/prompts/prompt_templates/few_shot","loc":{"lines":{"from":158,"to":164}}}}],["70142555-f8ca-4d65-b19f-c163c76e2284",{"pageContent":"#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/model_io/prompts/prompt_templates/few_shot","loc":{"lines":{"from":164,"to":164}}}}],["318766f7-5fa6-4605-8a04-d0a14caacdb6",{"pageContent":"## Few Shotting With Functions[​](#few-shotting-with-functions \"Direct link to Few Shotting With Functions\")\n\nYou can also partial with a function. The use case for this is when you have a variable you know that you always want to fetch in a common way. A prime example of this is with date or time. Imagine you have a prompt which you always want to have the current date. You can't hard code it in the prompt, and passing it along with the other input variables can be tedious. In this case, it's very handy to be able to partial the prompt with a function that always returns the current date.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/model_io/prompts/prompt_templates/few_shot","loc":{"lines":{"from":297,"to":299}}}}],["df025c3e-8124-4e55-8356-f1c353e90796",{"pageContent":"```typescript\nconst getCurrentDate = () => {  \n  return new Date().toISOString();  \n};  \n  \nconst prompt = new FewShotChatMessagePromptTemplate({  \n  template: \"Tell me a {adjective} joke about the day {date}\",  \n  inputVariables: [\"adjective\", \"date\"],  \n});  \n  \nconst partialPrompt = await prompt.partial({  \n  date: getCurrentDate,  \n});  \n  \nconst formattedPrompt = await partialPrompt.format({  \n  adjective: \"funny\",  \n});  \n  \nconsole.log(formattedPrompt);  \n  \n// Tell me a funny joke about the day 2023-07-13T00:54:59.287Z  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/model_io/prompts/prompt_templates/few_shot","loc":{"lines":{"from":301,"to":322}}}}],["35d0b950-46b6-48fe-b63e-ecf74aedc6f9",{"pageContent":"#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/model_io/prompts/prompt_templates/few_shot","loc":{"lines":{"from":322,"to":322}}}}],["6c00669b-f741-45c7-aeab-1ac1c1932f12",{"pageContent":"## Few Shot vs Chat Few Shot[​](#few-shot-vs-chat-few-shot \"Direct link to Few Shot vs Chat Few Shot\")\n\nThe chat and non chat few shot prompt templates act in a similar way. The below example will demonstrate using chat and non chat, and the differences with their outputs.\n\n```typescript\nimport {  \n  FewShotPromptTemplate,  \n  FewShotChatMessagePromptTemplate,  \n} from \"langchain/prompts\";  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/model_io/prompts/prompt_templates/few_shot","loc":{"lines":{"from":482,"to":491}}}}],["022de592-543e-41ec-bdbc-49c0f44fcee2",{"pageContent":"```typescript\nconst examples = [  \n  {  \n    input: \"Could the members of The Police perform lawful arrests?\",  \n    output: \"what can the members of The Police do?\",  \n  },  \n  {  \n    input: \"Jan Sindel's was born in what country?\",  \n    output: \"what is Jan Sindel's personal history?\",  \n  },  \n];  \nconst prompt = `Human: {input}  \nAI: {output}`;  \nconst examplePromptTemplate = PromptTemplate.fromTemplate(prompt);  \nconst exampleChatPromptTemplate = ChatPromptTemplate.fromTemplate(prompt);  \nconst chatFewShotPrompt = new FewShotChatMessagePromptTemplate({  \n  examplePrompt: exampleChatPromptTemplate,  \n  examples,  \n  inputVariables: [], // no input variables  \n});  \nconst fewShotPrompt = new FewShotPromptTemplate({  \n  examplePrompt: examplePromptTemplate,  \n  examples,  \n  inputVariables: [], // no input variables  \n});  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/model_io/prompts/prompt_templates/few_shot","loc":{"lines":{"from":493,"to":518}}}}],["60a73669-bcbb-4770-bec5-c5227f4b04c7",{"pageContent":"```typescript\nconsole.log(\"Chat Few Shot: \", await chatFewShotPrompt.formatMessages({}));  \n/**  \nChat Few Shot:  [  \n  HumanMessage {  \n    lc_namespace: [ 'langchain', 'schema' ],  \n    content: 'Human: Could the members of The Police perform lawful arrests?\\n' +  \n      'AI: what can the members of The Police do?',  \n    additional_kwargs: {}  \n  },  \n  HumanMessage {  \n    lc_namespace: [ 'langchain', 'schema' ],  \n    content: \"Human: Jan Sindel's was born in what country?\\n\" +  \n      \"AI: what is Jan Sindel's personal history?\",  \n    additional_kwargs: {}  \n  }  \n]  \n */  \n```\n\n```typescript\nconsole.log(\"Few Shot: \", await fewShotPrompt.formatPromptValue({}));  \n/**  \nFew Shot:  \n  \nHuman: Could the members of The Police perform lawful arrests?  \nAI: what can the members of The Police do?  \n  \nHuman: Jan Sindel's was born in what country?  \nAI: what is Jan Sindel's personal history?  \n */  \n```","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/model_io/prompts/prompt_templates/few_shot","loc":{"lines":{"from":520,"to":551}}}}],["48d343dd-bff0-4c51-9852-fd61e85bb3d4",{"pageContent":"Here we can see the main distinctions between `FewShotChatMessagePromptTemplate` and `FewShotPromptTemplate`: input and output values.\n\n`FewShotChatMessagePromptTemplate` works by taking in a list of `ChatPromptTemplate` for examples, and its output is a list of instances of `BaseMessage`.\n\nOn the other hand, `FewShotPromptTemplate` works by taking in a `PromptTemplate` for examples, and its output is a string.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/model_io/prompts/prompt_templates/few_shot","loc":{"lines":{"from":553,"to":557}}}}],["9d18562b-e64e-4c8f-ace8-5d0143c090cd",{"pageContent":"## With Non Chat Models[​](#with-non-chat-models \"Direct link to With Non Chat Models\")\n\nLangChain also provides a class for few shot prompt formatting for non chat models: `FewShotPromptTemplate`. The API is largely the same, but the output is formatted differently (chat messages vs strings).\n\n### Partials With Functions[​](#partials-with-functions \"Direct link to Partials With Functions\")\n\n```typescript\nimport {  \n  ChatPromptTemplate,  \n  FewShotChatMessagePromptTemplate,  \n} from \"langchain/prompts\";  \n```\n\n```typescript\nconst examplePrompt = PromptTemplate.fromTemplate(\"{foo}{bar}\");  \nconst prompt = new FewShotPromptTemplate({  \n  prefix: \"{foo}{bar}\",  \n  examplePrompt,  \n  inputVariables: [\"foo\", \"bar\"],  \n});  \nconst partialPrompt = await prompt.partial({  \n  foo: () => Promise.resolve(\"boo\"),  \n});  \nconst formatted = await partialPrompt.format({ bar: \"baz\" });  \nconsole.log(formatted);  \n```\n\n```txt\nboobaz\\n  \n```\n\n#","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/model_io/prompts/prompt_templates/few_shot","loc":{"lines":{"from":559,"to":590}}}}],["81eaa51f-9a86-485e-a7a2-644f979c53b5",{"pageContent":"## With Functions and Example Selector[​](#with-functions-and-example-selector \"Direct link to With Functions and Example Selector\")\n\n```typescript\nimport {  \n  ChatPromptTemplate,  \n  FewShotChatMessagePromptTemplate,  \n} from \"langchain/prompts\";  \n```\n\n```typescript\nconst examplePrompt = PromptTemplate.fromTemplate(\"An example about {x}\");  \nconst exampleSelector = await LengthBasedExampleSelector.fromExamples(  \n  [{ x: \"foo\" }, { x: \"bar\" }],  \n  { examplePrompt, maxLength: 200 }  \n);  \nconst prompt = new FewShotPromptTemplate({  \n  prefix: \"{foo}{bar}\",  \n  exampleSelector,  \n  examplePrompt,  \n  inputVariables: [\"foo\", \"bar\"],  \n});  \nconst partialPrompt = await prompt.partial({  \n  foo: () => Promise.resolve(\"boo\"),  \n});  \nconst formatted = await partialPrompt.format({ bar: \"baz\" });  \nconsole.log(formatted);  \n```\n\n```txt\nboobaz  \nAn example about foo  \nAn example about bar  \n```[Previous\n\nPrompt templates](/docs/modules/model_io/prompts/prompt_templates/)[Next","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/model_io/prompts/prompt_templates/few_shot","loc":{"lines":{"from":590,"to":624}}}}],["214415b5-e659-4bc0-8555-b7ef3d8e6ad0",{"pageContent":"Partial prompt templates](/docs/modules/model_io/prompts/prompt_templates/partial)\nCommunity\n\nGitHub\n\nMore\n\nCopyright © 2023 LangChain, Inc.","metadata":{"source_type":"Website","website_url":"https://js.langchain.com/docs/modules/model_io/prompts/prompt_templates/few_shot","loc":{"lines":{"from":626,"to":633}}}}]],{"0":"3ae6274d-43fd-4542-8c73-ced52e914f94","1":"0e49b3df-0936-43a5-a856-1fe4d1f65754","2":"8b8db798-6bb6-4ca5-881c-d7b4efd31e96","3":"44661b8f-7f88-4938-841c-673971dc8d9e","4":"927f2490-d8a1-4dd9-8c87-e09ae554bacc","5":"04bb5994-ed80-4c75-9232-92b5a1fdcbf1","6":"cc550f28-3e5e-4d20-9017-347d1f6981b7","7":"91e4f6b7-10fe-4854-8b79-823b090afab3","8":"9c5de7d8-3908-4723-9ff5-5125e5392d32","9":"c1283a37-7558-487f-a36b-a1f516411540","10":"a814375f-c7c4-4320-af6b-8d96650cae2b","11":"a3cff873-9f9f-482d-ade2-08cfe54b6dc8","12":"f25d2c8c-b30e-440a-84d2-13a085d2580e","13":"59e5d4e7-9b60-443b-bde5-c0dd967608cd","14":"ffe12691-95c5-4925-96fc-5f292af8f495","15":"be1ffd0c-e791-4210-b2bc-6ae706ade684","16":"1defebfc-ee8a-4291-ae5e-b6ad112ee6b8","17":"054fa730-92b0-4159-a616-827ed4fcde9a","18":"62bd4e4f-277f-4f11-9061-7e694adc7358","19":"5606b98f-8b72-4404-bced-ccf69f45b2b9","20":"b45716b1-d1cd-4bc7-b2e1-1f3af422b673","21":"792f19ec-6955-435c-a3b5-5948c2a963f4","22":"b6d20455-9eed-438c-bb13-693f75eac632","23":"23729ec8-0436-41d4-8895-b435d5444752","24":"06738397-23c6-427f-ae43-94810e84f138","25":"3377affc-4c3b-4fe8-b469-c8537aa94487","26":"ca2d2401-0696-4dc6-b47e-51835ce5765d","27":"63b66bc6-8a5a-4181-8d2a-75078006ff09","28":"d07051a0-5c4d-4860-a11d-9e22c86843f4","29":"851a5748-d8e8-4c5b-bae8-6923ff50448a","30":"ac0ab146-51b1-4ad7-8513-4f92c505b04b","31":"1a8b6bc9-b2f5-4096-b9d9-e3f49c8086bf","32":"5af07809-3d7a-44c2-9d7d-499f668fb56a","33":"4af17710-24ad-4376-9554-3f77ab159a76","34":"53dc1fa8-93ad-46c3-922a-4043724e776c","35":"fed72930-88fb-449d-ac32-e9b8f4c922e1","36":"ca045e3d-0f23-409a-9e4c-48a457a47c33","37":"798ee349-2c52-4279-8c8c-79029acca0ed","38":"2a2155b7-926a-45cf-85c8-b7d30368b558","39":"046dfeee-2625-4d83-a2ee-9010c1b5d95a","40":"b5070662-f6b5-4502-83f6-91584af34a69","41":"b6a6826c-8d03-4a1e-a98f-ebc8dccd117b","42":"a4ec9b5e-766b-40dc-9635-152a802b1fcf","43":"73754ecd-4a71-4368-a239-9422b7d02e69","44":"49f8a5d3-fe21-4f99-bccf-c09ea80456f3","45":"de995f74-1d1c-41b1-8585-85b5abf8fa7e","46":"49c030e8-c054-40e0-b0a5-e9cbb9e44e89","47":"4c83def4-c945-4c67-b9ab-878b43879c4c","48":"116a80fc-19c7-4f5b-a54e-66e87667c8ef","49":"2e5a1f03-2013-435e-8d24-3e347c844002","50":"d266be62-c529-4ece-9944-7c14a26a4884","51":"96b46ffc-1c63-46a9-9cd9-30f5653932e9","52":"f74af0e8-4eda-4db7-99c6-e459a1324452","53":"c454ecfc-5901-49f6-ae84-6f575893cc18","54":"21d77bed-9c82-4f5b-b3e0-aa6a455d4eb3","55":"68ab66c8-0d88-4d4c-8ed0-8f9b5156a3d1","56":"3bf20992-c8ec-4021-ab7e-219da468d3fe","57":"9080172b-5d49-4f2e-87b0-94a1df7314c8","58":"58b27a3c-e989-4a69-82ec-1ccc250de747","59":"8bd16cee-3c86-4d5f-90b6-a4d7d5b40784","60":"21998858-f271-4f29-82f9-0acbf95c5925","61":"ed0986a9-7659-4dd1-a5e0-050f6c983d24","62":"052e10f8-f749-4d59-af8c-83dedb13127b","63":"a7f88635-1117-432f-983b-f14435fbd57a","64":"b9304cc4-850b-4b59-84be-b712756e9251","65":"420209c5-c7b6-4aa3-80f8-4fa6bc3e86ee","66":"ee5c7d81-ad1b-4e97-b9a5-382e4d3ed7fd","67":"c4f59d0e-98b7-4395-9c95-f258eb8241bd","68":"85761ea1-fa58-4748-973d-087d2c040b93","69":"1b0fac9a-da21-49b3-9486-d777ebf78923","70":"7620702a-4d79-458c-b53f-483e8090dbfa","71":"3789562b-5673-48d4-a7d5-9edd9fd91aac","72":"d69f6ffd-17a3-4029-a4f0-c7f286969f35","73":"5dfaf54a-f808-438d-ad33-90ee0d6ac257","74":"6b6c3707-40c7-4a42-b1b0-af6b8341486d","75":"e72e7eaa-9d3a-4660-a939-8e61780c0d73","76":"12c30d7b-6ac3-4e7c-953c-d2ecca51aaac","77":"427b246f-ceae-4a7d-86a9-2ed9eb75f2cf","78":"d4908ffd-83ae-4c56-a3b1-00b2982844a8","79":"4c833efc-c7fe-4cc2-84da-1c4d094c6455","80":"3759d937-7b24-4f2e-b17e-548771e7fc30","81":"a70b4137-283c-4999-9f92-05823f9b4448","82":"52f76b5a-c883-433d-ab43-458887966af2","83":"5ac72be6-975a-4b9a-892d-dd37fd6ed2e9","84":"ef08fb9e-cde5-4dc2-8c4e-a589a4b5b98f","85":"c4d42965-a2c1-4ad9-963a-f413e5f4cfd3","86":"77b089bc-c01b-4ebd-a73d-c7e51268af10","87":"959888c8-2375-4cde-abb9-90a53e41449d","88":"88f45805-2935-40b4-9330-846d8df4b88e","89":"71ee7c77-0e43-44c7-8ae1-eb47d8bccac6","90":"3cec14a2-f252-4061-bfe4-f9963268b4b1","91":"7572969a-c393-4d52-b2f2-d7d3e0d1714e","92":"d36531ca-93d6-464b-807a-86c56ce0bb6c","93":"700ed54b-d34a-479a-9bea-3909a7077064","94":"11ac217d-b352-4c5f-84a4-358e44980f34","95":"1c86b49f-d0e9-49de-88d4-1197c65dd81d","96":"ae9b918a-8912-4bcb-bd2f-a7e70d80c02e","97":"1ebd3a01-d525-4151-a0d5-d730932e0e31","98":"07599bec-95d4-4ca6-abe6-89cee732d506","99":"6e37323d-006e-4237-9a8f-6a305c948294","100":"100adc41-d76c-4311-a9a6-63133834e3e5","101":"e56e9a07-9ba4-4e77-9fc8-230a12fcdbf6","102":"17bb8361-33c9-46e9-bac0-21f8cb8a80f6","103":"b60e075a-6a5b-4c3e-9db7-2e1fa149c89e","104":"b99accc3-bd75-4ee3-8b9a-6fb70879f37d","105":"be9bc64a-be0d-42dd-8bfa-97eb3e437724","106":"3071d57c-f093-4d10-9b56-dc07f408940d","107":"3c91261c-ade9-414b-95a2-001d73b5c9a0","108":"15668a50-b39e-419a-a464-f85db9cf0ff2","109":"89a8280b-b857-405a-a3b7-513ec2d6ffa6","110":"7cb9a4a5-b50f-4ce1-a25e-a33ba3db96d3","111":"e89abad4-0646-411e-a6f5-95a406f9718f","112":"bbfe17fe-1dcf-404c-a3b4-4316744d75d8","113":"798ce0aa-34a9-4a3a-8ee1-04c230668bdf","114":"8c65019e-6040-4379-af5b-2da6c9bad3d8","115":"abc81783-c87b-4496-b28d-07ce479eb72b","116":"dfd5f2ec-35b0-46c2-9f26-42caf1573cba","117":"4bbd7051-10be-4328-b063-b81736a668fd","118":"66120f7f-ae75-4072-873f-9d42875efde8","119":"558eb6e4-aa55-43df-8abb-296428b1565d","120":"dcee569e-787c-45f8-b4e4-c6e7fb26323b","121":"4323792c-7ba3-46df-9c28-f5ecd6270546","122":"a4689188-f252-4820-84d6-7c1cee25e76a","123":"d6b559e8-404a-4730-946a-1c10e8bdbfa9","124":"f73cfd49-c9b1-4f71-87fe-c54e0b378380","125":"7bcb2bac-8d5d-4969-b451-80e46ed21de0","126":"420607e7-a148-4e94-bf6b-236b6cb0b42b","127":"97ca7154-1713-4756-ad39-9bfee47305b0","128":"0f922218-88d5-4357-8bbd-a58a062034d6","129":"fea90ce8-f019-4738-b2c2-82c3f91c86f4","130":"2e763034-4356-44c3-bd55-a9aa44f0abcd","131":"268cc17f-00a3-41b5-9898-d0943ed25441","132":"9847dd39-39d1-4f34-b151-fafc2e1e973e","133":"7dee83b9-cb37-4605-8b78-735ff41019e7","134":"8451dda1-af6c-4d63-83e6-388f0ae5fccf","135":"4a927613-4d97-4e29-850d-7f3f1039324a","136":"212723fe-fd58-4f14-a16a-8bae13d874ed","137":"53447c14-df3f-4aa4-b8ec-0f9e1c37a86d","138":"35b65c51-1117-4c99-848e-6e3e91cf779d","139":"5801e03c-b120-4a2f-8383-05a0454238d8","140":"c9dd1952-da18-48d3-9f42-bafe8b64591f","141":"e2263939-6515-4938-a0af-58d29e515e08","142":"bcbd46b7-9aba-47e8-932e-59cb619f451d","143":"74a3c075-947a-41ba-9190-22e856aee439","144":"827edc58-d4bb-4578-9e83-8d15c72b6b26","145":"b36dbe17-9d80-4a1b-9fdd-4db05986c103","146":"6b82b77b-ea68-4c36-9b9f-26bc86d38d5a","147":"c3449ed9-2d5b-407c-bd34-ea77647d3ed5","148":"f9105426-b2ca-428a-8c4f-227ecbc458e8","149":"1dcec245-fcea-451b-a30e-3042586d8f50","150":"4af4a15a-ccf2-410b-a3ac-a941ef152af8","151":"3fbd5b75-d846-417d-b351-195352f64ed9","152":"883f765d-7faa-4710-9e08-698ef7d7dd82","153":"b6da18ea-874b-4ea2-ab17-5c1c035db8c7","154":"09115f87-37de-43ea-b084-8cf8573c8791","155":"54a4f2a3-5bb3-431b-ade8-cead72e4d0ad","156":"26858eae-56cd-4430-b07a-ae132e259b10","157":"99ae28af-04a9-4df8-887d-f814bfc56760","158":"af66d816-b6df-47db-9f0d-ef0158ab7acb","159":"b3a233cd-b99c-4cf8-8aca-edc2f264d5b8","160":"8aa23b5e-bd4c-4083-85ac-353edece48d3","161":"d9f621bd-8fd8-4c66-81ce-8271d9d74f11","162":"47b06d18-db1f-4439-b4d8-965fd3690e25","163":"8d2c1cd1-4896-4f4f-9c3d-bb50446bb764","164":"a89c858e-dffc-49c9-8ba7-0e26e063cbf4","165":"8c5f1334-099c-4e26-885b-efe0b855fb71","166":"5d12498e-8479-4059-a928-726cb78ce587","167":"3879eef3-f558-405a-a0e8-ea78ce3a5485","168":"c47b2dc9-55ce-439a-b183-8406a6ff654b","169":"cba98c80-116b-4d6b-9d73-ea0939b9bf28","170":"44652d83-b1ec-4371-9acf-1de20462fc33","171":"3754ab25-6577-40ac-9ab5-41e1a45b2056","172":"1fc59bd8-d9a9-490a-a93b-f599ef8c9ac8","173":"254f9b22-0776-48e8-8e58-4468a056fff1","174":"148afbe7-d737-4257-9dae-e7b34997db8b","175":"77559cb7-a258-4692-9844-b4132e99cf57","176":"b7576fdd-725b-475c-b70c-9c4928e6ad13","177":"4099bf62-be4e-44aa-b020-4d52913048ac","178":"b6a9f085-07d8-4f14-b312-3e8b85d460f1","179":"af51bc34-db64-4994-85fa-65f44a31ecd0","180":"ed336ab8-7b4e-4371-ba43-d4aeffc04b2b","181":"a4ba1b53-c53f-4563-816e-ca4ced43c49a","182":"44bdb3ea-1af9-4aed-b892-10c380be82e4","183":"041e0c92-c6d6-4459-92de-17b1d0c1bf78","184":"29d9664a-4508-4883-bdf7-60d14fe50dd2","185":"da1538aa-300c-40d3-90e0-144f45858b50","186":"dd519148-6397-45e8-938e-074ed2574a1b","187":"d23d0fdc-c74a-4d27-9c3c-11c36c0ead3b","188":"d7ff2cb6-d6eb-4b37-9163-1068eac2ed42","189":"843fbb48-66c1-4021-9f5c-442b024bdd57","190":"e4b8d864-25fa-434c-8c83-32690e077964","191":"cd940428-46ad-4d74-b554-10313eb22f81","192":"a5188f7f-e15f-4d18-859e-74b2f63f8ad1","193":"6f893cae-d62d-4588-9de8-cdc6ad61d942","194":"97e754e2-024e-474a-ad6a-0ded6f9e6de8","195":"db2e2583-27d2-4967-950f-ceefd9e6e2b3","196":"72f3ee5e-021f-43a1-96cb-24cdd0dfc920","197":"bb5ea23b-9d6b-4ec5-a534-7ef95fa31808","198":"20198733-3cf8-4d48-9c3f-e3f88eb18643","199":"90a737db-7a4a-43f3-947c-cf4e2d53a616","200":"e626f1db-5d2e-4631-bd79-10ba1dcda7ee","201":"9991fdbb-0d7f-417c-b5c0-31f4d71ee86a","202":"be92b41f-c66a-40c2-8d27-c6efc7b98a3d","203":"261363ca-953f-475f-88ee-c8f2daecdee7","204":"eddcb1aa-ddc5-4938-9d77-5e1569a10ce1","205":"4aca2dfe-b4a2-4f30-86a7-67314057fc4c","206":"fd860461-53d5-43ab-adf1-ab5ca5b0d6db","207":"c72cc9cf-5bce-4518-b1b2-a9a798537862","208":"e036ecf2-9a0c-4db2-abfc-32af5aa46b79","209":"3ace67d8-d730-4d45-92f4-eb2df5545a72","210":"5fefd6b9-9c36-4481-9e71-1c6612ee55cd","211":"08613578-849c-484f-aeb5-28a0f3a167d5","212":"bd36bf45-e0fe-4da9-9cae-45d1e56e36e0","213":"963af4ee-9bc7-4ab6-9229-3c31c84ae90f","214":"a16a6bdb-4e33-472b-874a-3e1161bc0fab","215":"497c8921-6019-4367-bc31-b4673ad199e2","216":"75ebf6d5-8abe-4a1e-9eb6-a25dda6e0609","217":"dcefdbf6-8fd5-4c8b-b5b2-d9dc4c8a18c6","218":"f6e83e29-44ea-4a68-8267-dd0f79626f14","219":"e06fdd92-7601-41c0-b81c-af3dfc1c3719","220":"238b7866-237e-4e10-b031-0305fb4f5316","221":"abaa455d-7474-4f25-910e-9fe869812cce","222":"da795db9-b372-4612-89f5-ab6bf25da045","223":"b948346a-d0ed-4392-a562-c24dbac2576c","224":"6d2206db-26a8-4b75-9c30-2baf044ad3d3","225":"1b24e3a6-8b4b-44e1-97cb-5e9070359729","226":"af22edd4-fd10-485c-907a-4d7f11ad7114","227":"3af644e2-a107-4017-a7e6-54d5a6a9a8d9","228":"5bf9bc91-2e8b-4a4c-8196-84f32b5834e2","229":"c0572e4f-6a02-4071-8bd5-2fb47b1dd66c","230":"dcbc9f20-41a3-4344-a1e8-811853b36a97","231":"c43d40d2-46d5-48f8-9ce2-59aba0906159","232":"6b833043-051b-4510-b47d-63acbfd2d64b","233":"564397de-1012-4a86-8096-6b0d7ab9ce21","234":"8ebb546d-36df-4348-851b-877d29bae795","235":"3d17150f-2664-4408-8e56-41b333b44d3a","236":"aed34643-5240-44cc-a465-5cf74bcda240","237":"5c6a2695-5803-42d6-8a5d-800fa99cc693","238":"a92cf2de-b281-45b9-808d-2d8609a2194c","239":"48d148ca-8288-430a-8dda-8786e80ee5f0","240":"9d33ed29-12b9-4a2a-b589-03768696ab87","241":"c1fb753c-0096-4a1a-a123-3802228eafd8","242":"93d80a26-272b-4ef2-b0c3-c5444dc4241c","243":"d7178506-5374-4640-a4e8-2cbee0fbfc7e","244":"766f9f57-9145-4ca7-bdfb-78f063a8f980","245":"bd3babb1-5ded-4621-8e9c-2873869d220a","246":"8eb9598a-606a-479f-b9aa-40eb11a95362","247":"a87c1e6e-4ec8-4fed-84df-8f139f6bb7e0","248":"045cfc41-1e38-4cd8-a3f6-a77b50709c41","249":"567e07ca-b9f9-4abf-b983-16c0c02bc45c","250":"c4c2a40b-2510-48c6-981e-521f45645cc8","251":"de34e0ff-8379-45c5-81b9-d4cc1c8a2488","252":"b3761506-1356-4d16-9e69-40abcddd901e","253":"1fc75660-0410-44bc-ae36-b10ebdbb8584","254":"399a457e-8143-452f-a82a-f735ddc1761c","255":"5d19c7ad-3413-41c3-9a21-3452e2729383","256":"f267e9dc-fa10-42c0-bd7b-340acfec31ce","257":"877ac376-252a-4724-8620-196bb5947a0b","258":"e7a44ff3-33b6-4220-b3d4-fddbe96348d1","259":"8f20c79a-c3af-4700-b104-00b708ee57fd","260":"9873038c-8b8a-4b27-8032-d8ef4534b181","261":"db5efa63-3c74-4a27-9233-ce42d3fd88a5","262":"c4ee40c6-4d7a-45d6-b0eb-8267e3be14f1","263":"034cc478-1904-4cb0-a2c1-2c532e7bc628","264":"2705205a-8a18-4bba-b114-37ad82fe0adb","265":"b3b7503d-f952-4215-8423-6077afaa4030","266":"db5753ae-a5d1-4e2e-b1c0-4b747084ddf2","267":"e825acf5-0a46-4f54-982b-46ada1469df1","268":"89bfc56b-e4d1-4686-ac96-71503970dff6","269":"366e0721-d09d-4e6f-8b9b-a925a751c882","270":"c54eb664-14c0-4550-9d6c-8ed5651c37a6","271":"7fd6d05d-58ec-40e3-b13a-1daf57ca59d9","272":"04519bea-2e17-4aba-a159-1a4c25c9a298","273":"5e00e21b-9ca2-49a1-a2be-1598c3377bf4","274":"4119bb7e-885f-4142-b797-c3f5c710887b","275":"14e213ed-72d8-416e-b178-d31ad54a490a","276":"32ef7bee-1be4-4a66-8f22-0266003100ee","277":"2924a1c0-5830-4872-bcd1-950430e8eb15","278":"28e9dd9b-7686-430d-a164-8673827dadbe","279":"017e599e-014f-47f8-9dac-94af9dbfbc94","280":"89be2cef-2358-410a-ae86-7eb6d8d7d8bc","281":"c606a057-e460-4553-81cd-cd493594d6da","282":"52b93793-1e04-42dd-a2ff-632f5c1b9e63","283":"db623bd1-535b-4d3c-8f46-6fc51808aa37","284":"e07eba7d-4def-40d1-b3b9-1da5cb34fd72","285":"5207dba2-3c5e-4fb7-b019-2c6adebdcfe6","286":"bd6a85a8-8ee4-4fc3-ab49-d5d87b365167","287":"a3603590-3b0b-4797-880d-2318c84ace11","288":"62d0a7f5-7084-498d-8cba-8ac33e8c9f79","289":"b5a49e01-a372-482b-9a1f-2739548ddaed","290":"952e4f11-153c-45ed-9fa4-8e8958075328","291":"be82e8b7-b2f7-4c29-8ea7-4151e7542188","292":"33ef1051-d758-464d-ad95-1ce0bbc015cf","293":"c0b2e188-eded-4a64-b33f-baae9592986d","294":"5b984c90-0a86-4a82-916a-121607a47d38","295":"cdefdbd1-22cc-4a37-8b11-d08db0f6e756","296":"5aa31559-a4c4-4e3a-a175-4ea4e9e30b1e","297":"b35e7991-a3d5-48fa-84c5-558e9b10024c","298":"13272490-8541-459d-92a7-0baa17d1e1ed","299":"d0ef9122-909a-4f29-8e60-ba4064000fdf","300":"abd275eb-7fd7-46ce-b85f-864ec3e98023","301":"b6987751-74f1-492f-a6d8-2e5c0caaa165","302":"aec73547-f424-4dfc-8dab-a3cafafc59d1","303":"2d2c08b6-4552-4600-8477-ecdb703623bf","304":"0a07705f-9805-4d44-93d7-62c45a619b89","305":"bcd6232a-6b0c-42b6-86e3-b83b54ffb39d","306":"6472b93f-c038-4121-b258-6e3f2da45599","307":"33c69b2d-ea62-40f5-b1af-63b0e85f33b9","308":"17d5451e-50af-4096-964c-d96faa390fc0","309":"292be507-e90f-48f8-a403-4d21f1130e17","310":"b3dd73c3-6f28-4077-802d-ef2495836186","311":"1fddf32c-99b9-48eb-a6b2-bc91419b58f0","312":"9c7da22b-780c-4bca-a5e6-13b9e9e7d0cc","313":"0b1fe3d7-6787-4b6b-a337-0df7dabb8657","314":"fd9151fe-e1d4-4330-8e23-7d01013050c7","315":"0e18e80c-1a89-42d1-a6e4-ef21a4096f04","316":"d299185c-3078-4807-968c-4e1229d0b4ba","317":"95446c92-d8c3-4989-8318-72d74cf497b6","318":"0417b6ac-bcc9-4aaa-8807-e13c38b52336","319":"c3fb636d-4d29-45b3-844c-7d2f74415dfc","320":"a6f77f6c-4bbe-48f6-a8a6-ed9dac901d4d","321":"ed9782a8-cb21-4d61-91e8-e9cac1965e2c","322":"8428a977-1c6c-48bf-add2-0230fad453b9","323":"988e0259-31be-45fc-a563-59f22fdbd540","324":"b1ed23aa-da8e-48ab-8836-5eb051eb1641","325":"3df25ab1-b205-4b29-b88f-5dc47dee6ac9","326":"cb02c4f7-5004-42a0-8a62-a03f849f59dd","327":"038d348c-aa3a-450c-9c62-fb9d25547daa","328":"def0ea66-297d-4671-805d-5566328735ab","329":"9a04be2d-b046-46b0-a4ac-1969dce31f4e","330":"12ed1e35-a331-4fd7-a992-046917b5770b","331":"00e9b0c0-8e3a-40b5-8dd8-9d983919a649","332":"506129e8-4f5b-4a5a-8c3b-a4a46f2175fd","333":"118950bf-696c-4b1e-9691-a8a6c6792258","334":"69e95ae4-13d8-4750-98ae-288607eaf564","335":"10149817-6882-4ed1-b97b-ead9146301de","336":"0c42c598-e792-4491-903f-173ee89283dd","337":"5bbb4a4d-4579-4c96-9f97-8b0c801349c6","338":"396570c8-f55e-4f1e-b78e-431f0c2d9a98","339":"1473073e-a42d-4583-906a-5a7c7bb92420","340":"f71dc1fa-c865-481e-be6c-5d1cdce02a7b","341":"163a5042-d911-4658-882b-8b24276d376f","342":"be3b3e08-3364-47d0-a8bf-ac79fa1bfe52","343":"c82221df-4b3d-44e9-9780-95bada4e005c","344":"5258bdf7-b47c-4d69-9fc9-1a1bca10e9b0","345":"4ed8cdba-51f0-424f-9921-c15402d769ea","346":"559d8c01-c794-4245-9367-15c2d9bcb4a2","347":"4d4bfc22-2183-4995-9a6b-73a6004656d4","348":"c58dc716-e4fe-4f52-b902-2a35b37a99be","349":"aa92ceb1-1792-4136-a6b7-0588a9b04fb2","350":"258fe772-cdca-4ce4-86f1-d0753e15951f","351":"181c0013-ee18-4616-bcb9-6f68a95c93ac","352":"180abfde-7d5f-42b1-8c20-8602f93512c8","353":"3a141e35-6f57-47fd-9bb4-e30e196c177f","354":"f9dd53e0-0509-4847-bf94-afe30fdd772e","355":"d090aa04-15cb-4610-afce-73b9e8563aec","356":"a0c2f006-870f-4b94-b2f2-be94835d06b0","357":"b2ca3087-c98f-4c09-b634-dc57470ace55","358":"ebcf60f3-81c1-4e42-9a00-d0729ee3edcb","359":"8960bc82-00d3-49da-a2d4-84d623f5705b","360":"4fdab9a5-bbdb-410a-a2a5-713beb03e95f","361":"e072aa29-975c-44ed-ac5b-ab59db3ebecb","362":"6da90f5c-2116-4d4e-95f9-a7de500f0292","363":"5e49dab9-2ef9-4afc-ae90-2e44bb40f441","364":"ce83b53c-6629-4096-8a8b-6bd1f199f82c","365":"d84d321b-7bcc-4d92-bae8-34d62177a053","366":"6730a484-1d61-438f-8a08-dbcd3806ac62","367":"ea8b9226-c8f6-45f5-8a56-422e505efbf7","368":"768eac79-6da7-4fa0-a8de-d3032ef0ac5a","369":"acc05366-9ec3-4507-acf8-d0a349b41cd9","370":"2c6042fa-f94d-4e46-8ec1-ef6230d0db31","371":"696fe22f-ca93-4b9a-814e-24fbd53698e5","372":"edb0de9c-b829-4195-b832-806fba88e1ac","373":"a21fd8c7-744b-4d6b-b410-d1a5043e924f","374":"04d588f9-47d8-452a-9cc2-3ee258004a20","375":"f39fcf46-6de4-4b9d-b8ec-ffd6961a9f14","376":"622b9a08-3a4c-4038-8e1c-a86d013f438d","377":"409290f4-20ea-48fb-8d70-ba167ec2d9f3","378":"ff26c544-c872-4776-a282-2e5ecb399531","379":"0472f915-a185-49fe-9dac-79f873bc0879","380":"43a09602-972e-4f15-ac6a-5d35e85b9596","381":"99ad5f62-3e2e-4d68-b4ab-89bb8fdbfe79","382":"7fa67578-83dc-43e9-bc74-3c4319ab0cf0","383":"be8441d2-1aae-4ae9-82ef-3dc5ee059de9","384":"74cbf862-d27a-43e1-bb41-2fbdafbb8d76","385":"47ba064a-6591-4795-96cf-cae61dddd280","386":"7b17639e-3f2b-4dbe-b1d0-c6241227bb16","387":"67aa7bc1-590f-4216-8796-330cbb9a884a","388":"b68a5545-381b-4e3f-8106-7f173a7481a1","389":"935a932e-701d-4ce7-9189-5e12b42aece8","390":"93b5e254-036f-4cf6-bcbd-6d6bd7215c13","391":"0c2686be-df4e-4e1b-9d80-944b995d2483","392":"411e31e3-86f0-493f-9943-86abeb0c437f","393":"c3f39d9a-ad81-4b5f-b9f6-50cd5140bb57","394":"b664b258-4d60-4e60-82a7-75e9d13d4b3f","395":"812508bc-a5bc-43ef-af98-d8f2f223f492","396":"c0f4dbd5-7e6f-4f15-8b92-9b9a3c1e545e","397":"2309108f-986a-408c-a8ab-0cb514629ef0","398":"af170cd1-f384-4e3e-8d44-eaa95b0c36c4","399":"f225adcf-b639-4df5-9740-f53b6d18994d","400":"df5fb317-9de6-4e40-9464-b3105b39d44d","401":"0e240b42-2d40-4230-998f-f9600922359f","402":"79f09260-4efe-455a-9fe5-0a1a6587b69a","403":"e83571ba-cd64-401c-92cf-3afc5f18d2de","404":"cc1fcdc9-70bd-4d12-a45d-31b517dc7d2c","405":"2a9f8613-a44b-4864-a047-73215a5e12c5","406":"ac09ba43-01ee-48ac-a621-274e3e11e14d","407":"7d6a68f6-f773-4145-a88e-ebf270fee515","408":"a6d8b4ab-bf37-46d2-9032-c8958287eda7","409":"90795ce8-9f35-4d80-a315-940f25147cba","410":"4f938cd0-58cf-4d0c-a1ad-916397d75d08","411":"8ee74d40-dc01-4c83-8fb6-df0480deca1f","412":"f45451d7-f56f-42f2-8730-59b57afd8888","413":"f4070bd3-4713-4b1b-9a5d-5b99e4185bec","414":"b608b42d-8f85-4b06-9aa4-627b9cc82127","415":"bf443064-c11d-45de-ac1b-523a869d5b41","416":"9eaca7f1-ea7a-4b2a-9099-2cb3e37bef70","417":"e4a8f377-b4a1-4d8b-a572-844f5ec0e49f","418":"5aba1173-1e03-4fcc-8195-115846c94113","419":"cef2cc36-021f-4347-a5c8-1a15467a399a","420":"12fa292e-d4cb-45d8-92c3-4514c0286339","421":"9c328579-445b-43f0-9c21-6a627827e664","422":"83a4febd-d846-43fa-a16e-47ea1f44b619","423":"68166df0-a61f-457c-86de-c1a99e2ac9b1","424":"5034eb10-f702-4d67-b6bc-a1fc8e88abcd","425":"1894090c-761a-4276-9a6e-eef389e427f1","426":"c2c9374b-9a07-4f1a-aef0-aad1fb9ac25a","427":"8caa15cf-ffac-430a-bc2f-a7dea5e27f24","428":"d36c9a28-ebf1-4249-af5e-f4d50f21dd6a","429":"8a5ca25a-6363-486a-b019-2cb540238994","430":"bd720a3c-207c-4bb8-8367-5b96cf26db0d","431":"2ab9d867-786c-42f8-aabd-606167566106","432":"5a02f306-e714-4f5b-a3a4-53397edf3af3","433":"aecd853d-c3fa-4115-9c7e-5534b466332a","434":"cb411fb1-a390-423a-b285-96e7b65bb5e9","435":"93c84fa9-80a8-4377-990e-6e167b411136","436":"eae684b8-aa22-49d6-bf37-a8866ba1cda1","437":"705a8fde-4f98-4bf5-a92e-cb434771d7c4","438":"f6e32f22-c0bf-4bdb-ab07-54693eb05c5a","439":"3ad0bf04-6be5-4a34-9f71-244039bca5d0","440":"deec9c26-5985-445d-b5c7-75496d2c8251","441":"f239e749-1f82-4008-b45a-c5f06143b69d","442":"e5f0be3e-686d-475e-9575-3283a9ac142a","443":"834561f4-cee3-4795-b556-e2e27be77e18","444":"74b0b9ed-9757-4150-9892-b869b7221192","445":"d97eab7a-1284-4223-bb75-6f8a6f68ab9e","446":"dc7f4fbd-ab9f-4039-a607-ddf592936334","447":"0ff25ada-a471-49e0-a936-25fd71a1d76d","448":"b7d9ab22-3750-4f9e-a1ac-16ca8b178687","449":"2b869757-a549-450e-95fc-7758a3958472","450":"ed329b86-4a38-4289-b463-76d660c66632","451":"96ab4308-8b0d-4783-9e5b-2cc9054833c5","452":"5ab88156-33bf-4035-8878-f056c033ad47","453":"edb4ca5e-72cb-411f-a0f8-dff94fe8de89","454":"565ab4b4-3942-4e25-b7cb-f735f5476260","455":"b18ad869-18eb-412e-aacf-5afa2d9a7c74","456":"76516c15-1a8e-4d6f-8314-5d37f4a6db02","457":"6d099ff8-da1e-46c2-bb94-cc6e865f3d03","458":"91c9db9f-52d4-4a44-8bf3-823a6173211d","459":"01757f70-a193-430f-88f7-57678a7f26b3","460":"d6fda163-0aef-4abb-8898-103d5376e501","461":"3eb33b9b-717e-4b84-beb6-874a39f3035f","462":"78962e9b-1af0-410c-b925-e39e4b545350","463":"3e04d6ce-b34d-4dca-b505-709a44223121","464":"291782a1-5f8d-450f-9db7-a407986a76af","465":"d951b50e-d322-4765-93fa-eb32c43c9869","466":"baff8d27-cd05-41d9-b040-0d200bfdff2d","467":"131983d9-f5c3-48fb-8113-27051f4da8f6","468":"9c486fad-3291-42c7-b4ee-6c488a407971","469":"f45e264d-b408-4994-858e-bbe2aacb5781","470":"fe508b33-513b-42f2-b5ee-0bd56cc170a2","471":"5192906a-b0f7-4239-ad26-99e641420d30","472":"76201547-99eb-4532-8730-453f898ceaad","473":"ce1b80ed-f185-4ffa-a891-043b59844f71","474":"23be043b-7bf1-4c6c-993d-63963911df68","475":"c3f17d50-4f00-4ab1-a95c-e7dde42b0241","476":"24c5879b-5565-4da3-8edc-bb94087bba1f","477":"2dc156f5-d5af-4708-868b-b93a0890c3fa","478":"f585a955-ca61-4354-915a-a7b352533c8c","479":"d7bbac2e-cf16-4350-a213-4cfef855424d","480":"58d2c77a-ccb9-42ef-babd-46ad7d476469","481":"3e113e5b-c775-450d-a1c3-206110788f10","482":"d27e42ce-afd9-4be0-b3be-1f5809a76245","483":"e6013a3d-95a7-42c3-a846-7c2609fe9021","484":"5ea46563-35d6-4d03-b5de-7b3da5766d99","485":"01f6646a-b542-4305-b848-d6ecc15bffe2","486":"8e69c8b9-3b11-4e81-8302-a8c9b3a26bf6","487":"bb2d6f38-ffac-4762-868d-87c97f8ba110","488":"a5c564ca-83c3-42b2-a818-2f3c86da18d7","489":"8be29b92-ebf0-4651-bb39-aa619990cef5","490":"229c78fb-1cb8-4bf5-ac85-f43cfd5a56af","491":"01a9d9e3-f2f5-4747-ba4a-989346300a5c","492":"35d9f414-c09b-4774-ab09-063340001afc","493":"fae2b89b-a814-453e-ac3d-3adf01469cce","494":"958393c7-3cc0-4beb-9519-93fb3d7ae0b2","495":"7867e3dc-67f5-4ce1-acc0-bc8ac716ab78","496":"43568367-3772-4815-9ab4-e9a84f401c23","497":"f11df58c-9cbb-4652-bf5b-6a4f1d4d501a","498":"ae9763fc-8284-438b-9788-e4beada97aa4","499":"49a6d0e8-7492-442e-b1c4-e3e0e261da98","500":"15d318a8-601a-421a-b8ea-e9f0e9513ca6","501":"be86ca73-8543-42bf-80b2-d3a29a738c6d","502":"bdffae9d-396b-4279-b6f4-4c79e78907f0","503":"fb46212a-9bd6-42d2-988b-c594d02b2005","504":"8783d7fb-9891-4be7-85ae-bf232214b0a7","505":"64e77839-1275-4f7c-8bc4-b71800dfc08e","506":"6d90f1df-77be-4d3f-96a3-d87cb87222df","507":"7bef4cc0-6921-4ee6-b0cf-0f253682191e","508":"3a48ed61-16b4-419a-9f20-9b2771d0e923","509":"a6dc5ae6-2575-45ad-b304-fdde36aa8a69","510":"5c37d912-7a5e-42c4-a7c6-132fd4cf7112","511":"5d52b593-9953-4258-8965-3edd2107d3d3","512":"101a40ed-2bc6-4d12-8421-f56d8572e5de","513":"e61d951c-38b8-46d8-8e5b-4e4ccbee940b","514":"64e9d50e-4a18-4e20-998d-7d6f231847d5","515":"e4c5569d-99eb-4487-9a89-20831ced8799","516":"649af1d6-db1f-4d0f-a5ab-d2596440eee1","517":"4cb2057a-9474-49f0-a5d9-9ff42c67afb1","518":"e3b746b9-9688-41b7-8373-e59d810632b5","519":"9928f197-176a-4e3e-8fab-5c7556d999e4","520":"476e2912-94eb-4cbd-ba0b-321f751d64e6","521":"7c5fcfea-54b8-4282-a2b7-7fde798d8791","522":"f76f8391-dcba-4314-8a3e-b01307e940ec","523":"1b1e8793-d75f-4bfb-ba19-046052d95e35","524":"6308894b-e894-433e-a38c-2ab0a09dfd8b","525":"bef96624-9fd5-4bad-a98a-5470b52a1e9e","526":"547d5090-1867-4549-95cd-c2f17c580c84","527":"ce10cea2-a2c0-4420-9765-b630f0e9cafc","528":"ae046097-c0fc-49e8-9824-c3d014d10389","529":"4aeee2d7-aa15-468b-8e84-6cb7a250b314","530":"3bb98952-5977-4a5c-acdf-d18f3db33ae6","531":"ab9926b8-cc7f-4eb2-8d6a-e2f607bbdab7","532":"251ae79c-278a-46b2-95cb-5de88722de32","533":"ba2fc997-1644-45a8-82f8-d3fb3a6d87e3","534":"33ca720b-b294-4809-b090-00b52e8b787c","535":"8fd5f406-506a-4d92-a7a0-dd5502b1bb43","536":"5a76ca38-5774-4cdc-affd-e0876a34b251","537":"c7e3c2c1-0dd5-4b85-b9ed-9624d6445e1d","538":"f9ac36b9-b361-4703-96ea-72677c0df4e1","539":"3fe99942-165c-43fa-8523-80b8d51726a4","540":"fee45d2a-cc77-45c5-a801-1fa4705cf2af","541":"db79b7f3-7bd2-434d-b462-77983e2bbf87","542":"ec31ead9-81ea-4787-92a2-de1f4f0380be","543":"9b7c9b77-0411-48f9-ae35-1b57136bc5a7","544":"722e3a51-19f1-4e28-8a94-9689b87ca2db","545":"3d248746-128a-4730-b48f-f6b5634c7cf1","546":"b81118d2-ce14-4c64-abf7-4bf3f7124079","547":"71dd5b65-9ad5-47f0-a605-3972ab28dbe5","548":"5968b067-5e39-44f3-9aa0-42a4d85fabd5","549":"7bbd8c3c-0788-49b5-b4f7-fc384491b769","550":"4688051f-8773-49a1-833d-6db70be0dde0","551":"e5343139-b6cd-4519-b559-9e5e50f85b9a","552":"58ff8a89-1c09-46b1-bb15-ce50dbb39a57","553":"8088a37c-363f-40c5-be6f-e128449144a2","554":"10936067-42d9-4ac7-89cd-b2e1b27a2519","555":"0b53d543-ab83-44a8-b98f-439a5206cebb","556":"8210706d-f8be-4187-bb83-cfd52e896742","557":"cbf85d5d-8f89-4203-8d6c-73cae62ccd91","558":"89d69178-e01a-4f95-aedf-ce629f73f9ad","559":"ec3fb05d-df72-4fb4-872e-06a94e27d599","560":"ee60fdf1-503b-4eff-b406-130f2e01bc36","561":"803d69a4-7f99-42f3-83e1-9c0e83d69031","562":"18f5ea0f-5aa0-4ec8-b748-8eacebb99d9b","563":"0e2eb11b-2403-4dfe-be48-827fa7baa79d","564":"eb0d2d9e-91fb-4586-878d-bcf6cef51a24","565":"23ecd6d8-2f9c-46d0-ac44-40f065a455fc","566":"c2e68d9d-f8a5-4946-83b9-97bd374eea8b","567":"16c9d1fe-84c3-4bd3-8b4b-708e1949e3a6","568":"8c3e8889-75f0-4e8d-8ae5-4f9b3b77dde8","569":"a40a0c2c-9fe7-4549-bf63-7dae97ac76c7","570":"2bbcce73-85db-4e52-9511-8c68bab99b12","571":"5211d7bb-92c7-4150-a431-df67807a6865","572":"4a7ddbbf-b148-48df-ab88-00c9701e1799","573":"55fa1496-cf60-4cd1-9bd4-93fe04a1cb18","574":"6ca79adc-36be-4116-b2a9-8ac8abecf6b1","575":"0bb1cf2e-4273-45db-a3ac-fe4df2952116","576":"7b301f6e-c5d3-4863-8c6f-1739c03e991c","577":"c4108111-9637-4fd6-b3fc-d6ed83c08d4d","578":"afd5f9e3-e2a6-44b7-8349-2ce3992a7f72","579":"0d8377ef-e60d-4a12-81e3-7805fd8967cd","580":"851f9efb-5420-4e20-9ada-903fb7ebfdaa","581":"95e61387-7fa2-4bf4-8bb2-95e2826550aa","582":"9d51faf9-4732-48cf-a695-96d6e3c0479a","583":"440af6e3-b512-4487-90bc-8e2f2c9882dd","584":"a745e111-569a-495b-a743-bfac39625c5d","585":"17fec225-b304-4726-8e80-6b718b49bc59","586":"19604f93-0485-48a1-ab4e-3be00d306d26","587":"fe9974fa-6cba-4cd8-aca3-b8584410dc92","588":"2250ba3d-d389-4e70-9c0d-a814a634e82c","589":"9ad80a13-4e1a-4e5b-ab54-c140919a5e51","590":"2ac3923b-5203-40eb-bcd7-1048b32b74b1","591":"46b9a686-dbb7-41d7-9649-40408d8c05eb","592":"fe74d733-3331-453e-91f7-bf880ead7c3f","593":"fc4c25dd-3ce0-417b-a083-ae46b319be4d","594":"17c8accf-c02c-422b-a9ec-e91143fe530c","595":"1f5286b3-4bdb-43a6-8d03-dbe1dd7210b0","596":"d881da9c-4e7e-45ef-abf2-af0a56dfcba4","597":"ae54e65d-45e6-405f-8bf3-fe5fa6bdb73b","598":"12471c64-b73f-452e-9e83-c4a527bda49d","599":"54e77eba-341a-4767-a575-8ec74204042b","600":"ea72c487-2561-40d7-a741-7d2b20a99b6a","601":"024ddd4d-2f5c-4744-938e-728e6bbafe55","602":"c597949f-c1e6-4048-8e20-20bb9f7ace8d","603":"b15ed9c3-9d2d-45b4-bcdf-c4a11f9a0cb6","604":"205147f5-4494-4901-9ce3-c930c6506aed","605":"b891c90e-6ccf-45db-93e8-7c5cb56f27b6","606":"d3f28890-ce1c-4d78-a29d-3a1c1e6515dc","607":"e12d31e5-3d67-4b3c-9b82-11fcd1a0cb03","608":"fe17bf92-c27b-4f8c-a46c-c533ddd77bd8","609":"a5f8c669-3da3-49fe-8992-00456ccc21b9","610":"c99ab7b9-5174-4201-bba6-b7aa71ae2e7e","611":"36a9aae0-d085-4930-a9ac-aba486652e9c","612":"392a91ee-c934-41c7-ab70-04e88379f3c3","613":"1c83e34f-3ab6-46a5-8fb0-5740091c713c","614":"088b549b-d770-4cee-9e2b-b4c84c1a9029","615":"a07dfc0f-33c8-469e-a7b6-ebfbcf6357c0","616":"5abfde3a-da79-4048-91a1-af0fc9739c4c","617":"9bbb9057-8779-4496-97a4-ad63bff07884","618":"4e2aff14-b372-408e-b1dd-010efa46b607","619":"d3c71fff-56b3-4e65-a436-46a29fe3b34a","620":"c13fc931-4bba-4b58-a4ab-2faeea373b02","621":"ddc16c00-559f-4108-8b5c-be14fcc24511","622":"265eae50-24a4-4584-92fd-b7c430f84f08","623":"1796755e-bbb6-4657-8895-12c9f3c162f7","624":"17617eb6-b0ca-406b-ac23-2aed09ad5efa","625":"f8dc8095-80db-4105-85cc-b48acfaebcca","626":"8216d839-da8b-4c38-99b3-ace2e4f370e3","627":"414515f6-ed76-4480-aa61-a88569d748e0","628":"7d71085a-1706-4f9d-a1df-5579597efbb0","629":"307ec10c-35a7-4cee-944f-cb2076c8b7a7","630":"7d834f8c-4eab-407e-a56e-7cb5075c71e2","631":"e67a4fc7-d1fc-4fab-be99-89aec0a752ae","632":"9b2d5d5b-005a-4aae-b267-8683b559ac6a","633":"16215259-c594-4961-a52d-4d2e419ac1e3","634":"a5a1bc8c-4bda-412d-b4e1-a59cbd70b8e6","635":"fc747083-ebeb-4351-81c0-8ca814bccdc4","636":"1bd52760-f26e-4291-90c5-38c8c7cfa34e","637":"e36ad701-a976-457c-8a8d-131ad871e70a","638":"b67e23d8-8b4b-460d-9404-0d5a03f323f0","639":"4b19e14e-a803-43f8-a941-9bcecd565595","640":"48aa6e73-77c9-4dbd-9144-ff91aed14284","641":"9aa326d6-e907-4c28-a33d-96fddc5b19f4","642":"f4d24e32-adde-499d-8d0b-21e5b390e8af","643":"a6b89132-2108-427f-afc3-75d84fd3449d","644":"cd6d4a92-5a41-462f-8b75-37f816d9939d","645":"2ebe635a-b54a-4a1a-b191-17c66da3f267","646":"cbe2f2f2-8916-433a-a2d9-be35aec22bd8","647":"d8409964-ef32-4798-8a72-1469997c8211","648":"6f2d3b6a-4987-4236-afc1-26645c8bf76a","649":"0967863b-c923-4d1f-824d-c878433156fb","650":"e36fa642-a541-4bba-a5fc-84498ef09df4","651":"5b1f5591-efcf-458a-89e0-709ac969f67d","652":"bfaedd40-a69e-448e-9b24-cb5d4a557b35","653":"fbdb3568-cc64-4357-b155-7797deb0a1b3","654":"3b9347ad-b5c5-496d-9ca3-f83ddfd5f503","655":"53f6b1be-4126-40ff-85fd-de5709b66b8a","656":"596b2ae4-a07a-4fc8-ac54-44dac5b597f6","657":"0344967d-bc94-4f71-9981-d7837286554e","658":"7a8b970f-b392-47c5-b186-5bcf77ce7c5d","659":"71652e7e-03cb-41eb-acc9-028c67314010","660":"0c61b430-fd6a-4697-b851-ff27032b1e04","661":"bbd9cc01-1052-487a-8489-711a8eee2b59","662":"33aa1b3f-9265-42a5-a7c2-7d2d32f87460","663":"ea113a15-aa83-47df-82dc-4b1667949e08","664":"965fe622-2f09-4c31-81ee-c71cd5635014","665":"0af15d59-fb65-4d11-9770-298ec3ab4d68","666":"7a0af2bb-bab4-4a52-b309-5e17d7de4fcf","667":"ec86445a-a55d-4c78-b8fe-fe6e29c70353","668":"e5591031-0643-4d4d-8803-67b10cd39387","669":"3b126203-2155-4313-80f1-b7013ddcc27f","670":"0bb7f398-aa40-4751-950a-d8b42a738ff8","671":"b9421701-a011-4367-8680-f91c0c9344e8","672":"353b152f-35f5-4ae4-95b3-0915797ca3e7","673":"911e0bc3-ae1d-4472-aa3a-db3175748196","674":"43505ae7-c1a3-47e6-8c72-8fb8ca84b15c","675":"29039fc6-49f5-4174-9909-c0260a1c18f2","676":"13e89309-ff69-42ea-b2f0-30fd90b2ff75","677":"712e50a1-5123-4965-988f-769c2144d0fc","678":"672b23c0-add8-4532-ae53-584b2601873d","679":"dc4279a7-6cc7-4194-ae0a-3ba2851461e4","680":"6b597dad-bf7d-44d3-913f-10ec0ef60d25","681":"ecab2414-38cd-4dcb-a716-a26b49e4fb4d","682":"9cdbe674-f637-4374-b371-464e10d6ef41","683":"e2efa3ad-3f1a-4b64-8f3d-3ab8f895843f","684":"3c423ec5-d6c2-4cc7-b272-97e103ea1453","685":"159189aa-4f38-4a6c-b029-394f784dbca8","686":"0ed14656-c6e7-4899-91f0-e0c103816024","687":"cf48f7aa-6fc7-4c7f-b1de-a2e5a465f299","688":"1f9ea8cd-912c-462e-8395-de6e278cce5c","689":"e0517d8b-2ae5-434b-83cb-83bb84664c46","690":"2894a5c2-eaa5-4a33-923f-f9405750c9da","691":"83a7b395-a85d-4c6a-b2da-d43f51e4b26e","692":"8469b2c0-7b01-4222-b2e6-45e2c4598f2f","693":"8eedfe09-f962-4d0b-b638-587488b4ad6c","694":"7966e1b7-0e20-4345-ba11-fef8872f03ad","695":"79700ae8-1876-4cb1-9a6f-b78fda7dac55","696":"66752702-3cd7-4dad-b65b-e82554fbb546","697":"1c33c90b-333f-486f-933c-e2e5f3cbc91d","698":"9611f3cf-bacf-40f9-9ced-616246270883","699":"5b51b0c5-80a7-4bb6-a14b-d4daf3370379","700":"1c0d286e-3cc0-4209-b841-770ef05f2163","701":"8abbadcc-238b-4951-9f27-c2e6b9e874a7","702":"539ed202-d1b8-4c5d-bff7-0ac93bf79ba3","703":"53b68c0e-85ca-4a18-8b0c-6cefb730c50f","704":"d8918a6c-ec50-428c-b015-3e616168f513","705":"b944434a-ce9f-481d-b1d5-31e9f843953f","706":"d5e9a123-5515-4c40-8b01-2d82751da04b","707":"005bab54-ae9f-43ee-a4f5-b46b900aa046","708":"028bb44a-7ddf-4160-9d62-af3d9bf585f0","709":"c9bd16fd-3c40-4f13-b686-12552ce615f4","710":"d12ce84d-09ed-4ecb-9e9b-338508b53c03","711":"86cef67e-46db-4a99-af91-8ef161f993bc","712":"43019dbe-7102-497f-bc16-9ea291893864","713":"66b9d5fe-1e49-4978-a877-16b85bdfc8f5","714":"09169967-bdf1-48a4-8003-734926515e3c","715":"5f89bd67-2a37-4cb5-b079-a6c1a2423653","716":"4f043117-05c0-45fe-a8b5-dee481854e9a","717":"bb8f733a-bfd6-4045-a5cd-0294b0a050d2","718":"c013905f-d789-4e82-ac5f-0e264d683cfe","719":"3f9db7cd-a6f6-46be-b01b-c855a16d8e8f","720":"18550b03-e393-44ef-85a4-5466dbdd1a70","721":"a3392bf7-aa38-42b4-b721-96e87490b234","722":"04394428-379b-4845-809e-d6b7627be197","723":"2ffd8d70-04c3-4173-9526-cd35acba31c5","724":"42dc73eb-89c9-4bbc-997f-292ef37089f3","725":"64fe127a-4d3e-4f2b-b5e3-aabcf427437d","726":"c772c370-529d-411f-9dfc-2604f895f1ac","727":"a322a70b-cf2b-4d92-9956-b036fcf6b3a2","728":"14c850da-be7e-4d4b-8882-e80a0b27be7c","729":"d1b42a0f-d633-4c45-9b2d-23b69089ab27","730":"c2860a88-be74-4b4e-8178-8521c3861f53","731":"22622a9b-6c7d-4426-a647-f9fa7aff8bfc","732":"4b5fd18f-d68c-4073-808a-3d6644299374","733":"0f2855bd-b5ad-40c2-81ea-ac9bb695f264","734":"3c298ea6-0a3c-422a-9818-90530e59f626","735":"5169c3d1-21f3-4a08-b9f1-93d8fe2543e9","736":"ef31a5e9-d9f6-433a-a503-f13ff967b40c","737":"7d161d96-c25c-40fe-92ad-f4220ea42340","738":"facb7896-664c-4c9d-935f-62608bbf6183","739":"9dc037b4-388c-4437-8f5c-7c62ba6e4501","740":"91644215-4b2f-4795-9c99-bdc7b8f0dbb7","741":"65810873-0c64-43c0-8fc1-31eca5747d2d","742":"c1280c70-d55b-4301-896b-7c301cb31a19","743":"70bfb049-8819-4d67-9f99-42d4ab80385d","744":"35ebe43f-ea4f-4793-bd6b-45da739c6597","745":"849e8156-ac54-420e-9fc1-ecb6d82cf540","746":"dc4b8a51-3169-4862-9bad-a68674f8effc","747":"865a323a-d992-4b89-8492-81fcfa912e9b","748":"159984d7-397d-457a-8bdc-bd326188eeba","749":"91c589d9-7e93-42f2-aa2a-d297df37ac8d","750":"a221a323-a28c-4682-a731-bf20148bf5a1","751":"cdf93648-500f-4641-9230-cf202138fc34","752":"27bfee47-1358-4efd-9abd-dc13b5ef4a79","753":"575210b2-c8eb-4d6e-b13e-ee1c2392be48","754":"2a9255ec-1d44-495a-9fa5-eb8b153c85d1","755":"ee7b383d-b5e0-422e-860d-b8d2f8d413e2","756":"46a6c5ae-d01b-4c6c-af78-72d92e189a6b","757":"44ee4dd8-bbfd-44f7-b349-c26f2027210a","758":"33231a97-40e2-4448-b01f-81b81b1efa4b","759":"2209da36-e632-4dc3-b375-761b6226d0d4","760":"b49e97fd-9703-4fd1-a272-4bfae971c59b","761":"68393a84-416f-4fed-bc25-37bbf2ca8e7d","762":"d3f97170-b30f-4a3c-9673-351c64d33439","763":"3b114e5c-1cf6-4d07-bcec-b03165f6f077","764":"552ca4bb-98f0-4aba-a835-9f55a43bbc6a","765":"93c47653-b97a-46d6-a3f7-96a2bcadb1ed","766":"bcfb5ed7-6332-436b-b0f8-9071d7e3dc7a","767":"923aeea2-cc57-492f-9b2d-709425f2933e","768":"6171fb18-186f-495c-9fd6-93e5173d99f1","769":"b1126628-aeee-4e15-a336-1fa38d5ee67a","770":"1b7d622c-0c60-43e0-9ca4-1fdcf30c8072","771":"c10e149d-f195-4cdb-9775-cd8bbc94ffdc","772":"a5682b6f-aebc-49fa-9282-b8ddedbff255","773":"1aa23fc8-7ab2-4228-b03a-6891b97cfbe8","774":"eaabd45a-0e4c-41b2-9ac7-881921d3e805","775":"6def753a-b2da-4657-bb58-761c1de34696","776":"5e6a4ec6-5b27-44a5-85e1-a71c7b3da8c7","777":"e3fbd2c0-dec2-465b-9655-7a49a28af249","778":"5133eda8-1da9-43f5-8504-f053af7170f6","779":"5a845a8e-39e2-49e5-a7e3-8453e33a5b05","780":"4cfb4988-7d50-41d3-8207-2726dd360fd1","781":"ee273dae-e4c3-48e9-9e4a-76fe00cdbe85","782":"23c07746-b5a3-4119-870d-bb988d56cb18","783":"99ae0b03-75dd-465d-a52c-9e66783b3950","784":"ea7bdc07-a9f6-42ad-9a59-d256fe8a8f43","785":"ec6321bf-71d5-4a79-bd14-42658362638d","786":"d4d3ae3e-2ebf-4329-9cc5-5a3271132760","787":"e7b8ca1e-a39e-4081-a468-c7a72d451f6f","788":"2f2a994c-fdca-4895-9f80-ce811fd0509e","789":"2e51a6c0-4716-4f73-99f5-4f711e29347a","790":"ce4f0ba0-38d6-423c-a905-a2a0ca60caeb","791":"85efa064-56d9-4aa7-a457-dab0bb1acca7","792":"b3bcae1a-a5b7-4b13-8e5b-ddcd260223c4","793":"14ee68ec-9850-467b-b11c-b4b2d8d7c932","794":"6577097e-7f10-41ef-9ce9-e8369d9b67ce","795":"6edae825-cff9-4bc1-aacb-39319adcace0","796":"11325447-70c2-47de-be0b-9fd793bb231e","797":"9cab2cdd-9308-43c0-9183-52de44e62a53","798":"098de873-c11c-4ee9-8320-664faffb0b89","799":"0fe8e796-3c20-4076-a3f6-12c7e1b5aaf7","800":"bd7504bc-9595-41f5-b057-ac9798fc04f8","801":"ac212a7c-222a-4b69-8a82-27ac959161e3","802":"f2dae8dd-b7fc-4e8c-8714-41dbcd22a4e1","803":"287477b1-5c21-4276-bdc6-977b573d3917","804":"3a814b17-c026-43cb-a9ee-a902187193a0","805":"9d38f552-d9b3-498e-abcb-dafb110c00c9","806":"5bfdebbc-8e14-4010-9b6e-321805460ca4","807":"98bab0a1-2bdb-44df-88ec-71988a9cd801","808":"30d34b9a-51cd-42e3-b642-e20c6536a7b3","809":"895e6529-0d79-41f1-89c5-fb9882ee7311","810":"b22b910c-02eb-4293-912f-d59f62ebdeb7","811":"89e74530-f5ad-479c-9c35-fd75226ee099","812":"44d424c3-3b9d-41ac-b7cc-95ccc34d11a3","813":"510aa533-47be-4987-959a-f19edbe93827","814":"15c33d12-0338-4807-b555-ac9dd0d4a9d9","815":"084aae06-05e6-4b25-b2dc-92977519db4f","816":"60e11246-7787-41f8-af28-cfe3578235a0","817":"ab36b261-1719-47c6-9965-20a0c218a9c0","818":"fcead0bf-53c1-4dd9-bf27-13e04a2baeb3","819":"6bd94227-0157-4b8d-a35f-412cfd5fb451","820":"a333b04a-4699-4e76-807b-e4211c1b1d6d","821":"09a8d4c6-86c1-42ff-a828-6a3cfea87f6e","822":"7ae45472-6ddc-465e-a59f-0e94545f6ef3","823":"794a4b0f-c0bd-440c-b620-58861b5c3d33","824":"4791d3a3-a5b2-4553-9c22-c64a214d3558","825":"70142555-f8ca-4d65-b19f-c163c76e2284","826":"318766f7-5fa6-4605-8a04-d0a14caacdb6","827":"df025c3e-8124-4e55-8356-f1c353e90796","828":"35d0b950-46b6-48fe-b63e-ecf74aedc6f9","829":"6c00669b-f741-45c7-aeab-1ac1c1932f12","830":"022de592-543e-41ec-bdbc-49c0f44fcee2","831":"60a73669-bcbb-4770-bec5-c5227f4b04c7","832":"48d343dd-bff0-4c51-9852-fd61e85bb3d4","833":"9d18562b-e64e-4c8f-ace8-5d0143c090cd","834":"81eaa51f-9a86-485e-a7a2-644f979c53b5","835":"214415b5-e659-4bc0-8555-b7ef3d8e6ad0"}]